{"ast":null,"code":"import P from 'react';\nimport * as D from '@radix-ui/react-tabs';\nimport { cx, css } from 'emotion';\nimport r from '@contentful/f36-tokens';\nvar k = Object.defineProperty,\n  V = Object.defineProperties;\nvar $ = Object.getOwnPropertyDescriptors;\nvar x = Object.getOwnPropertySymbols;\nvar L = Object.prototype.hasOwnProperty,\n  N = Object.prototype.propertyIsEnumerable;\nvar S = (o, t, a) => t in o ? k(o, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: a\n  }) : o[t] = a,\n  n = (o, t) => {\n    for (var a in t || (t = {})) L.call(t, a) && S(o, a, t[a]);\n    if (x) for (var a of x(t)) N.call(t, a) && S(o, a, t[a]);\n    return o;\n  },\n  p = (o, t) => V(o, $(t));\nvar b = (o, t) => {\n  var a = {};\n  for (var e in o) L.call(o, e) && t.indexOf(e) < 0 && (a[e] = o[e]);\n  if (o != null && x) for (var e of x(o)) t.indexOf(e) < 0 && N.call(o, e) && (a[e] = o[e]);\n  return a;\n};\nvar v = P.forwardRef((o, t) => {\n  let s = o,\n    {\n      defaultTab: a,\n      currentTab: e,\n      onTabChange: l,\n      children: i,\n      testId: d = \"cf-ui-tabs\"\n    } = s,\n    m = b(s, [\"defaultTab\", \"currentTab\", \"onTabChange\", \"children\", \"testId\"]);\n  return P.createElement(D.Root, p(n({}, m), {\n    defaultValue: a,\n    value: e,\n    onValueChange: l,\n    \"data-test-id\": d,\n    ref: t\n  }), i);\n});\nv.displayName = \"Tabs\";\nvar T = {\n    tabs: {\n      display: \"flex\"\n    },\n    tab: {\n      borderRadius: 0,\n      whiteSpace: \"nowrap\",\n      color: r.gray500,\n      display: \"flex\",\n      height: \"100%\",\n      minHeight: r.spacing2Xl,\n      position: \"relative\",\n      padding: `0 ${r.spacingM}`,\n      fontFamily: r.fontStackPrimary,\n      fontWeight: r.fontWeightDemiBold,\n      border: \"none\",\n      cursor: \"pointer\",\n      outline: \"none\",\n      \"&:focus-visible\": {\n        boxShadow: r.glowPrimary\n      },\n      \"&:before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        background: r.colorPrimary,\n        opacity: \"0\",\n        bottom: \"0\",\n        left: \"0\",\n        right: \"0\",\n        height: \"2px\"\n      },\n      \"&:hover:before, &:hover:focus\": {\n        opacity: \"0.5\"\n      },\n      '&[data-state=\"active\"]': {\n        color: r.colorPrimary,\n        \"&:before, &:hover:before, &:hover:focus\": {\n          opacity: \"1\"\n        }\n      },\n      \"> span\": {\n        display: \"flex\",\n        alignSelf: \"center\",\n        cursor: \"inherit\"\n      }\n    },\n    tabDisabled: {\n      opacity: \"0.5\",\n      cursor: \"not-allowed\"\n    },\n    tabDividerVertical: {\n      \"& > *:not(:first-child)\": {\n        boxShadow: `inset 1px 0 0px 0px ${r.gray200}`\n      }\n    },\n    tabDividerHorizontal: {\n      boxShadow: `inset 0 -2px 0px 0px ${r.gray200}`\n    }\n  },\n  E = _ref => {\n    let {\n      className: o,\n      isDisabled: t\n    } = _ref;\n    return {\n      tab: cx(css(T.tab), o, {\n        [css(T.tabDisabled)]: t\n      })\n    };\n  },\n  M = _ref2 => {\n    let {\n      className: o,\n      variant: t\n    } = _ref2;\n    return {\n      tabList: cx(css(T.tabs), o, {\n        [css(T.tabDividerHorizontal)]: t === \"horizontal-divider\",\n        [css(T.tabDividerVertical)]: t === \"vertical-divider\"\n      })\n    };\n  },\n  H = _ref3 => {\n    let {\n      className: o\n    } = _ref3;\n    return {\n      tabPanel: cx(css({\n        outline: \"none\",\n        \"&:focus-visible\": {\n          boxShadow: r.glowPrimary\n        }\n      }), o)\n    };\n  };\nvar y = P.forwardRef((o, t) => {\n  let f = o,\n    {\n      children: a,\n      testId: e = \"cf-ui-tab\",\n      panelId: l,\n      isDisabled: i,\n      className: d\n    } = f,\n    m = b(f, [\"children\", \"testId\", \"panelId\", \"isDisabled\", \"className\"]),\n    s = E({\n      className: d,\n      isDisabled: i\n    });\n  return P.createElement(D.Trigger, {\n    disabled: i,\n    value: l,\n    \"data-test-id\": e,\n    asChild: !0\n  }, P.createElement(\"div\", p(n({}, m), {\n    className: s.tab,\n    ref: t\n  }), P.createElement(\"span\", null, a)));\n});\ny.displayName = \"Tab\";\nvar u = P.forwardRef((o, t) => {\n  let f = o,\n    {\n      children: a,\n      testId: e = \"cf-ui-tab-panel\",\n      id: l,\n      className: i,\n      forceMount: d\n    } = f,\n    m = b(f, [\"children\", \"testId\", \"id\", \"className\", \"forceMount\"]),\n    s = H({\n      className: i\n    });\n  return P.createElement(D.Content, {\n    \"data-test-id\": e,\n    value: l,\n    asChild: !0,\n    forceMount: d\n  }, P.createElement(\"div\", p(n({}, m), {\n    ref: t,\n    className: s.tabPanel\n  }), a));\n});\nu.displayName = \"TabPanel\";\nvar h = P.forwardRef((o, t) => {\n  let s = o,\n    {\n      className: a,\n      variant: e,\n      children: l,\n      testId: i = \"cf-ui-tab-list\"\n    } = s,\n    d = b(s, [\"className\", \"variant\", \"children\", \"testId\"]),\n    m = M({\n      className: a,\n      variant: e\n    });\n  return P.createElement(D.List, p(n({}, d), {\n    \"data-test-id\": i,\n    className: m.tabList,\n    ref: t\n  }), l);\n});\nh.displayName = \"TabList\";\nvar g = v;\ng.Panel = u;\ng.Tab = y;\ng.List = h;\nexport { y as Tab, h as TabList, u as TabPanel, g as Tabs };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-tabs/src/Tabs.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-tabs/src/Tab.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-tabs/src/Tabs.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-tabs/src/TabPanel.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-tabs/src/TabList.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-tabs/src/CompoundTabs.tsx"],"sourcesContent":["import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\n\nexport interface TabsProps extends CommonProps {\n  children?: React.ReactNode;\n  defaultTab?: string;\n  currentTab?: string;\n  onTabChange?: (tab: string) => void;\n}\n\nexport const Tabs = React.forwardRef<HTMLDivElement, ExpandProps<TabsProps>>(\n  (props, ref) => {\n    const {\n      defaultTab,\n      currentTab,\n      onTabChange,\n      children,\n      testId = 'cf-ui-tabs',\n      ...otherProps\n    } = props;\n    return (\n      <RadixTabs.Root\n        {...otherProps}\n        defaultValue={defaultTab}\n        value={currentTab}\n        onValueChange={onTabChange}\n        data-test-id={testId}\n        ref={ref}\n      >\n        {children}\n      </RadixTabs.Root>\n    );\n  },\n);\n\nTabs.displayName = 'Tabs';\n","import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport { getTabStyles } from './Tabs.styles';\n\nexport interface TabProps extends CommonProps {\n  /**\n   * A unique id that associates the tab with a panel.\n   */\n  panelId: string;\n  /**\n   * When true, prevents the user from interacting with the tab.\n   */\n  isDisabled?: boolean;\n  children: React.ReactNode;\n}\n\nexport const Tab = React.forwardRef<HTMLDivElement, ExpandProps<TabProps>>(\n  (props, ref) => {\n    const {\n      children,\n      testId = 'cf-ui-tab',\n      panelId,\n      isDisabled,\n      className,\n      ...otherProps\n    } = props;\n\n    const styles = getTabStyles({ className, isDisabled });\n    return (\n      <RadixTabs.Trigger\n        disabled={isDisabled}\n        value={panelId}\n        data-test-id={testId}\n        asChild\n      >\n        <div {...otherProps} className={styles.tab} ref={ref}>\n          <span>{children}</span>\n        </div>\n      </RadixTabs.Trigger>\n    );\n  },\n);\n\nTab.displayName = 'Tab';\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst styles = {\n  tabs: {\n    display: 'flex',\n  } as CSSObject,\n  tab: {\n    borderRadius: 0,\n    whiteSpace: 'nowrap',\n    color: tokens.gray500,\n    display: 'flex',\n    height: '100%',\n    minHeight: tokens.spacing2Xl,\n    position: 'relative',\n    padding: `0 ${tokens.spacingM}`,\n    fontFamily: tokens.fontStackPrimary,\n    fontWeight: tokens.fontWeightDemiBold,\n    border: 'none',\n    cursor: 'pointer',\n    outline: 'none',\n    '&:focus-visible': {\n      boxShadow: tokens.glowPrimary,\n    },\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      background: tokens.colorPrimary,\n      opacity: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      height: '2px',\n    },\n    '&:hover:before, &:hover:focus': {\n      opacity: '0.5',\n    },\n    '&[data-state=\"active\"]': {\n      color: tokens.colorPrimary,\n      '&:before, &:hover:before, &:hover:focus': {\n        opacity: '1',\n      },\n    },\n    '> span': {\n      display: 'flex',\n      alignSelf: 'center',\n      cursor: 'inherit',\n    },\n  } as CSSObject,\n  tabDisabled: {\n    opacity: '0.5',\n    cursor: 'not-allowed',\n  } as CSSObject,\n  tabDividerVertical: {\n    '& > *:not(:first-child)': {\n      boxShadow: `inset 1px 0 0px 0px ${tokens.gray200}`,\n    },\n  },\n  tabDividerHorizontal: {\n    boxShadow: `inset 0 -2px 0px 0px ${tokens.gray200}`,\n  },\n};\n\nexport const getTabStyles = ({ className, isDisabled }) => ({\n  tab: cx(css(styles.tab), className, {\n    [css(styles.tabDisabled)]: isDisabled,\n  }),\n});\n\nexport const getTabsStyles = ({ className, variant }) => ({\n  tabList: cx(css(styles.tabs), className, {\n    [css(styles.tabDividerHorizontal)]: variant === 'horizontal-divider',\n    [css(styles.tabDividerVertical)]: variant === 'vertical-divider',\n  }),\n});\n\nexport const getTabPanelStyles = ({ className }: { className: string }) => ({\n  tabPanel: cx(\n    css({\n      outline: 'none',\n      '&:focus-visible': {\n        boxShadow: tokens.glowPrimary,\n      },\n    }),\n    className,\n  ),\n});\n","import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport type { TabsContentProps } from '@radix-ui/react-tabs';\nimport { getTabPanelStyles } from './Tabs.styles';\n\nexport interface TabPanelProps\n  extends CommonProps,\n    Pick<TabsContentProps, 'forceMount'> {\n  id: string;\n  children: React.ReactNode;\n}\n\nexport const TabPanel = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<TabPanelProps>\n>((props, ref) => {\n  const {\n    children,\n    testId = 'cf-ui-tab-panel',\n    id,\n    className,\n    forceMount,\n    ...otherProps\n  } = props;\n  const styles = getTabPanelStyles({ className });\n  return (\n    <RadixTabs.Content\n      data-test-id={testId}\n      value={id}\n      asChild\n      forceMount={forceMount}\n    >\n      <div {...otherProps} ref={ref} className={styles.tabPanel}>\n        {children}\n      </div>\n    </RadixTabs.Content>\n  );\n});\nTabPanel.displayName = 'TabPanel';\n","import React from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport * as RadixTabs from '@radix-ui/react-tabs';\nimport { getTabsStyles } from './Tabs.styles';\n\nexport interface TabListProps extends CommonProps {\n  /**\n   * visual variant of TabList\n   */\n  variant?: 'default' | 'horizontal-divider' | 'vertical-divider';\n  /**\n   * When true, keyboard navigation will loop from last tab to first, and vice versa.\n   * @default true\n   */\n  loop?: boolean;\n  children?: React.ReactNode;\n}\n\nexport const TabList = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<TabListProps>\n>((props, ref) => {\n  const {\n    className,\n    variant,\n    children,\n    testId = 'cf-ui-tab-list',\n    ...otherProps\n  } = props;\n  const styles = getTabsStyles({\n    className,\n    variant,\n  });\n  return (\n    <RadixTabs.List\n      {...otherProps}\n      data-test-id={testId}\n      className={styles.tabList}\n      ref={ref}\n    >\n      {children}\n    </RadixTabs.List>\n  );\n});\nTabList.displayName = 'TabList';\n","import { Tabs as OriginalTabs } from './Tabs';\nimport { Tab } from './Tab';\nimport { TabPanel } from './TabPanel';\nimport { TabList } from './TabList';\n\ntype CompoundTabs = typeof OriginalTabs & {\n  Panel: typeof TabPanel;\n  Tab: typeof Tab;\n  List: typeof TabList;\n};\n\nexport const Tabs = OriginalTabs as CompoundTabs;\nTabs.Panel = TabPanel;\nTabs.Tab = Tab;\nTabs.List = TabList;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}