{"ast":null,"code":"/*global module:true*/\n/*jslint nomen:true*/\n/**\n * @module Utility\n */\n(function (context, undefined) {\n  'use strict';\n\n  var DEFAULT_TRUNCATE_SYMBOL = '…',\n    // Limit emails to no more than about 600 chars, well over the max of ~300.\n    // cf. RFC: https://www.rfc-editor.org/errata_search.php?eid=1690\n    URL_REGEX = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]{1,300}@(.{1,300}\\.)[a-zA-Z]{2,3})/g;\n  function __appendEllipsis(string, options, content) {\n    if (content.length === string.length || !options.ellipsis) {\n      return content;\n    }\n    content += options.ellipsis;\n    return content;\n  }\n  /**\n   * Truncate HTML string and keep tag safe.\n   *\n   * @method truncate\n   * @param {String} string string needs to be truncated\n   * @param {Number} maxLength length of truncated string\n   * @param {Object} options (optional)\n   * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default\n   * @return {String} truncated string\n   */\n  function truncate(string, maxLength, options) {\n    var content = '',\n      // truncated text storage\n      matches = true,\n      remainingLength = maxLength,\n      result,\n      index;\n    options = options || {};\n    options.ellipsis = typeof options.ellipsis === \"undefined\" ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;\n    if (!string || string.length === 0) {\n      return '';\n    }\n    matches = true;\n    while (matches) {\n      URL_REGEX.lastIndex = content.length;\n      matches = URL_REGEX.exec(string);\n      // Don't try to retain URLs longer than 3k chars, well over the 99th percentile of ~347\n      if (!matches || matches.index - content.length >= remainingLength || URL_REGEX.lastIndex >= maxLength + 3000) {\n        content += string.substring(content.length, maxLength);\n        return __appendEllipsis(string, options, content, maxLength);\n      }\n      result = matches[0];\n      index = matches.index;\n      content += string.substring(content.length, index + result.length);\n      remainingLength -= index + result.length;\n      if (remainingLength <= 0) {\n        break;\n      }\n    }\n    return __appendEllipsis(string, options, content, maxLength);\n  }\n  if ('undefined' !== typeof module && module.exports) {\n    module.exports = truncate;\n  } else {\n    context.truncate = truncate;\n  }\n})(String);","map":{"version":3,"names":["context","undefined","DEFAULT_TRUNCATE_SYMBOL","URL_REGEX","__appendEllipsis","string","options","content","length","ellipsis","truncate","maxLength","matches","remainingLength","result","index","lastIndex","exec","substring","module","exports","String"],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/truncate/truncate.js"],"sourcesContent":["/*global module:true*/\n/*jslint nomen:true*/\n/**\n * @module Utility\n */\n(function (context, undefined) {\n    'use strict';\n\n    var DEFAULT_TRUNCATE_SYMBOL = '…',\n        // Limit emails to no more than about 600 chars, well over the max of ~300.\n        // cf. RFC: https://www.rfc-editor.org/errata_search.php?eid=1690\n        URL_REGEX = /(((ftp|https?):\\/\\/)[\\-\\w@:%_\\+.~#?,&\\/\\/=]+)|((mailto:)?[_.\\w-]{1,300}@(.{1,300}\\.)[a-zA-Z]{2,3})/g;\n\n    function __appendEllipsis(string, options, content) {\n        if (content.length === string.length || !options.ellipsis) {\n            return content;\n        }\n        content += options.ellipsis;\n        return content;\n    }\n    /**\n     * Truncate HTML string and keep tag safe.\n     *\n     * @method truncate\n     * @param {String} string string needs to be truncated\n     * @param {Number} maxLength length of truncated string\n     * @param {Object} options (optional)\n     * @param {Boolean|String} [options.ellipsis] omission symbol for truncated string, '...' by default\n     * @return {String} truncated string\n     */\n    function truncate(string, maxLength, options) {\n        var content = '', // truncated text storage\n            matches = true,\n            remainingLength = maxLength,\n            result,\n            index;\n\n        options = options || {};\n        options.ellipsis = (typeof options.ellipsis === \"undefined\") ? DEFAULT_TRUNCATE_SYMBOL : options.ellipsis;\n\n        if (!string || string.length === 0) {\n            return '';\n        }\n\n        matches = true;\n        while (matches) {\n            URL_REGEX.lastIndex = content.length;\n            matches = URL_REGEX.exec(string);\n            // Don't try to retain URLs longer than 3k chars, well over the 99th percentile of ~347\n            if (!matches || (matches.index - content.length) >= remainingLength || URL_REGEX.lastIndex >= (maxLength + 3000)) {\n                content += string.substring(content.length, maxLength);\n                return __appendEllipsis(string, options, content, maxLength);\n            }\n\n            result = matches[0];\n            index = matches.index;\n            content += string.substring(content.length, index + result.length);\n            remainingLength -= index + result.length;\n\n            if (remainingLength <= 0) {\n                break;\n            }\n        }\n\n        return __appendEllipsis(string, options, content, maxLength);\n    }\n\n    if ('undefined' !== typeof module && module.exports) {\n        module.exports = truncate;\n    } else {\n        context.truncate = truncate;\n    }\n}(String));\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACC,WAAUA,OAAO,EAAEC,SAAS,EAAE;EAC3B,YAAY;;EAEZ,IAAIC,uBAAuB,GAAG,GAAG;IAC7B;IACA;IACAC,SAAS,GAAG,qGAAqG;EAErH,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAE;IAChD,IAAIA,OAAO,CAACC,MAAM,KAAKH,MAAM,CAACG,MAAM,IAAI,CAACF,OAAO,CAACG,QAAQ,EAAE;MACvD,OAAOF,OAAO;IAClB;IACAA,OAAO,IAAID,OAAO,CAACG,QAAQ;IAC3B,OAAOF,OAAO;EAClB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,SAASG,QAAQA,CAACL,MAAM,EAAEM,SAAS,EAAEL,OAAO,EAAE;IAC1C,IAAIC,OAAO,GAAG,EAAE;MAAE;MACdK,OAAO,GAAG,IAAI;MACdC,eAAe,GAAGF,SAAS;MAC3BG,MAAM;MACNC,KAAK;IAETT,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IACvBA,OAAO,CAACG,QAAQ,GAAI,OAAOH,OAAO,CAACG,QAAQ,KAAK,WAAW,GAAIP,uBAAuB,GAAGI,OAAO,CAACG,QAAQ;IAEzG,IAAI,CAACJ,MAAM,IAAIA,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;MAChC,OAAO,EAAE;IACb;IAEAI,OAAO,GAAG,IAAI;IACd,OAAOA,OAAO,EAAE;MACZT,SAAS,CAACa,SAAS,GAAGT,OAAO,CAACC,MAAM;MACpCI,OAAO,GAAGT,SAAS,CAACc,IAAI,CAACZ,MAAM,CAAC;MAChC;MACA,IAAI,CAACO,OAAO,IAAKA,OAAO,CAACG,KAAK,GAAGR,OAAO,CAACC,MAAM,IAAKK,eAAe,IAAIV,SAAS,CAACa,SAAS,IAAKL,SAAS,GAAG,IAAK,EAAE;QAC9GJ,OAAO,IAAIF,MAAM,CAACa,SAAS,CAACX,OAAO,CAACC,MAAM,EAAEG,SAAS,CAAC;QACtD,OAAOP,gBAAgB,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEI,SAAS,CAAC;MAChE;MAEAG,MAAM,GAAGF,OAAO,CAAC,CAAC,CAAC;MACnBG,KAAK,GAAGH,OAAO,CAACG,KAAK;MACrBR,OAAO,IAAIF,MAAM,CAACa,SAAS,CAACX,OAAO,CAACC,MAAM,EAAEO,KAAK,GAAGD,MAAM,CAACN,MAAM,CAAC;MAClEK,eAAe,IAAIE,KAAK,GAAGD,MAAM,CAACN,MAAM;MAExC,IAAIK,eAAe,IAAI,CAAC,EAAE;QACtB;MACJ;IACJ;IAEA,OAAOT,gBAAgB,CAACC,MAAM,EAAEC,OAAO,EAAEC,OAAO,EAAEI,SAAS,CAAC;EAChE;EAEA,IAAI,WAAW,KAAK,OAAOQ,MAAM,IAAIA,MAAM,CAACC,OAAO,EAAE;IACjDD,MAAM,CAACC,OAAO,GAAGV,QAAQ;EAC7B,CAAC,MAAM;IACHV,OAAO,CAACU,QAAQ,GAAGA,QAAQ;EAC/B;AACJ,CAAC,EAACW,MAAM,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}