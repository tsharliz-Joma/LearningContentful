{"ast":null,"code":"import { cx, css } from 'emotion';\nimport S, { forwardRef, createContext } from 'react';\nimport { Box } from '@contentful/f36-core';\nimport n from '@contentful/f36-tokens';\nvar v = Object.defineProperty,\n  $ = Object.defineProperties;\nvar z = Object.getOwnPropertyDescriptors;\nvar c = Object.getOwnPropertySymbols;\nvar w = Object.prototype.hasOwnProperty,\n  M = Object.prototype.propertyIsEnumerable;\nvar E = (e, o, t) => o in e ? v(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  l = (e, o) => {\n    for (var t in o || (o = {})) w.call(o, t) && E(e, t, o[t]);\n    if (c) for (var t of c(o)) M.call(o, t) && E(e, t, o[t]);\n    return e;\n  },\n  a = (e, o) => $(e, z(o));\nvar s = (e, o) => {\n  var t = {};\n  for (var r in e) w.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && c) for (var r of c(e)) o.indexOf(r) < 0 && M.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar j = () => ({\n    inline: css({\n      borderRadius: n.borderRadiusMedium,\n      boxShadow: `0 0 0 1px ${n.gray200}`,\n      \"th:first-child\": {\n        borderTopLeftRadius: n.borderRadiusMedium\n      },\n      \"th:last-child\": {\n        borderTopRightRadius: n.borderRadiusMedium\n      },\n      \"tr:last-child td:first-child\": {\n        borderBottomLeftRadius: n.borderRadiusMedium\n      },\n      \"tr:last-child td:last-child\": {\n        borderBottomRightRadius: n.borderRadiusMedium\n      }\n    }),\n    root: css({\n      width: \"100%\"\n    })\n  }),\n  g = forwardRef((m, i) => {\n    var b = m,\n      {\n        children: e,\n        className: o,\n        layout: t = \"inline\",\n        testId: r = \"cf-ui-table\"\n      } = b,\n      d = s(b, [\"children\", \"className\", \"layout\", \"testId\"]);\n    let p = j();\n    return S.createElement(Box, a(l({\n      cellPadding: \"0\",\n      cellSpacing: \"0\"\n    }, d), {\n      as: \"table\",\n      display: \"table\",\n      ref: i,\n      className: cx(p.root, {\n        [p.inline]: t === \"inline\"\n      }, o),\n      testId: r\n    }), e);\n  });\ng.displayName = \"Table\";\nfunction I(i, d) {\n  var m = i,\n    {\n      className: e,\n      children: o,\n      testId: t = \"cf-ui-table-body\"\n    } = m,\n    r = s(m, [\"className\", \"children\", \"testId\"]);\n  return S.createElement(Box, a(l({}, r), {\n    as: \"tbody\",\n    className: e,\n    ref: d,\n    testId: t\n  }), o);\n}\nI.displayName = \"TableBody\";\nvar R = forwardRef(I);\nvar x = {\n    body: {\n      name: \"body\",\n      as: \"td\",\n      offsetTop: 0\n    },\n    head: {\n      name: \"head\",\n      as: \"th\",\n      offsetTop: 0\n    }\n  },\n  f = createContext(x.body);\nvar P = forwardRef((b, m) => {\n  var p = b,\n    {\n      align: e = \"left\",\n      children: o,\n      className: t,\n      sorting: r = !1,\n      testId: d = \"cf-ui-table-cell\"\n    } = p,\n    i = s(p, [\"align\", \"children\", \"className\", \"sorting\", \"testId\"]);\n  return S.createElement(f.Consumer, null, _ref => {\n    let {\n      as: u,\n      name: k,\n      offsetTop: O\n    } = _ref;\n    let B = k === \"head\";\n    return S.createElement(Box, a(l({}, i), {\n      as: u,\n      className: cx(css({\n        backgroundColor: B ? n.gray100 : void 0,\n        borderBottom: `1px solid ${n.gray200}`,\n        color: r ? n.gray900 : n.gray700,\n        fontFamily: n.fontStackPrimary,\n        fontSize: n.fontSizeM,\n        fontWeight: B ? n.fontWeightMedium : n.fontWeightNormal,\n        lineHeight: n.lineHeightL,\n        padding: `${n.spacingS} ${n.spacingM}`,\n        textAlign: e,\n        verticalAlign: \"top\"\n      }), t),\n      ref: m,\n      style: a(l({}, i.style), {\n        top: O || void 0\n      }),\n      testId: d\n    }), o);\n  });\n});\nP.displayName = \"TableCell\";\nvar C = forwardRef((b, m) => {\n  var p = b,\n    {\n      children: e,\n      className: o,\n      isSticky: t = !1,\n      offsetTop: r,\n      testId: d = \"cf-ui-table-head\"\n    } = p,\n    i = s(p, [\"children\", \"className\", \"isSticky\", \"offsetTop\", \"testId\"]);\n  let u = cx(t ? css({\n    th: {\n      position: \"sticky\",\n      top: 0,\n      zIndex: n.zIndexDefault\n    }\n  }) : \"\", o);\n  return S.createElement(f.Provider, {\n    value: a(l({}, x.head), {\n      offsetTop: r || 0\n    })\n  }, S.createElement(Box, a(l({}, i), {\n    as: \"thead\",\n    className: u,\n    ref: m,\n    testId: d\n  }), e));\n});\nC.displayName = \"TableHead\";\nvar ne = () => ({\n    root: css({\n      \"&:last-child td\": {\n        borderBottom: \"none\"\n      },\n      \"&:hover td\": {\n        backgroundColor: n.gray100\n      }\n    }),\n    selected: css({\n      \"td, th\": {\n        backgroundColor: n.blue100\n      },\n      \"td:last-child\": {\n        boxShadow: `inset -2px 0 0 ${n.blue500}`\n      }\n    })\n  }),\n  h = forwardRef((m, i) => {\n    var b = m,\n      {\n        className: e,\n        children: o,\n        isSelected: t = !1,\n        testId: r = \"cf-ui-table-row\"\n      } = b,\n      d = s(b, [\"className\", \"children\", \"isSelected\", \"testId\"]);\n    let p = ne();\n    return S.createElement(Box, a(l({}, d), {\n      as: \"tr\",\n      className: cx(p.root, {\n        [p.selected]: t\n      }, e),\n      ref: i,\n      testId: r\n    }), o);\n  });\nh.displayName = \"TableRow\";\nvar y = g;\ny.Row = h;\ny.Head = C;\ny.Cell = P;\ny.Body = R;\nexport { y as Table, R as TableBody, P as TableCell, f as TableCellContext, C as TableHead, h as TableRow, x as contextOptions };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/Table.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/TableBody.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/TableCell.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/tableCellContext.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/TableHead.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/TableRow.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-table/src/CompoundTable.tsx"],"sourcesContent":["import { cx, css } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport tokens from '@contentful/f36-tokens';\n\nconst getStyles = () => {\n  return {\n    inline: css({\n      borderRadius: tokens.borderRadiusMedium,\n      boxShadow: `0 0 0 1px ${tokens.gray200}`,\n      'th:first-child': {\n        borderTopLeftRadius: tokens.borderRadiusMedium,\n      },\n      'th:last-child': {\n        borderTopRightRadius: tokens.borderRadiusMedium,\n      },\n      'tr:last-child td:first-child': {\n        borderBottomLeftRadius: tokens.borderRadiusMedium,\n      },\n      'tr:last-child td:last-child': {\n        borderBottomRightRadius: tokens.borderRadiusMedium,\n      },\n    }),\n    root: css({\n      width: '100%',\n    }),\n  };\n};\n\nexport type TableInternalProps = CommonProps & {\n  layout?: 'inline' | 'embedded';\n};\n\nexport type TableProps = PropsWithHTMLElement<TableInternalProps, 'table'>;\n\nexport const Table = forwardRef<HTMLTableElement, ExpandProps<TableProps>>(\n  (\n    {\n      children,\n      className,\n      layout = 'inline',\n      testId = 'cf-ui-table',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getStyles();\n    return (\n      <Box\n        cellPadding=\"0\"\n        cellSpacing=\"0\"\n        {...otherProps}\n        as=\"table\"\n        display=\"table\"\n        ref={forwardedRef}\n        className={cx(\n          styles.root,\n          {\n            [styles.inline]: layout === 'inline',\n          },\n          className,\n        )}\n        testId={testId}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nTable.displayName = 'Table';\n","import React, { forwardRef, type ReactElement } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nexport type TableBodyInternalProps = CommonProps & {\n  children: ReactElement | ReactElement[];\n};\n\nexport type TableBodyProps = PropsWithHTMLElement<\n  TableBodyInternalProps,\n  'tbody'\n>;\n\nfunction _TableBody(\n  { className, children, testId = 'cf-ui-table-body', ...otherProps },\n  forwardedRef,\n) {\n  return (\n    <Box\n      {...otherProps}\n      as=\"tbody\"\n      className={className}\n      ref={forwardedRef}\n      testId={testId}\n    >\n      {children}\n    </Box>\n  );\n}\n\n_TableBody.displayName = 'TableBody';\n\nexport const TableBody = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableBodyProps>\n>(_TableBody);\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { TableCellContext } from './tableCellContext';\n\nexport const sortingDirections = {\n  asc: 'asc',\n  desc: 'desc',\n};\n\nexport type TableCellSorting = keyof typeof sortingDirections | boolean;\n\nexport type TableCellInternalProps = CommonProps & {\n  align?: 'center' | 'left' | 'right';\n  sorting?: TableCellSorting;\n  width?: string | number;\n  children?: React.ReactNode;\n};\n\nexport type TableCellProps = PropsWithHTMLElement<\n  TableCellInternalProps,\n  'th' | 'td'\n>;\n\nexport const TableCell = forwardRef<\n  HTMLTableCellElement,\n  ExpandProps<TableCellProps>\n>(\n  (\n    {\n      align = 'left',\n      children,\n      className,\n      sorting = false as TableCellSorting,\n      testId = 'cf-ui-table-cell',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TableCellContext.Consumer>\n        {({ as, name: context, offsetTop }) => {\n          const isTableHead = context === 'head';\n\n          return (\n            <Box\n              {...otherProps}\n              as={as}\n              className={cx(\n                css({\n                  backgroundColor: isTableHead ? tokens.gray100 : undefined,\n                  borderBottom: `1px solid ${tokens.gray200}`,\n                  color: sorting ? tokens.gray900 : tokens.gray700,\n                  fontFamily: tokens.fontStackPrimary,\n                  fontSize: tokens.fontSizeM,\n                  fontWeight: isTableHead\n                    ? tokens.fontWeightMedium\n                    : tokens.fontWeightNormal,\n                  lineHeight: tokens.lineHeightL,\n                  padding: `${tokens.spacingS} ${tokens.spacingM}`,\n                  textAlign: align,\n                  verticalAlign: 'top',\n                }),\n                className,\n              )}\n              ref={forwardedRef}\n              style={{\n                ...otherProps.style,\n                top: offsetTop || undefined,\n              }}\n              testId={testId}\n            >\n              {children}\n            </Box>\n          );\n        }}\n      </TableCellContext.Consumer>\n    );\n  },\n);\n\nTableCell.displayName = 'TableCell';\n","import { createContext } from 'react';\n\nexport type TableCellContextOption = {\n  name: 'body' | 'head';\n  as: 'td' | 'th';\n  offsetTop: number | string;\n};\n\nexport const contextOptions: {\n  body: TableCellContextOption;\n  head: TableCellContextOption;\n} = {\n  body: { name: 'body', as: 'td', offsetTop: 0 },\n  head: { name: 'head', as: 'th', offsetTop: 0 },\n};\n\nexport const TableCellContext = createContext(contextOptions.body);\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport tokens from '@contentful/f36-tokens';\n\nimport { TableCellContext, contextOptions } from './';\n\nexport type TableHeadInternalProps = CommonProps & {\n  isSticky?: boolean;\n  offsetTop?: number | string;\n  children: React.ReactNode;\n};\n\nexport type TableHeadProps = PropsWithHTMLElement<\n  TableHeadInternalProps,\n  'thead'\n>;\n\nexport const TableHead = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableHeadProps>\n>(\n  (\n    {\n      children,\n      className,\n      isSticky = false,\n      offsetTop,\n      testId = 'cf-ui-table-head',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const classNames = cx(\n      // For some reason Parcel doesn't build properly if we extract this to\n      // a variable 🤷\n      isSticky\n        ? css({\n            th: {\n              position: 'sticky',\n              top: 0,\n              zIndex: tokens.zIndexDefault,\n            },\n          })\n        : '',\n      className,\n    );\n\n    return (\n      <TableCellContext.Provider\n        value={{ ...contextOptions.head, offsetTop: offsetTop || 0 }}\n      >\n        <Box\n          {...otherProps}\n          as=\"thead\"\n          className={classNames}\n          ref={forwardedRef}\n          testId={testId}\n        >\n          {children}\n        </Box>\n      </TableCellContext.Provider>\n    );\n  },\n);\n\nTableHead.displayName = 'TableHead';\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nconst getStyles = () => {\n  return {\n    root: css({\n      '&:last-child td': {\n        borderBottom: 'none',\n      },\n      '&:hover td': {\n        backgroundColor: tokens.gray100,\n      },\n    }),\n    selected: css({\n      'td, th': {\n        backgroundColor: tokens.blue100,\n      },\n      'td:last-child': {\n        boxShadow: `inset -2px 0 0 ${tokens.blue500}`,\n      },\n    }),\n  };\n};\n\nexport type TableRowInternalProps = CommonProps & {\n  isSelected?: boolean;\n  children: React.ReactNode;\n};\n\nexport type TableRowProps = PropsWithHTMLElement<TableRowInternalProps, 'tr'>;\n\nexport const TableRow = forwardRef<\n  HTMLTableRowElement,\n  ExpandProps<TableRowProps>\n>(\n  (\n    {\n      className,\n      children,\n      isSelected = false,\n      testId = 'cf-ui-table-row',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getStyles();\n    return (\n      <Box\n        {...otherProps}\n        as=\"tr\"\n        className={cx(\n          styles.root,\n          {\n            [styles.selected]: isSelected,\n          },\n          className,\n        )}\n        ref={forwardedRef}\n        testId={testId}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nTableRow.displayName = 'TableRow';\n","import { Table as OriginalTable } from './Table';\nimport { TableBody } from './TableBody';\nimport { TableCell } from './TableCell';\nimport { TableHead } from './TableHead';\nimport { TableRow } from './TableRow';\n\ntype CompoundTable = typeof OriginalTable & {\n  Row: typeof TableRow;\n  Head: typeof TableHead;\n  Cell: typeof TableCell;\n  Body: typeof TableBody;\n};\n\nexport const Table = OriginalTable as CompoundTable;\nTable.Row = TableRow;\nTable.Head = TableHead;\nTable.Cell = TableCell;\nTable.Body = TableBody;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}