{"ast":null,"code":"import z, { createContext, forwardRef, useRef, useEffect, useCallback, useState, useContext } from 'react';\nimport { Text } from '@contentful/f36-typography';\nimport { Flex, useId, Stack, Box } from '@contentful/f36-core';\nimport { ErrorCircleOutlineIcon, ChevronDownIcon, DoneIcon, CloseIcon, MinusIcon } from '@contentful/f36-icons';\nimport { cx, css } from 'emotion';\nimport s from '@contentful/f36-tokens';\nvar Co = Object.defineProperty,\n  Po = Object.defineProperties;\nvar ko = Object.getOwnPropertyDescriptors;\nvar J = Object.getOwnPropertySymbols;\nvar ke = Object.prototype.hasOwnProperty,\n  Ie = Object.prototype.propertyIsEnumerable;\nvar Pe = (e, o, t) => o in e ? Co(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  i = (e, o) => {\n    for (var t in o || (o = {})) ke.call(o, t) && Pe(e, t, o[t]);\n    if (J) for (var t of J(o)) Ie.call(o, t) && Pe(e, t, o[t]);\n    return e;\n  },\n  m = (e, o) => Po(e, ko(o));\nvar l = (e, o) => {\n  var t = {};\n  for (var r in e) ke.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && J) for (var r of J(e)) o.indexOf(r) < 0 && Ie.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar Te = () => {},\n  ae = createContext(void 0),\n  Eo = () => useContext(ae),\n  P = e => {\n    var t, r, p, n, a;\n    let o = Eo();\n    return o ? {\n      isDisabled: (t = e.isDisabled) != null ? t : o.isDisabled,\n      isInvalid: (r = e.isInvalid) != null ? r : o.isInvalid,\n      isReadOnly: (p = e.isReadOnly) != null ? p : o.isReadOnly,\n      isRequired: (n = e.isRequired) != null ? n : o.isRequired,\n      id: (a = e.id) != null ? a : o.id,\n      maxLength: o.maxLength,\n      inputValue: o.inputValue,\n      setMaxLength: o.setMaxLength || Te,\n      setInputValue: o.setInputValue || Te\n    } : e;\n  };\nvar N = z.forwardRef((r, t) => {\n  var p = r,\n    {\n      testId: e = \"cf-ui-help-text\"\n    } = p,\n    o = l(p, [\"testId\"]);\n  let {\n    id: n\n  } = P({});\n  return z.createElement(Text, m(i({\n    as: \"p\",\n    fontColor: \"gray500\",\n    fontSize: \"fontSizeM\",\n    testId: e,\n    id: `${n}-helptext`,\n    marginTop: \"spacingXs\"\n  }, o), {\n    ref: t\n  }));\n});\nN.displayName = \"HelpText\";\nvar W = forwardRef((p, r) => {\n  var n = p,\n    {\n      children: e,\n      testId: o = \"cf-ui-validation-message\"\n    } = n,\n    t = l(n, [\"children\", \"testId\"]);\n  let {\n    id: a\n  } = P({});\n  return z.createElement(Flex, m(i({\n    marginTop: \"spacingXs\"\n  }, t), {\n    ref: r,\n    testId: o,\n    alignItems: \"center\",\n    id: a ? `${a}-validation` : void 0,\n    \"aria-live\": \"assertive\"\n  }), z.createElement(Flex, {\n    marginRight: \"spacing2Xs\"\n  }, z.createElement(ErrorCircleOutlineIcon, {\n    size: \"small\",\n    variant: \"negative\",\n    \"aria-hidden\": \"true\"\n  })), z.createElement(Text, {\n    as: \"p\",\n    fontColor: \"colorNegative\"\n  }, e));\n});\nW.displayName = \"ValidationMessage\";\nvar ce = _ref => {\n    let {\n      isDisabled: e\n    } = _ref;\n    return {\n      alignItems: \"center\",\n      background: e ? s.gray300 : s.colorWhite,\n      border: `2px solid ${s.gray300}`,\n      boxSizing: \"border-box\",\n      display: \"inline-flex\",\n      height: s.spacingM,\n      justifyContent: \"center\",\n      marginRight: s.spacingXs,\n      width: s.spacingM\n    };\n  },\n  Lo = _ref2 => {\n    let {\n      isDisabled: e\n    } = _ref2;\n    let o = m(i({}, ce({\n      isDisabled: e\n    })), {\n      backgroundColor: e ? s.gray300 : s.colorWhite,\n      borderRadius: s.borderRadiusSmall,\n      \"& svg\": {\n        fill: e ? s.gray300 : s.colorWhite\n      },\n      \"input:indeterminate + &, input:checked + &\": {\n        backgroundColor: e ? s.gray300 : s.blue600,\n        borderColor: e ? s.gray300 : s.blue600,\n        \"& svg\": {\n          fill: e ? s.gray600 : s.colorWhite\n        }\n      }\n    });\n    return css(o);\n  },\n  Bo = _ref3 => {\n    let {\n      isDisabled: e\n    } = _ref3;\n    let o = {\n        content: '\"\"',\n        borderRadius: \"50%\",\n        backgroundColor: e ? s.gray300 : s.colorWhite,\n        width: s.borderRadiusMedium,\n        height: s.borderRadiusMedium\n      },\n      t = m(i({}, ce({\n        isDisabled: e\n      })), {\n        backgroundColor: e ? s.gray300 : s.colorWhite,\n        borderRadius: \"50%\",\n        \"&:before\": i({}, o),\n        \"input:checked + &\": {\n          backgroundColor: e ? s.gray300 : s.blue600,\n          borderColor: e ? s.gray300 : s.blue600,\n          \"&:before\": {\n            backgroundColor: e ? s.gray600 : s.colorWhite\n          }\n        }\n      });\n    return css(t);\n  },\n  vo = _ref4 => {\n    let {\n      isDisabled: e,\n      size: o\n    } = _ref4;\n    let t = o === \"small\" ? {\n        height: s.spacingM,\n        width: s.spacingXl,\n        \"&:before\": {\n          height: s.spacingS,\n          width: s.spacingS\n        },\n        \"input:checked + &:before\": {\n          transform: `translateX(${s.spacingM})`\n        }\n      } : {\n        height: \"20px\",\n        width: \"40px\",\n        \"&:before\": {\n          height: s.spacingM,\n          width: s.spacingM\n        },\n        \"input:checked + &:before\": {\n          transform: \"translateX(20px)\"\n        }\n      },\n      r = m(i({}, ce({\n        isDisabled: e\n      })), {\n        background: s.gray600,\n        borderColor: s.gray600,\n        borderRadius: s.borderRadiusSmall,\n        justifyContent: \"space-around\",\n        position: \"relative\",\n        flexShrink: 0,\n        \"&:before\": {\n          background: s.colorWhite,\n          borderRadius: `calc(${s.borderRadiusSmall}/2)`,\n          content: '\"\"',\n          left: 0,\n          position: \"absolute\",\n          transition: `transform ${s.transitionEasingDefault} ${s.transitionDurationDefault}`\n        },\n        \"input:checked + &\": {\n          background: s.blue600,\n          borderColor: s.blue600\n        }\n      }),\n      p = {\n        \"&, input:checked + &\": {\n          background: s.gray200,\n          borderColor: s.gray200\n        },\n        \"&:before\": {\n          background: s.gray400\n        },\n        \"& svg\": {\n          fill: s.gray400\n        }\n      };\n    return css([r, t, e && p]);\n  },\n  wo = e => {\n    let {\n      isDisabled: o,\n      size: t\n    } = e;\n    return {\n      radio: Bo({\n        isDisabled: o\n      }),\n      checkbox: Lo({\n        isDisabled: o\n      }),\n      switch: vo({\n        isDisabled: o,\n        size: t\n      })\n    };\n  },\n  Se = wo;\nvar Me = e => {\n  let {\n      type: o,\n      isIndeterminate: t,\n      isDisabled: r,\n      size: p = \"medium\"\n    } = e,\n    n = Se({\n      isDisabled: r,\n      size: p\n    });\n  return o === \"switch\" ? z.createElement(\"span\", {\n    className: n.switch\n  }, z.createElement(DoneIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  }), z.createElement(CloseIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  })) : z.createElement(\"span\", {\n    className: n[o]\n  }, o === \"checkbox\" && (t ? z.createElement(MinusIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  }) : z.createElement(DoneIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  })));\n};\nvar Le = e => e === \"small\" ? {\n    height: s.spacingM,\n    width: s.spacingXl\n  } : {\n    height: \"20px\",\n    width: \"40px\"\n  },\n  Oo = _ref5 => {\n    let {\n      size: e,\n      type: o\n    } = _ref5;\n    let t = s.spacingM;\n    return o === \"switch\" && (t = Le(e).width), {\n      marginLeft: `calc(${t} + ${s.spacingXs})`,\n      marginTop: 0\n    };\n  },\n  No = _ref6 => {\n    let {\n      isDisabled: e,\n      type: o,\n      size: t\n    } = _ref6;\n    return {\n      wrapper: css({\n        alignItems: \"center\",\n        display: \"inline-flex\",\n        position: \"relative\",\n        margin: \"0\"\n      }),\n      input: css([{\n        cursor: e ? \"not-allowed\" : \"pointer\",\n        height: s.spacingM,\n        margin: 0,\n        opacity: 0,\n        position: \"absolute\",\n        width: s.spacingM,\n        zIndex: s.zIndexDefault,\n        \"&:focus\": {\n          outline: \"none\",\n          \"& + span\": {\n            boxShadow: s.glowPrimary\n          }\n        },\n        \"&:focus:not(:focus-visible) + span\": {\n          boxShadow: \"unset\"\n        },\n        \"&:focus-visible + span\": {\n          boxShadow: s.glowPrimary\n        }\n      }, o === \"switch\" && Le(t)]),\n      helpText: css(Oo({\n        size: t,\n        type: o\n      }))\n    };\n  },\n  Be = No;\nfunction ve(e, o) {\n  let be = e,\n    {\n      isChecked: t = void 0,\n      onChange: r,\n      onFocus: p,\n      onBlur: n,\n      onKeyDown: a,\n      type: c = \"checkbox\",\n      value: u,\n      isDisabled: d,\n      isIndeterminate: h,\n      isInvalid: g,\n      isRequired: y = !1,\n      id: b,\n      willBlurOnEsc: E = !0,\n      testId: T = \"cf-ui-base-checkbox\",\n      className: f = \"\",\n      defaultChecked: I = void 0,\n      name: B,\n      inputProps: k = {},\n      children: v,\n      \"aria-label\": w,\n      size: L = \"medium\",\n      helpText: S\n    } = be,\n    R = l(be, [\"isChecked\", \"onChange\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"type\", \"value\", \"isDisabled\", \"isIndeterminate\", \"isInvalid\", \"isRequired\", \"id\", \"willBlurOnEsc\", \"testId\", \"className\", \"defaultChecked\", \"name\", \"inputProps\", \"children\", \"aria-label\", \"size\", \"helpText\"]),\n    G = useRef(null),\n    F = o || G,\n    {\n      id: pe\n    } = P({});\n  useEffect(() => {\n    F.current && (F.current.indeterminate = h);\n  }, [h, F]);\n  let D = Be({\n      isDisabled: d,\n      type: c,\n      size: L\n    }),\n    ie = useCallback(H => {\n      H.persist(), p && p(H);\n    }, [p]),\n    se = useCallback(H => {\n      H.persist(), n && n(H);\n    }, [n]),\n    K = useCallback(H => {\n      var Ce;\n      H.persist(), E && H.key === \"Escape\" && ((Ce = F == null ? void 0 : F.current) == null || Ce.blur()), a && a(H);\n    }, [E, a, F]),\n    Z = typeof t !== void 0 ? t : I,\n    M = b ? `${b}-helptext` : void 0,\n    bo = g ? `${pe}-validation` : S ? M : void 0;\n  return z.createElement(Flex, {\n    alignItems: \"flex-start\",\n    flexDirection: \"column\",\n    className: f\n  }, z.createElement(Text, i({\n    as: \"label\",\n    fontColor: \"gray900\",\n    fontWeight: \"fontWeightMedium\",\n    className: D.wrapper,\n    htmlFor: b,\n    testId: T\n  }, R), z.createElement(\"input\", m(i({}, k), {\n    \"aria-label\": w,\n    checked: t,\n    defaultChecked: I,\n    className: D.input,\n    type: c === \"switch\" ? \"checkbox\" : c,\n    onChange: r,\n    onFocus: ie,\n    onBlur: se,\n    onKeyDown: K,\n    value: u,\n    disabled: d,\n    role: c,\n    \"aria-checked\": h ? \"mixed\" : Z,\n    ref: F,\n    required: y,\n    \"aria-required\": y ? \"true\" : void 0,\n    \"aria-invalid\": g ? \"true\" : void 0,\n    \"aria-describedby\": bo,\n    id: b,\n    name: B\n  })), z.createElement(Me, {\n    type: c,\n    isDisabled: d,\n    isIndeterminate: h,\n    size: L\n  }), v), S && z.createElement(N, {\n    id: M,\n    className: D.helpText\n  }, S));\n}\nve.displayName = \"BaseCheckbox\";\nvar _ = z.forwardRef(ve);\nvar ue = createContext(void 0),\n  $o = () => useContext(ue),\n  Y = e => {\n    var a, c, u;\n    let o = $o();\n    if (!o) return e;\n    let t, r;\n    return o.type === \"checkbox\" && (t = o.value === void 0 || (a = o.value) == null ? void 0 : a.includes(e.value), r = t !== void 0 || (c = o.defaultValue) == null ? void 0 : c.includes(e.value)), o.type === \"radio\" && (t = o.value === void 0 ? void 0 : o.value === e.value, r = t !== void 0 ? void 0 : o.defaultValue === e.value), {\n      defaultChecked: r,\n      isChecked: t,\n      onBlur: d => {\n        e.onBlur && e.onBlur(d), o.onBlur && o.onBlur(d);\n      },\n      onChange: d => {\n        e.onChange && e.onChange(d), o.onChange && o.onChange(d);\n      },\n      name: (u = o.name) != null ? u : e.name,\n      value: e.value\n    };\n  };\nvar Xo = (e, o) => {\n    let S = e,\n      {\n        testId: t = \"cf-ui-checkbox\",\n        id: r,\n        isDisabled: p,\n        isRequired: n,\n        isInvalid: a,\n        children: c,\n        onBlur: u,\n        onChange: d,\n        defaultChecked: h,\n        isChecked: g,\n        value: y,\n        name: b\n      } = S,\n      E = l(S, [\"testId\", \"id\", \"isDisabled\", \"isRequired\", \"isInvalid\", \"children\", \"onBlur\", \"onChange\", \"defaultChecked\", \"isChecked\", \"value\", \"name\"]),\n      T = useId(r, \"checkbox\"),\n      f = Y({\n        onBlur: u,\n        onChange: d,\n        value: y,\n        defaultChecked: h,\n        isChecked: g,\n        name: b\n      }),\n      R = P({\n        id: T,\n        isDisabled: p,\n        isInvalid: a,\n        isRequired: n\n      }),\n      L = l(R, [\"inputValue\", \"setInputValue\", \"maxLength\", \"setMaxLength\", \"isReadOnly\"]);\n    return z.createElement(_, m(i(i(i({}, L), f), E), {\n      type: \"checkbox\",\n      testId: t,\n      ref: o\n    }), c);\n  },\n  Ge = z.forwardRef(Xo);\nvar jo = (e, o) => {\n    let a = e,\n      {\n        children: t,\n        className: r,\n        testId: p = \"cf-ui-base-checkbox-group\"\n      } = a,\n      n = l(a, [\"children\", \"className\", \"testId\"]);\n    return z.createElement(ue.Provider, {\n      value: n\n    }, z.createElement(Stack, {\n      ref: o,\n      testId: p,\n      className: r,\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      spacing: \"spacingXs\"\n    }, t));\n  },\n  ee = z.forwardRef(jo);\nvar Ko = (e, o) => {\n    let n = e,\n      {\n        children: t,\n        testId: r = \"cf-ui-checkbox-group\"\n      } = n,\n      p = l(n, [\"children\", \"testId\"]);\n    return z.createElement(ee, i({\n      ref: o,\n      testId: r,\n      type: \"checkbox\"\n    }, p), t);\n  },\n  Oe = z.forwardRef(Ko);\nvar Ne = Ge;\nNe.Group = Oe;\nvar Qo = \"div\";\nfunction ze(g, h) {\n  var y = g,\n    {\n      as: e,\n      isInvalid: o,\n      isRequired: t,\n      isDisabled: r,\n      isReadOnly: p,\n      children: n,\n      marginBottom: a = \"spacingL\",\n      id: c,\n      testId: u = \"cf-ui-form-control\"\n    } = y,\n    d = l(y, [\"as\", \"isInvalid\", \"isRequired\", \"isDisabled\", \"isReadOnly\", \"children\", \"marginBottom\", \"id\", \"testId\"]);\n  let b = useId(c, \"field-\"),\n    [E, T] = useState(\"\"),\n    [f, I] = useState(0),\n    B = e === \"fieldset\" ? void 0 : \"group\",\n    k = e || Qo,\n    v = {\n      id: b,\n      isRequired: t,\n      isDisabled: r,\n      isInvalid: o,\n      isReadOnly: p,\n      inputValue: E,\n      setInputValue: T,\n      maxLength: f,\n      setMaxLength: I\n    };\n  return z.createElement(ae.Provider, {\n    value: v\n  }, z.createElement(Box, i({\n    as: k,\n    ref: h,\n    role: B,\n    testId: u,\n    marginBottom: a\n  }, d), n));\n}\nze.displayName = \"FormControl\";\nvar Ve = z.forwardRef(ze);\nfunction De() {\n  return {\n    root: css({\n      display: \"inline-block\",\n      fontWeight: s.fontWeightMedium\n    }),\n    indicator: css({\n      color: s.gray500,\n      fontWeight: s.fontWeightNormal,\n      marginLeft: s.spacing2Xs\n    })\n  };\n}\nvar tt = \"label\";\nfunction $e(u, c) {\n  var d = u,\n    {\n      as: e,\n      children: o,\n      className: t,\n      isRequired: r,\n      requiredText: p = \"required\",\n      testId: n = \"cf-ui-form-label\"\n    } = d,\n    a = l(d, [\"as\", \"children\", \"className\", \"isRequired\", \"requiredText\", \"testId\"]);\n  let h = De(),\n    g = P({\n      isRequired: r\n    }),\n    y = g.id ? g.id + \"-label\" : void 0,\n    b = e !== \"legend\" ? {\n      htmlFor: a.htmlFor || g.id\n    } : {};\n  return z.createElement(Text, m(i(m(i({\n    as: e || tt,\n    marginBottom: \"spacingXs\"\n  }, a), {\n    fontColor: \"gray900\",\n    id: y\n  }), b), {\n    className: cx(h.root, t),\n    ref: c,\n    testId: n\n  }), o, g.isRequired && z.createElement(\"span\", {\n    className: h.indicator\n  }, \"(\", p, \")\"));\n}\n$e.displayName = \"FormLabel\";\nvar te = forwardRef($e);\nfunction qe() {\n  return {\n    root: css({\n      flexShrink: 0,\n      paddingLeft: s.spacingM,\n      textAlign: \"right\"\n    })\n  };\n}\nvar $ = forwardRef((p, r) => {\n  var n = p,\n    {\n      testId: e = \"cf-ui-counter\",\n      className: o\n    } = n,\n    t = l(n, [\"testId\", \"className\"]);\n  let {\n      maxLength: a,\n      inputValue: c\n    } = P({}),\n    u = qe();\n  return Boolean(a) && z.createElement(Text, m(i({\n    as: \"p\",\n    fontColor: \"gray700\",\n    fontSize: \"fontSizeM\",\n    testId: e,\n    marginTop: \"spacingXs\"\n  }, t), {\n    className: cx(u.root, o),\n    ref: r\n  }), c.length, \" / \", a);\n});\n$.displayName = \"Counter\";\nvar q = Ve;\nq.Label = te;\nq.ValidationMessage = W;\nq.HelpText = N;\nq.Counter = $;\nvar ct = (e, o) => {\n    let S = e,\n      {\n        testId: t = \"cf-ui-radio-button\",\n        id: r,\n        isDisabled: p,\n        isInvalid: n,\n        isRequired: a,\n        children: c,\n        onBlur: u,\n        onChange: d,\n        defaultChecked: h,\n        isChecked: g,\n        value: y,\n        name: b\n      } = S,\n      E = l(S, [\"testId\", \"id\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"children\", \"onBlur\", \"onChange\", \"defaultChecked\", \"isChecked\", \"value\", \"name\"]),\n      T = useId(r, \"radio\"),\n      f = Y({\n        onBlur: u,\n        onChange: d,\n        value: y,\n        defaultChecked: h,\n        isChecked: g,\n        name: b\n      }),\n      R = P({\n        id: T,\n        isDisabled: p,\n        isInvalid: n,\n        isRequired: a\n      }),\n      L = l(R, [\"inputValue\", \"setInputValue\", \"maxLength\", \"setMaxLength\", \"isReadOnly\"]);\n    return z.createElement(_, m(i(i(i({}, L), E), f), {\n      type: \"radio\",\n      testId: t,\n      ref: o\n    }), c);\n  },\n  Ue = z.forwardRef(ct);\nvar mt = (e, o) => {\n    let n = e,\n      {\n        children: t,\n        testId: r = \"cf-ui-radio-group\"\n      } = n,\n      p = l(n, [\"children\", \"testId\"]);\n    return z.createElement(ee, i({\n      ref: o,\n      testId: r,\n      type: \"radio\"\n    }, p), t);\n  },\n  Ke = z.forwardRef(mt);\nvar Ze = Ue;\nZe.Group = Ke;\nvar dt = _ref7 => {\n    let {\n      size: e\n    } = _ref7;\n    return e === \"small\" ? {\n      padding: `${s.spacing2Xs} ${s.spacingXs}`,\n      height: \"32px\",\n      maxHeight: \"32px\"\n    } : {\n      height: \"40px\",\n      maxHeight: \"40px\"\n    };\n  },\n  Je = _ref8 => {\n    let {\n      isDisabled: e,\n      isInvalid: o,\n      zIndexBase: t = s.zIndexDefault\n    } = _ref8;\n    return e || o ? t + 1 : t;\n  },\n  ut = _ref9 => {\n    let {\n      as: e,\n      isDisabled: o,\n      isInvalid: t,\n      size: r,\n      resize: p\n    } = _ref9;\n    return {\n      rootComponentWithIcon: css({\n        position: \"relative\",\n        display: \"flex\",\n        width: \"100%\",\n        zIndex: Je({\n          isDisabled: o,\n          isInvalid: t\n        })\n      }),\n      input: css(m(i({\n        outline: \"none\",\n        boxShadow: s.insetBoxShadowDefault,\n        boxSizing: \"border-box\",\n        backgroundColor: o ? s.gray100 : s.colorWhite,\n        border: `1px solid ${t ? s.red600 : s.gray300}`,\n        borderRadius: s.borderRadiusMedium,\n        color: s.gray700,\n        fontFamily: s.fontStackPrimary,\n        fontSize: s.fontSizeM,\n        lineHeight: s.lineHeightM,\n        padding: `10px ${s.spacingS}`,\n        margin: 0,\n        cursor: o ? \"not-allowed\" : \"auto\",\n        width: \"100%\",\n        zIndex: Je({\n          isDisabled: o,\n          isInvalid: t\n        })\n      }, e === \"textarea\" ? {\n        resize: p\n      } : dt({\n        size: r\n      })), {\n        \"&::placeholder\": {\n          color: s.gray500\n        },\n        \"&:active, &:active:hover\": {\n          borderColor: t ? s.red600 : o ? s.gray300 : s.blue600,\n          boxShadow: t ? s.glowNegative : o ? \"none\" : s.glowPrimary\n        },\n        \"&:focus\": {\n          borderColor: t ? s.red600 : o ? s.gray300 : s.blue600,\n          boxShadow: t ? s.glowNegative : o ? \"none\" : s.glowPrimary\n        }\n      })),\n      inputWithIcon: css({\n        paddingLeft: r === \"small\" ? s.spacingXl : \"38px\"\n      }),\n      iconPlaceholder: css({\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        top: 0,\n        bottom: 0,\n        left: r === \"small\" ? s.spacingXs : s.spacingS,\n        display: \"flex\",\n        alignItems: \"center\",\n        zIndex: s.zIndexDefault\n      })\n    };\n  },\n  Qe = ut;\nvar xt = \"input\";\nfunction eo(e, o) {\n  let Z = e,\n    {\n      as: t = xt,\n      className: r,\n      isDisabled: p,\n      isReadOnly: n,\n      isRequired: a,\n      isInvalid: c,\n      id: u,\n      name: d,\n      onBlur: h,\n      onChange: g,\n      onFocus: y,\n      onKeyDown: b,\n      testId: E = \"cf-ui-base-input\",\n      type: T = \"text\",\n      value: f = void 0,\n      placeholder: I,\n      willBlurOnEsc: B = !0,\n      style: k,\n      icon: v,\n      defaultValue: w,\n      size: L = \"medium\",\n      resize: S = \"vertical\"\n    } = Z,\n    R = l(Z, [\"as\", \"className\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"testId\", \"type\", \"value\", \"placeholder\", \"willBlurOnEsc\", \"style\", \"icon\", \"defaultValue\", \"size\", \"resize\"]),\n    G = Qe({\n      as: t,\n      isDisabled: p,\n      isInvalid: c,\n      size: L,\n      resize: S\n    }),\n    F = useCallback(M => {\n      M.persist(), y && y(M);\n    }, [y]),\n    pe = useCallback(M => {\n      M.persist(), !(p || n) && g && g(M);\n    }, [g, p, n]),\n    D = useCallback(M => {\n      M.persist(), b && b(M), M.nativeEvent.code === \"Escape\" && B && M.currentTarget.blur();\n    }, [B, b]),\n    ie = v && z.createElement(Box, {\n      as: \"span\",\n      className: G.iconPlaceholder\n    }, z.cloneElement(v, {\n      size: L === \"small\" ? \"tiny\" : \"small\",\n      variant: \"muted\",\n      \"aria-hidden\": !0\n    })),\n    se = t,\n    K = M => z.createElement(se, m(i({}, R), {\n      value: f,\n      defaultValue: w,\n      \"data-test-id\": E,\n      style: k,\n      placeholder: I,\n      className: cx(G.input, M, r),\n      name: d,\n      type: T,\n      ref: o,\n      id: u,\n      readOnly: n,\n      \"aria-readonly\": n ? \"true\" : void 0,\n      \"aria-required\": a ? \"true\" : void 0,\n      \"aria-invalid\": c ? \"true\" : void 0,\n      \"aria-describedby\": u ? `${u}-${c ? \"validation\" : \"helptext\"}` : void 0,\n      disabled: p,\n      required: a,\n      onChange: pe,\n      onBlur: h,\n      onKeyDown: D,\n      onFocus: F,\n      size: L\n    }));\n  return v ? z.createElement(Box, {\n    as: \"div\",\n    className: G.rootComponentWithIcon\n  }, K(G.inputWithIcon), ie) : K();\n}\neo.displayName = \"BaseInput\";\nvar U = z.forwardRef(eo);\nvar gt = (T, E) => {\n    var f = T,\n      {\n        className: e,\n        testId: o = \"cf-ui-text-input\",\n        id: t,\n        value: r,\n        defaultValue: p,\n        onChange: n,\n        onFocus: a,\n        isInvalid: c,\n        isDisabled: u,\n        isRequired: d,\n        isReadOnly: h,\n        size: g = \"medium\",\n        maxLength: y\n      } = f,\n      b = l(f, [\"className\", \"testId\", \"id\", \"value\", \"defaultValue\", \"onChange\", \"onFocus\", \"isInvalid\", \"isDisabled\", \"isRequired\", \"isReadOnly\", \"size\", \"maxLength\"]);\n    let G = P({\n        id: t,\n        isInvalid: c,\n        isDisabled: u,\n        isRequired: d,\n        isReadOnly: h\n      }),\n      {\n        setMaxLength: I,\n        maxLength: B,\n        setInputValue: k,\n        inputValue: v\n      } = G,\n      w = l(G, [\"setMaxLength\", \"maxLength\", \"setInputValue\", \"inputValue\"]);\n    useEffect(() => {\n      var F;\n      y !== void 0 && typeof I == \"function\" && (I(y), k((F = r != null ? r : p) != null ? F : \"\"));\n    }, [y, I, k, p, r]);\n    let L = F => {\n        typeof k == \"function\" && k(F.target.value), n == null || n(F);\n      },\n      S = useRef(null),\n      R = E || S;\n    return z.createElement(U, m(i(i({\n      type: \"text\"\n    }, b), w), {\n      testId: o,\n      ref: R,\n      onChange: y ? L : n,\n      onFocus: a,\n      as: \"input\",\n      className: e,\n      value: r,\n      defaultValue: p,\n      size: g,\n      maxLength: y\n    }));\n  },\n  to = z.forwardRef(gt);\nvar Ct = _ref10 => {\n    let {\n      spacing: e\n    } = _ref10;\n    if (e === \"none\") return css({\n      position: \"relative\",\n      \"& button, & input\": {\n        borderRadius: \"0 !important\"\n      },\n      \"& > *\": {\n        marginRight: \"-1px !important\",\n        \"&:not(:focus), & button:not(:focus)\": {\n          boxShadow: \"none !important\"\n        },\n        \"&:first-child, &:first-child > input, &:first-child button\": {\n          borderBottomLeftRadius: `${s.borderRadiusMedium} !important`,\n          borderTopLeftRadius: `${s.borderRadiusMedium} !important`\n        },\n        \"&:last-child, &:last-child > input, &:last-child button\": {\n          borderBottomRightRadius: `${s.borderRadiusMedium} !important`,\n          borderTopRightRadius: `${s.borderRadiusMedium} !important`,\n          marginRight: \"0 !important\"\n        },\n        \"&:focus, &:focus-within\": {\n          zIndex: s.zIndexDefault + 1\n        }\n      }\n    });\n  },\n  ro = _ref11 => {\n    let {\n      spacing: e\n    } = _ref11;\n    return {\n      inputGroup: Ct({\n        spacing: e\n      })\n    };\n  };\nvar It = (e, o) => {\n    let c = e,\n      {\n        children: t,\n        className: r,\n        spacing: p = \"none\"\n      } = c,\n      n = l(c, [\"children\", \"className\", \"spacing\"]),\n      a = ro({\n        spacing: p\n      });\n    return z.createElement(Stack, m(i({}, n), {\n      spacing: p,\n      ref: o,\n      fullWidth: !0,\n      className: cx(a.inputGroup, r)\n    }), t);\n  },\n  po = z.forwardRef(It);\nvar io = to;\nio.Group = po;\nvar Tt = (e, o) => {\n    let T = e,\n      {\n        testId: t = \"cf-ui-switch\",\n        id: r,\n        isDisabled: p,\n        isInvalid: n,\n        isRequired: a,\n        children: c\n      } = T,\n      u = l(T, [\"testId\", \"id\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"children\"]),\n      f = P({\n        id: r,\n        isDisabled: p,\n        isInvalid: n,\n        isRequired: a\n      }),\n      E = l(f, [\"inputValue\", \"setInputValue\", \"maxLength\", \"setMaxLength\", \"isReadOnly\"]);\n    return z.createElement(_, m(i(i({}, E), u), {\n      testId: t,\n      type: \"switch\",\n      ref: o\n    }), c);\n  },\n  ao = z.forwardRef(Tt);\nvar co = () => ({\n  error: css({\n    \"&:focus\": {\n      borderColor: s.colorNegative,\n      boxShadow: s.glowNegative\n    }\n  }),\n  disabled: css({\n    \"&:focus\": {\n      borderColor: s.gray300,\n      boxShadow: \"none\"\n    }\n  })\n});\nvar St = (E, b) => {\n    var T = E,\n      {\n        className: e,\n        isDisabled: o,\n        isInvalid: t,\n        isRequired: r,\n        isReadOnly: p,\n        onChange: n,\n        testId: a = \"cf-ui-textarea\",\n        id: c,\n        resize: u = \"vertical\",\n        maxLength: d,\n        value: h,\n        defaultValue: g\n      } = T,\n      y = l(T, [\"className\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"isReadOnly\", \"onChange\", \"testId\", \"id\", \"resize\", \"maxLength\", \"value\", \"defaultValue\"]);\n    let f = co(),\n      S = P({\n        id: c,\n        isInvalid: t,\n        isDisabled: o,\n        isRequired: r,\n        isReadOnly: p\n      }),\n      {\n        setMaxLength: I,\n        maxLength: B,\n        setInputValue: k,\n        inputValue: v\n      } = S,\n      w = l(S, [\"setMaxLength\", \"maxLength\", \"setInputValue\", \"inputValue\"]);\n    useEffect(() => {\n      var R;\n      d !== void 0 && typeof I == \"function\" && (I(d), k((R = h != null ? h : g) != null ? R : \"\"));\n    }, [g, d, k, I, h]);\n    let L = R => {\n      typeof k == \"function\" && k(R.target.value), n == null || n(R);\n    };\n    return z.createElement(U, m(i(i({}, y), w), {\n      defaultValue: g,\n      value: h,\n      testId: a,\n      as: \"textarea\",\n      ref: b,\n      className: cx(e, {\n        [f.disabled]: o,\n        [f.error]: t\n      }),\n      maxLength: d,\n      resize: u,\n      onChange: d ? L : n\n    }));\n  },\n  uo = z.forwardRef(St);\nvar ge = r => {\n  var p = r,\n    {\n      testId: e = \"cf-ui-select-option\",\n      isDisabled: o\n    } = p,\n    t = l(p, [\"testId\", \"isDisabled\"]);\n  return z.createElement(\"option\", m(i({\n    \"data-test-id\": e\n  }, t), {\n    disabled: o\n  }));\n};\nfunction fo(_ref12) {\n  let {\n    isInvalid: e,\n    isDisabled: o,\n    size: t\n  } = _ref12;\n  let r = t === \"small\" ? {\n      padding: `${s.spacing2Xs} ${s.spacingXs}`,\n      height: \"32px\"\n    } : {\n      padding: `10px ${s.spacingL} 10px ${s.spacingS}`,\n      height: \"40px\"\n    },\n    p = css({\n      width: \"100%\",\n      display: \"block\",\n      appearance: \"none\",\n      backgroundColor: s.colorWhite,\n      color: s.gray700,\n      fontSize: s.fontSizeM,\n      lineHeight: s.lineHeightM,\n      fontFamily: s.fontStackPrimary,\n      borderRadius: s.borderRadiusMedium,\n      boxShadow: s.insetBoxShadowDefault,\n      outline: \"none\",\n      border: `1px solid ${s.gray300}`,\n      cursor: \"pointer\",\n      \"&::placeholder\": {\n        color: s.gray500\n      },\n      \"&:focus\": {\n        outline: \"none\",\n        boxShadow: s.glowPrimary,\n        borderColor: s.colorPrimary\n      },\n      \"&:-moz-focusring\": {\n        color: \"transparent\",\n        textShadow: \"0 0 0 #000\"\n      },\n      \"&::-ms-expand\": {\n        display: \"none\"\n      }\n    }),\n    n = css({\n      backgroundColor: s.gray100,\n      cursor: \"not-allowed\",\n      color: s.gray600,\n      \"&:focus, &:active\": {\n        borderColor: s.gray300\n      }\n    }),\n    a = css({\n      borderColor: o ? s.red300 : s.red600,\n      \"&:focus\": {\n        borderColor: s.red600,\n        boxShadow: s.glowNegative\n      }\n    });\n  return {\n    wrapper: css({\n      position: \"relative\",\n      display: \"block\",\n      width: \"auto\"\n    }),\n    select: css([p, r, o && n, e && a]),\n    icon: css({\n      position: \"absolute\",\n      right: s.spacingXs,\n      top: \"50%\",\n      marginTop: \"-8px\",\n      pointerEvents: \"none\"\n    })\n  };\n}\nvar vt = (E, b) => {\n    var T = E,\n      {\n        id: e,\n        children: o,\n        className: t,\n        isInvalid: r,\n        isDisabled: p,\n        isRequired: n,\n        testId: a = \"cf-ui-select\",\n        willBlurOnEsc: c = !0,\n        onKeyDown: u,\n        size: d = \"medium\",\n        value: h = void 0,\n        defaultValue: g = void 0\n      } = T,\n      y = l(T, [\"id\", \"children\", \"className\", \"isInvalid\", \"isDisabled\", \"isRequired\", \"testId\", \"willBlurOnEsc\", \"onKeyDown\", \"size\", \"value\", \"defaultValue\"]);\n    let f = P({\n        isDisabled: p,\n        isInvalid: r,\n        isRequired: n,\n        id: e\n      }),\n      I = fo({\n        isDisabled: f.isDisabled,\n        isInvalid: f.isInvalid,\n        size: d\n      }),\n      B = useCallback(k => {\n        k.nativeEvent.code === \"Escape\" && c && k.currentTarget.blur(), u && u(k);\n      }, [u, c]);\n    return z.createElement(\"div\", {\n      className: cx(I.wrapper, t)\n    }, z.createElement(\"select\", m(i({}, y), {\n      id: f.id,\n      \"data-test-id\": a,\n      className: I.select,\n      onKeyDown: B,\n      required: f.isRequired,\n      \"aria-required\": f.isRequired ? \"true\" : void 0,\n      \"aria-invalid\": f.isInvalid ? !0 : void 0,\n      \"aria-describedby\": f.id ? `${f.id}-${f.isInvalid ? \"validation\" : \"helptext\"}` : void 0,\n      disabled: f.isDisabled,\n      defaultValue: g,\n      value: h,\n      ref: b\n    }), o), z.createElement(ChevronDownIcon, {\n      className: I.icon,\n      variant: \"muted\"\n    }));\n  },\n  xo = z.forwardRef(vt);\nvar ho = xo;\nho.Option = ge;\nfunction yo(n, p) {\n  var a = n,\n    {\n      children: e,\n      onSubmit: o,\n      testId: t = \"cf-ui-form-label\"\n    } = a,\n    r = l(a, [\"children\", \"onSubmit\", \"testId\"]);\n  let c = useCallback(u => {\n    u.preventDefault(), o && o(u);\n  }, [o]);\n  return z.createElement(\"form\", i({\n    ref: p,\n    \"data-test-id\": t,\n    onSubmit: c\n  }, r), e);\n}\nyo.displayName = \"Form\";\nvar go = forwardRef(yo);\nexport { Ne as Checkbox, $ as Counter, go as Form, q as FormControl, te as FormLabel, N as HelpText, ge as Option, Ze as Radio, ho as Select, ao as Switch, io as TextInput, uo as Textarea, W as ValidationMessage };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/HelpText/HelpText.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/FormControl/FormControlContext.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/ValidationMessage/ValidationMessage.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Checkbox/Checkbox.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckbox.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseCheckbox/GhostCheckbox.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseCheckbox/GhostCheckbox.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckbox.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckboxGroupContext.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Checkbox/CheckboxGroup.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckboxGroup.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Checkbox/CompoundCheckbox.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/FormControl/FormControl.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/FormLabel/FormLabel.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/FormLabel/FormLabel.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Counter/Counter.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Counter/Counter.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/FormControl/CompoundFormControl.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Radio/Radio.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Radio/RadioGroup.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Radio/CompoundRadio.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/TextInput/TextInput.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseInput/BaseInput.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/BaseInput/BaseInput.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/TextInput/input-group/InputGroup.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/TextInput/input-group/InputGroup.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/TextInput/CompoundTextInput.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Switch/Switch.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Textarea/Textarea.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Textarea/Textarea.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Select/SelectOption.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Select/Select.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Select/Select.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Select/CompoundSelect.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-forms/src/Form/Form.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  CommonProps,\n  MarginProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { useFormControl } from '../FormControl/FormControlContext';\n\nexport interface HelpTextInternalProps extends CommonProps, MarginProps {\n  children: React.ReactNode;\n}\n\nexport type HelpTextProps = PropsWithHTMLElement<HelpTextInternalProps, 'p'>;\n\n/**\n * `HelpText` is a styled copy block with guidance, placed in the context of form components.\n */\n\nexport const HelpText = React.forwardRef<\n  HTMLParagraphElement,\n  ExpandProps<HelpTextProps>\n>(({ testId = 'cf-ui-help-text', ...otherProps }, ref) => {\n  const { id } = useFormControl({});\n  return (\n    <Text\n      as=\"p\"\n      fontColor=\"gray500\"\n      fontSize=\"fontSizeM\"\n      testId={testId}\n      id={`${id}-helptext`}\n      marginTop=\"spacingXs\"\n      {...otherProps}\n      ref={ref}\n    />\n  );\n});\n\nHelpText.displayName = 'HelpText';\n","import { createContext, useContext } from 'react';\nimport type { FormControlContextProps } from './types';\n\nconst noop = () => {\n  // do nothing\n};\n\nexport const FormControlContext = createContext<\n  FormControlContextProps | undefined\n>(undefined);\n\nexport const useFormControlContext = () => {\n  const context = useContext(FormControlContext);\n  return context;\n};\n\nexport const useFormControl = (\n  props: Partial<FormControlContextProps>,\n): FormControlContextProps => {\n  const context = useFormControlContext();\n  if (!context) {\n    return props;\n  }\n  return {\n    isDisabled: props.isDisabled ?? context.isDisabled,\n    isInvalid: props.isInvalid ?? context.isInvalid,\n    isReadOnly: props.isReadOnly ?? context.isReadOnly,\n    isRequired: props.isRequired ?? context.isRequired,\n    id: props.id ?? context.id,\n    maxLength: context.maxLength,\n    inputValue: context.inputValue,\n    setMaxLength: context.setMaxLength || noop,\n    setInputValue: context.setInputValue || noop,\n  };\n};\n","import React, { forwardRef } from 'react';\nimport {\n  Flex,\n  type CommonProps,\n  type MarginProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { ErrorCircleOutlineIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\nimport { useFormControl } from '../FormControl/FormControlContext';\n\nexport interface ValidationMessageInternalProps\n  extends CommonProps,\n    MarginProps {\n  children: React.ReactNode;\n}\n\nexport type ValidationMessageProps = PropsWithHTMLElement<\n  ValidationMessageInternalProps,\n  'div'\n>;\n\nexport const ValidationMessage = forwardRef<\n  HTMLDivElement,\n  ExpandProps<ValidationMessageProps>\n>(({ children, testId = 'cf-ui-validation-message', ...otherProps }, ref) => {\n  const { id } = useFormControl({});\n  return (\n    <Flex\n      marginTop=\"spacingXs\"\n      {...otherProps}\n      ref={ref}\n      testId={testId}\n      alignItems=\"center\"\n      id={id ? `${id}-validation` : undefined}\n      aria-live=\"assertive\"\n    >\n      <Flex marginRight=\"spacing2Xs\">\n        <ErrorCircleOutlineIcon\n          size=\"small\"\n          variant=\"negative\"\n          aria-hidden=\"true\"\n        />\n      </Flex>\n      <Text as=\"p\" fontColor=\"colorNegative\">\n        {children}\n      </Text>\n    </Flex>\n  );\n});\n\nValidationMessage.displayName = 'ValidationMessage';\n","import React from 'react';\nimport { useId, type ExpandProps } from '@contentful/f36-core';\nimport { BaseCheckbox, BaseCheckboxProps } from '../BaseCheckbox';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { useBaseCheckboxGroup } from '../BaseCheckbox/BaseCheckboxGroupContext';\n\nexport type CheckboxProps = Omit<BaseCheckboxProps, 'type' | 'size'>;\n\nconst _Checkbox = (\n  props: ExpandProps<CheckboxProps>,\n  ref: React.Ref<HTMLInputElement>,\n) => {\n  const {\n    testId = 'cf-ui-checkbox',\n    id,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    children,\n    onBlur,\n    onChange,\n    defaultChecked,\n    isChecked,\n    value,\n    name,\n    ...otherProps\n  } = props;\n\n  const inputId = useId(id, 'checkbox');\n\n  const groupProps = useBaseCheckboxGroup({\n    onBlur,\n    onChange,\n    value,\n    defaultChecked,\n    isChecked,\n    name,\n  });\n\n  // Removes the not needed properties that comes from FormControl context.\n  const {\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n    isReadOnly,\n    ...formProps\n  } = useFormControl({\n    id: inputId,\n    isDisabled,\n    isInvalid,\n    isRequired,\n  });\n\n  return (\n    <BaseCheckbox\n      {...formProps}\n      {...groupProps}\n      {...otherProps}\n      type=\"checkbox\"\n      testId={testId}\n      ref={ref}\n    >\n      {children}\n    </BaseCheckbox>\n  );\n};\n\nexport const Checkbox = React.forwardRef(_Checkbox);\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport type { PropsWithHTMLElement, ExpandProps } from '@contentful/f36-core';\nimport type { BaseCheckboxInternalProps } from './types';\nimport { GhostCheckbox } from './GhostCheckbox';\nimport getStyles from './BaseCheckbox.styles';\nimport { Text } from '@contentful/f36-typography';\nimport { Flex } from '@contentful/f36-core';\nimport { HelpText } from '../HelpText/HelpText';\nimport { useFormControl } from '../FormControl/FormControlContext';\n\nexport type BaseCheckboxProps = PropsWithHTMLElement<\n  BaseCheckboxInternalProps,\n  'label',\n  'htmlFor'\n>;\n\nfunction _BaseCheckbox(\n  props: ExpandProps<BaseCheckboxProps>,\n  ref: React.RefObject<HTMLInputElement>,\n) {\n  const {\n    isChecked = undefined,\n    onChange,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    type = 'checkbox',\n    value,\n    isDisabled,\n    isIndeterminate,\n    isInvalid,\n    isRequired = false,\n    id,\n    willBlurOnEsc = true,\n    testId = 'cf-ui-base-checkbox',\n    className = '',\n    defaultChecked = undefined,\n    name,\n    inputProps = {},\n    children,\n    'aria-label': ariaLabel,\n    size = 'medium',\n    helpText,\n    ...otherProps\n  } = props;\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const finalRef = ref || inputRef;\n  const { id: formFieldId } = useFormControl({});\n\n  useEffect(() => {\n    if (finalRef.current) {\n      finalRef.current.indeterminate = isIndeterminate;\n    }\n  }, [isIndeterminate, finalRef]);\n\n  const styles = getStyles({ isDisabled, type, size });\n\n  const handleFocus = useCallback(\n    (e) => {\n      e.persist();\n      if (onFocus) {\n        onFocus(e);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleBlur = useCallback(\n    (e) => {\n      e.persist();\n      if (onBlur) {\n        onBlur(e);\n      }\n    },\n    [onBlur],\n  );\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      e.persist();\n      if (willBlurOnEsc && e.key === 'Escape') {\n        finalRef?.current?.blur();\n      }\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    },\n    [willBlurOnEsc, onKeyDown, finalRef],\n  );\n\n  const ariaChecked =\n    typeof isChecked !== undefined ? isChecked : defaultChecked;\n\n  const helpTextId = id ? `${id}-helptext` : undefined;\n  const ariaDescribedBy = isInvalid\n    ? `${formFieldId}-validation`\n    : helpText\n    ? helpTextId\n    : undefined;\n\n  return (\n    <Flex alignItems=\"flex-start\" flexDirection=\"column\" className={className}>\n      <Text\n        as=\"label\"\n        fontColor=\"gray900\"\n        fontWeight=\"fontWeightMedium\"\n        className={styles.wrapper}\n        htmlFor={id}\n        testId={testId}\n        {...otherProps}\n      >\n        <input\n          {...inputProps}\n          aria-label={ariaLabel}\n          checked={isChecked}\n          defaultChecked={defaultChecked}\n          className={styles.input}\n          type={type === 'switch' ? 'checkbox' : type}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          value={value}\n          disabled={isDisabled}\n          role={type}\n          aria-checked={isIndeterminate ? 'mixed' : ariaChecked}\n          ref={finalRef}\n          required={isRequired}\n          aria-required={isRequired ? 'true' : undefined}\n          aria-invalid={isInvalid ? 'true' : undefined}\n          aria-describedby={ariaDescribedBy}\n          id={id}\n          name={name}\n        />\n        <GhostCheckbox\n          type={type}\n          isDisabled={isDisabled}\n          isIndeterminate={isIndeterminate}\n          size={size}\n        />\n        {children}\n      </Text>\n      {helpText && (\n        <HelpText id={helpTextId} className={styles.helpText}>\n          {helpText}\n        </HelpText>\n      )}\n    </Flex>\n  );\n}\n\n_BaseCheckbox.displayName = 'BaseCheckbox';\n\nexport const BaseCheckbox = React.forwardRef(_BaseCheckbox);\n","import React from 'react';\nimport { DoneIcon, MinusIcon, CloseIcon } from '@contentful/f36-icons';\nimport { BaseCheckboxInternalProps } from './types';\nimport getStyles from './GhostCheckbox.styles';\n\nexport type GhostCheckboxProps = Pick<\n  BaseCheckboxInternalProps,\n  'type' | 'isIndeterminate' | 'isDisabled' | 'size'\n>;\n\nexport const GhostCheckbox = (props: GhostCheckboxProps) => {\n  const { type, isIndeterminate, isDisabled, size = 'medium' } = props;\n  const styles = getStyles({ isDisabled, size });\n\n  if (type === 'switch') {\n    return (\n      <span className={styles.switch}>\n        <DoneIcon size=\"tiny\" variant=\"white\" />\n        <CloseIcon size=\"tiny\" variant=\"white\" />\n      </span>\n    );\n  }\n\n  return (\n    <span className={styles[type]}>\n      {type === 'checkbox' &&\n        (isIndeterminate ? (\n          <MinusIcon size=\"tiny\" variant=\"white\" />\n        ) : (\n          <DoneIcon size=\"tiny\" variant=\"white\" />\n        ))}\n    </span>\n  );\n};\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport type { GhostCheckboxProps } from './GhostCheckbox';\nimport tokens from '@contentful/f36-tokens';\n\ntype stylesArgs = Pick<GhostCheckboxProps, 'isDisabled' | 'size'>;\n\nconst getBaseGhostStyles = ({ isDisabled }): CSSObject => ({\n  alignItems: 'center',\n  background: !isDisabled ? tokens.colorWhite : tokens.gray300,\n  border: `2px solid ${tokens.gray300}`,\n  boxSizing: 'border-box',\n  display: 'inline-flex',\n  height: tokens.spacingM,\n  justifyContent: 'center',\n  marginRight: tokens.spacingXs,\n  width: tokens.spacingM,\n});\n\nconst getCheckboxStyles = ({ isDisabled }) => {\n  const baseStyle = {\n    ...getBaseGhostStyles({ isDisabled }),\n    backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    borderRadius: tokens.borderRadiusSmall,\n    '& svg': {\n      fill: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    },\n    'input:indeterminate + &, input:checked + &': {\n      backgroundColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      borderColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      '& svg': {\n        fill: !isDisabled ? tokens.colorWhite : tokens.gray600,\n      },\n    },\n  };\n\n  return css(baseStyle);\n};\n\nconst getRadioStyles = ({ isDisabled }) => {\n  const baseBefore = {\n    content: '\"\"',\n    borderRadius: '50%',\n    backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    width: tokens.borderRadiusMedium,\n    height: tokens.borderRadiusMedium,\n  };\n\n  const baseStyle = {\n    ...getBaseGhostStyles({ isDisabled }),\n    backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    borderRadius: '50%',\n    '&:before': {\n      ...baseBefore,\n    },\n    'input:checked + &': {\n      backgroundColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      borderColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      '&:before': {\n        backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray600,\n      },\n    },\n  };\n\n  return css(baseStyle);\n};\n\nconst getSwitchStyles = ({ isDisabled, size }) => {\n  const sizeStyle =\n    size === 'small'\n      ? {\n          height: tokens.spacingM,\n          width: tokens.spacingXl,\n          '&:before': {\n            height: tokens.spacingS,\n            width: tokens.spacingS,\n          },\n          'input:checked + &:before': {\n            transform: `translateX(${tokens.spacingM})`,\n          },\n        }\n      : {\n          height: '20px',\n          width: '40px',\n          '&:before': {\n            height: tokens.spacingM,\n            width: tokens.spacingM,\n          },\n          'input:checked + &:before': {\n            transform: `translateX(20px)`,\n          },\n        };\n\n  const baseStyle: CSSObject = {\n    ...getBaseGhostStyles({ isDisabled }),\n    background: tokens.gray600,\n    borderColor: tokens.gray600,\n    borderRadius: tokens.borderRadiusSmall,\n    justifyContent: 'space-around',\n    position: 'relative',\n    flexShrink: 0,\n    '&:before': {\n      background: tokens.colorWhite,\n      borderRadius: `calc(${tokens.borderRadiusSmall}/2)`,\n      content: '\"\"',\n      left: 0,\n      position: 'absolute',\n      transition: `transform ${tokens.transitionEasingDefault} ${tokens.transitionDurationDefault}`,\n    },\n    'input:checked + &': {\n      background: tokens.blue600,\n      borderColor: tokens.blue600,\n    },\n  };\n\n  const disabledStyle: CSSObject = {\n    '&, input:checked + &': {\n      background: tokens.gray200,\n      borderColor: tokens.gray200,\n    },\n    '&:before': {\n      background: tokens.gray400,\n    },\n    '& svg': {\n      fill: tokens.gray400,\n    },\n  };\n\n  return css([baseStyle, sizeStyle, isDisabled && disabledStyle]);\n};\n\nconst getStyles = (args: stylesArgs) => {\n  const { isDisabled, size } = args;\n  return {\n    radio: getRadioStyles({ isDisabled }),\n    checkbox: getCheckboxStyles({ isDisabled }),\n    switch: getSwitchStyles({ isDisabled, size }),\n  };\n};\n\nexport default getStyles;\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { BaseCheckboxInternalProps } from './types';\n\nconst sizeToStyle = (size) => {\n  if (size === 'small') {\n    return {\n      height: tokens.spacingM,\n      width: tokens.spacingXl,\n    };\n  }\n\n  return {\n    height: '20px',\n    width: '40px',\n  };\n};\n\nconst getHelpTextStyle = ({ size, type }) => {\n  let inputWidth = tokens.spacingM;\n  if (type === 'switch') {\n    inputWidth = sizeToStyle(size).width;\n  }\n\n  return {\n    marginLeft: `calc(${inputWidth} + ${tokens.spacingXs})`,\n    marginTop: 0,\n  };\n};\n\nconst getStyles = ({\n  isDisabled,\n  type,\n  size,\n}: Pick<BaseCheckboxInternalProps, 'isDisabled' | 'type' | 'size'>) => ({\n  wrapper: css({\n    alignItems: 'center',\n    display: 'inline-flex',\n    position: 'relative',\n    margin: '0',\n  }),\n  input: css([\n    {\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      height: tokens.spacingM,\n      margin: 0,\n      opacity: 0,\n      position: 'absolute',\n      width: tokens.spacingM,\n      zIndex: tokens.zIndexDefault,\n      '&:focus': {\n        outline: 'none',\n        '& + span': {\n          boxShadow: tokens.glowPrimary,\n        },\n      },\n      '&:focus:not(:focus-visible) + span': {\n        boxShadow: 'unset',\n      },\n      '&:focus-visible + span': {\n        boxShadow: tokens.glowPrimary,\n      },\n    },\n    type === 'switch' && sizeToStyle(size),\n  ]),\n  helpText: css(getHelpTextStyle({ size, type })),\n});\n\nexport default getStyles;\n","import { createContext, useContext } from 'react';\nimport { BaseCheckboxProps } from './BaseCheckbox';\nimport { BaseCheckboxGroupProps } from './BaseCheckboxGroup';\n\nexport type BaseCheckboxGroupContextProps = Omit<\n  BaseCheckboxGroupProps,\n  'children'\n>;\nexport type BaseCheckboxGroupContextValue = Pick<\n  BaseCheckboxProps,\n  'isChecked' | 'defaultChecked' | 'onChange' | 'onBlur' | 'name' | 'value'\n>;\n\nexport const BaseCheckboxGroupContext = createContext<\n  BaseCheckboxGroupContextProps | undefined\n>(undefined);\n\nexport const useBaseCheckboxGroupContext = () => {\n  const context = useContext(BaseCheckboxGroupContext);\n  return context;\n};\n\nexport const useBaseCheckboxGroup = (\n  props: Partial<BaseCheckboxProps>,\n): BaseCheckboxGroupContextValue => {\n  const context = useBaseCheckboxGroupContext();\n  if (!context) {\n    return props;\n  }\n\n  let isChecked, defaultChecked;\n\n  if (context.type === 'checkbox') {\n    isChecked =\n      context.value === undefined\n        ? undefined\n        : context.value?.includes(props.value);\n    defaultChecked =\n      isChecked !== undefined\n        ? undefined\n        : context.defaultValue?.includes(props.value);\n  }\n\n  if (context.type === 'radio') {\n    isChecked =\n      context.value === undefined ? undefined : context.value === props.value;\n    defaultChecked =\n      isChecked !== undefined\n        ? undefined\n        : context.defaultValue === props.value;\n  }\n\n  const onChange = (event) => {\n    props.onChange && props.onChange(event);\n    context.onChange && context.onChange(event);\n  };\n\n  const onBlur = (event) => {\n    props.onBlur && props.onBlur(event);\n    context.onBlur && context.onBlur(event);\n  };\n\n  return {\n    defaultChecked,\n    isChecked,\n    onBlur,\n    onChange,\n    name: context.name ?? props.name,\n    value: props.value,\n  };\n};\n","import React from 'react';\nimport {\n  BaseCheckboxGroup,\n  BaseCheckboxGroupProps,\n} from '../BaseCheckbox/BaseCheckboxGroup';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport interface CheckboxGroupProps\n  extends Omit<BaseCheckboxGroupProps, 'type'> {\n  /**\n   * Array of values of the checkboxes that should be checked for uncontrolled inputs\n   */\n  defaultValue?: Array<string>;\n  /**\n   * Array of values of the checkboxes that should be checked for controlled inputs\n   */\n  value?: Array<string>;\n}\n\nexport const _CheckboxGroup = (\n  props: ExpandProps<CheckboxGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const { children, testId = 'cf-ui-checkbox-group', ...otherProps } = props;\n  return (\n    <BaseCheckboxGroup\n      ref={ref}\n      testId={testId}\n      type=\"checkbox\"\n      {...otherProps}\n    >\n      {children}\n    </BaseCheckboxGroup>\n  );\n};\n\nexport const CheckboxGroup = React.forwardRef(_CheckboxGroup);\n","import React, { ChangeEventHandler, FocusEventHandler } from 'react';\nimport { Stack, type CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { BaseCheckboxGroupContext } from './BaseCheckboxGroupContext';\n\nexport interface BaseCheckboxGroupProps extends CommonProps {\n  /**\n   * Handler that will be triggered when any checkbox inside the group loses focus\n   */\n  onBlur?: FocusEventHandler<HTMLInputElement>;\n  /**\n   * Handler that will be triggered when any checkbox inside the group has their checked state changed\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  /**\n   * Name that will be assigned to all checkboxes inside the group, unless a different name is passed to the checkbox\n   */\n  name?: string;\n  /**\n   * Elements that should be in the group\n   */\n  children: React.ReactNode;\n  /**\n   * Type of the inputs used within the group\n   */\n  type: 'checkbox' | 'radio';\n  /**\n   * Array of values for checkboxes or single value for radio, that should be checked for uncontrolled inputs\n   */\n  defaultValue?: Array<string> | string;\n  /**\n   * Array of values for checkboxes or single value for radio, that should be checked for controlled inputs\n   */\n  value?: Array<string> | string;\n}\n\nexport const _BaseCheckboxGroup = (\n  props: ExpandProps<BaseCheckboxGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-base-checkbox-group',\n    ...contextProps\n  } = props;\n  return (\n    <BaseCheckboxGroupContext.Provider value={contextProps}>\n      <Stack\n        ref={ref}\n        testId={testId}\n        className={className}\n        flexDirection=\"column\"\n        alignItems=\"flex-start\"\n        spacing=\"spacingXs\"\n      >\n        {children}\n      </Stack>\n    </BaseCheckboxGroupContext.Provider>\n  );\n};\n\nexport const BaseCheckboxGroup = React.forwardRef(_BaseCheckboxGroup);\n","import { Checkbox as OriginalCheckbox } from './Checkbox';\nimport { CheckboxGroup } from './CheckboxGroup';\n\ntype CompoundCheckbox = typeof OriginalCheckbox & {\n  Group: typeof CheckboxGroup;\n};\n\nexport const Checkbox = OriginalCheckbox as CompoundCheckbox;\nCheckbox.Group = CheckboxGroup;\n","import React, { useState } from 'react';\nimport {\n  useId,\n  type CommonProps,\n  type MarginProps,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Box } from '@contentful/f36-core';\n\nimport { FormControlContext } from './FormControlContext';\nimport type { FormControlContextProps } from './types';\n\nconst FORM_CONTROL_DEFAULT_TAG = 'div';\n\nexport interface FormControlInternalProps\n  extends FormControlContextProps,\n    CommonProps,\n    MarginProps {\n  as?: 'div' | 'fieldset';\n  children: React.ReactNode;\n}\n\nexport type FormControlProps<\n  E extends React.ElementType = typeof FORM_CONTROL_DEFAULT_TAG,\n> = PolymorphicProps<FormControlInternalProps, E>;\n\nfunction _FormControl<\n  E extends React.ElementType = typeof FORM_CONTROL_DEFAULT_TAG,\n>(\n  {\n    as,\n    isInvalid,\n    isRequired,\n    isDisabled,\n    isReadOnly,\n    children,\n    marginBottom = 'spacingL',\n    id,\n    testId = 'cf-ui-form-control',\n    ...otherProps\n  }: FormControlProps<E>,\n  ref: React.Ref<any>,\n) {\n  const generatedId = useId(id, 'field-');\n  const [inputValue, setInputValue] = useState('');\n  const [maxLength, setMaxLength] = useState(0);\n  const roleAttr = as === 'fieldset' ? undefined : 'group';\n  const Element: React.ElementType = as || FORM_CONTROL_DEFAULT_TAG;\n\n  const context = {\n    id: generatedId,\n    isRequired,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n  };\n\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box\n        as={Element}\n        ref={ref}\n        role={roleAttr}\n        testId={testId}\n        marginBottom={marginBottom}\n        {...otherProps}\n      >\n        {children}\n      </Box>\n    </FormControlContext.Provider>\n  );\n}\n\n_FormControl.displayName = 'FormControl';\n\nexport const FormControl: PolymorphicComponent<\n  ExpandProps<FormControlInternalProps>,\n  typeof FORM_CONTROL_DEFAULT_TAG\n> = React.forwardRef(_FormControl);\n","import { cx } from 'emotion';\nimport React, { forwardRef, type ReactNode } from 'react';\nimport { getFormLabelStyles } from './FormLabel.styles';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\n\nexport interface FormLabelInternalProps extends CommonProps, MarginProps {\n  /**\n   * Label value to show\n   */\n  children: ReactNode;\n  /**\n   * Whether or not the associated input element is required\n   *\n   * @default false\n   */\n  isRequired?: boolean;\n  /**\n   * Custom text to show in parentheses that gets rendered if the associated\n   * input is required\n   *\n   * @default \"required\"\n   */\n  requiredText?: string;\n  /**\n   * Defines how the element will be rendered\n   * @default label\n   */\n  as?: 'label' | 'legend';\n}\n\nconst FORM_LABEL_DEFAULT_TAG = 'label';\n\nexport type FormLabelProps<\n  E extends React.ElementType = typeof FORM_LABEL_DEFAULT_TAG,\n> = PolymorphicProps<FormLabelInternalProps, E>;\n\nfunction _FormLabel<\n  E extends React.ElementType = typeof FORM_LABEL_DEFAULT_TAG,\n>(\n  {\n    as,\n    children,\n    className,\n    isRequired,\n    requiredText = 'required',\n    testId = 'cf-ui-form-label',\n    ...otherProps\n  }: FormLabelProps<E>,\n  forwardedRef: React.Ref<HTMLLabelElement>,\n) {\n  const styles = getFormLabelStyles();\n  const formControlProps = useFormControl({ isRequired });\n\n  const id = formControlProps.id ? formControlProps.id + '-label' : undefined;\n\n  const labelProps =\n    as !== 'legend'\n      ? {\n          htmlFor: otherProps.htmlFor || formControlProps.id,\n        }\n      : {};\n\n  const Element: React.ElementType = as || FORM_LABEL_DEFAULT_TAG;\n\n  return (\n    <Text\n      as={Element}\n      marginBottom=\"spacingXs\"\n      {...otherProps}\n      fontColor=\"gray900\"\n      id={id}\n      {...labelProps}\n      className={cx(styles.root, className)}\n      ref={forwardedRef}\n      testId={testId}\n    >\n      {children}\n      {formControlProps.isRequired && (\n        <span className={styles.indicator}>({requiredText})</span>\n      )}\n    </Text>\n  );\n}\n\n_FormLabel.displayName = 'FormLabel';\n\nexport const FormLabel: PolymorphicComponent<\n  ExpandProps<FormLabelInternalProps>,\n  typeof FORM_LABEL_DEFAULT_TAG\n> = forwardRef(_FormLabel);\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getFormLabelStyles() {\n  return {\n    root: css({\n      display: 'inline-block',\n      fontWeight: tokens.fontWeightMedium,\n    }),\n    indicator: css({\n      color: tokens.gray500,\n      fontWeight: tokens.fontWeightNormal,\n      marginLeft: tokens.spacing2Xs,\n    }),\n  };\n}\n","import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { getCounterStyles } from './Counter.styles';\n\nimport { useFormControl } from '../FormControl/FormControlContext';\n\nexport type CounterProps = PropsWithHTMLElement<CommonProps, 'p'>;\n\nexport const Counter = forwardRef<\n  HTMLParagraphElement,\n  ExpandProps<CounterProps>\n>(({ testId = 'cf-ui-counter', className, ...otherProps }, ref) => {\n  const { maxLength, inputValue } = useFormControl({});\n  const styles = getCounterStyles();\n\n  return (\n    Boolean(maxLength) && (\n      <Text\n        as=\"p\"\n        fontColor=\"gray700\"\n        fontSize=\"fontSizeM\"\n        testId={testId}\n        marginTop=\"spacingXs\"\n        {...otherProps}\n        className={cx(styles.root, className)}\n        ref={ref}\n      >\n        {inputValue.length} / {maxLength}\n      </Text>\n    )\n  );\n});\n\nCounter.displayName = 'Counter';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getCounterStyles() {\n  return {\n    root: css({\n      flexShrink: 0,\n      paddingLeft: tokens.spacingM,\n      textAlign: 'right',\n    }),\n  };\n}\n","import { FormControl as OriginalFormControl } from './FormControl';\nimport { FormLabel } from '../FormLabel';\nimport { ValidationMessage } from '../ValidationMessage';\nimport { HelpText } from '../HelpText';\nimport { Counter } from '../Counter';\n\ntype CompoundFormControl = typeof OriginalFormControl & {\n  Label: typeof FormLabel;\n  ValidationMessage: typeof ValidationMessage;\n  HelpText: typeof HelpText;\n  Counter: typeof Counter;\n};\n\nexport const FormControl = OriginalFormControl as CompoundFormControl;\nFormControl.Label = FormLabel;\nFormControl.ValidationMessage = ValidationMessage;\nFormControl.HelpText = HelpText;\nFormControl.Counter = Counter;\n","import React from 'react';\nimport { useId, type ExpandProps } from '@contentful/f36-core';\n\nimport { BaseCheckbox, BaseCheckboxProps } from '../BaseCheckbox';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { useBaseCheckboxGroup } from '../BaseCheckbox/BaseCheckboxGroupContext';\n\nexport type RadioProps = Omit<\n  BaseCheckboxProps,\n  'type' | 'isIndeterminate' | 'size'\n>;\n\nconst _Radio = (\n  props: ExpandProps<RadioProps>,\n  ref: React.Ref<HTMLInputElement>,\n) => {\n  const {\n    testId = 'cf-ui-radio-button',\n    id,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    children,\n    onBlur,\n    onChange,\n    defaultChecked,\n    isChecked,\n    value,\n    name,\n    ...otherProps\n  } = props;\n\n  const inputId = useId(id, 'radio');\n\n  const groupProps = useBaseCheckboxGroup({\n    onBlur,\n    onChange,\n    value,\n    defaultChecked,\n    isChecked,\n    name,\n  });\n\n  // Removes the not needed properties that comes from FormControl context.\n  const {\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n    isReadOnly,\n    ...formProps\n  } = useFormControl({\n    id: inputId,\n    isDisabled,\n    isInvalid,\n    isRequired,\n  });\n\n  return (\n    <BaseCheckbox\n      {...formProps}\n      {...otherProps}\n      {...groupProps}\n      type=\"radio\"\n      testId={testId}\n      ref={ref}\n    >\n      {children}\n    </BaseCheckbox>\n  );\n};\n\nexport const Radio = React.forwardRef(_Radio);\n","import React from 'react';\nimport {\n  BaseCheckboxGroup,\n  BaseCheckboxGroupProps,\n} from '../BaseCheckbox/BaseCheckboxGroup';\n\nexport interface RadioGroupProps extends Omit<BaseCheckboxGroupProps, 'type'> {\n  /**\n   * Value of the radio that should be checked for uncontrolled inputs\n   */\n  defaultValue?: string;\n  /**\n   * Value of the radio that should be checked for controlled inputs\n   */\n  value?: string;\n}\n\nexport const _RadioGroup = (\n  props: RadioGroupProps,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const { children, testId = 'cf-ui-radio-group', ...groupProps } = props;\n  return (\n    <BaseCheckboxGroup ref={ref} testId={testId} type=\"radio\" {...groupProps}>\n      {children}\n    </BaseCheckboxGroup>\n  );\n};\n\nexport const RadioGroup = React.forwardRef(_RadioGroup);\n","import { Radio as OriginalRadio } from './Radio';\nimport { RadioGroup } from './RadioGroup';\n\ntype CompoundRadio = typeof OriginalRadio & {\n  Group: typeof RadioGroup;\n};\n\nexport const Radio = OriginalRadio as CompoundRadio;\nRadio.Group = RadioGroup;\n","import React, { useRef, useEffect } from 'react';\nimport { BaseInput } from '../BaseInput';\nimport { TextInputProps } from './types';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport const _TextInput = (\n  {\n    className,\n    testId = 'cf-ui-text-input',\n    id,\n    value,\n    defaultValue,\n    onChange,\n    onFocus,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n    size = 'medium',\n    maxLength,\n    ...otherProps\n  }: ExpandProps<TextInputProps>,\n  ref: React.RefObject<HTMLInputElement>,\n) => {\n  const {\n    setMaxLength,\n    maxLength: contextMaxLength,\n    setInputValue,\n    inputValue: contextInputValue,\n    ...formProps\n  } = useFormControl({\n    id,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n  });\n\n  useEffect(() => {\n    if (maxLength !== undefined && typeof setMaxLength === 'function') {\n      setMaxLength(maxLength);\n      setInputValue(value ?? defaultValue ?? '');\n    }\n  }, [maxLength, setMaxLength, setInputValue, defaultValue, value]);\n\n  const handleOnChange = (event) => {\n    if (typeof setInputValue === 'function') {\n      setInputValue(event.target.value);\n    }\n    onChange?.(event);\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const finalRef = ref || inputRef;\n\n  return (\n    <BaseInput\n      type=\"text\"\n      {...otherProps}\n      {...formProps}\n      testId={testId}\n      ref={finalRef}\n      onChange={maxLength ? handleOnChange : onChange}\n      onFocus={onFocus}\n      as=\"input\"\n      className={className}\n      value={value}\n      defaultValue={defaultValue}\n      size={size}\n      maxLength={maxLength}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef(_TextInput);\n","import React, {\n  useCallback,\n  type FocusEvent,\n  type KeyboardEvent,\n  type ChangeEvent,\n} from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport getInputStyles from './BaseInput.styles';\nimport { BaseInputInternalProps } from './types';\n\nconst INPUT_DEFAULT_TAG = 'input';\n\nexport type BaseInputProps<\n  E extends React.ElementType = typeof INPUT_DEFAULT_TAG,\n> = PolymorphicProps<\n  BaseInputInternalProps,\n  E,\n  'disabled' | 'required' | 'readOnly'\n>;\n\nfunction _BaseInput<E extends React.ElementType = typeof INPUT_DEFAULT_TAG>(\n  props: BaseInputProps<E>,\n  ref: React.Ref<HTMLInputElement | HTMLTextAreaElement>,\n) {\n  const {\n    as = INPUT_DEFAULT_TAG,\n    className,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    onKeyDown,\n    testId = 'cf-ui-base-input',\n    type = 'text',\n    value = undefined,\n    placeholder,\n    willBlurOnEsc = true,\n    style,\n    icon,\n    defaultValue,\n    size = 'medium',\n    resize = 'vertical',\n    ...otherProps\n  } = props;\n  const styles = getInputStyles({ as, isDisabled, isInvalid, size, resize });\n\n  const handleFocus = useCallback(\n    (e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      e.persist();\n      if (onFocus) {\n        onFocus(e);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      e.persist();\n      if (isDisabled || isReadOnly) return;\n\n      if (onChange) {\n        onChange(e);\n      }\n    },\n    [onChange, isDisabled, isReadOnly],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      e.persist();\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n\n      if (e.nativeEvent.code === 'Escape' && willBlurOnEsc) {\n        e.currentTarget.blur();\n      }\n    },\n    [willBlurOnEsc, onKeyDown],\n  );\n\n  const iconContent = icon && (\n    <Box as=\"span\" className={styles.iconPlaceholder}>\n      {React.cloneElement(icon, {\n        size: size === 'small' ? 'tiny' : 'small',\n        variant: 'muted',\n        'aria-hidden': true,\n      })}\n    </Box>\n  );\n\n  const Element = as as React.ElementType;\n\n  const inputContent = (iconClassName?: string) => (\n    <Element\n      {...otherProps}\n      value={value}\n      defaultValue={defaultValue}\n      data-test-id={testId}\n      style={style}\n      placeholder={placeholder}\n      className={cx(styles.input, iconClassName, className)}\n      name={name}\n      type={type}\n      ref={ref}\n      id={id}\n      readOnly={isReadOnly}\n      aria-readonly={isReadOnly ? 'true' : undefined}\n      aria-required={isRequired ? 'true' : undefined}\n      aria-invalid={isInvalid ? 'true' : undefined}\n      aria-describedby={\n        id ? `${id}-${isInvalid ? `validation` : `helptext`}` : undefined\n      }\n      disabled={isDisabled}\n      required={isRequired}\n      onChange={handleChange}\n      onBlur={onBlur}\n      onKeyDown={handleKeyDown}\n      onFocus={handleFocus}\n      size={size}\n    />\n  );\n\n  if (icon) {\n    return (\n      <Box as=\"div\" className={styles.rootComponentWithIcon}>\n        {inputContent(styles.inputWithIcon)}\n        {iconContent}\n      </Box>\n    );\n  }\n\n  return inputContent();\n}\n\n_BaseInput.displayName = 'BaseInput';\n\nexport const BaseInput: PolymorphicComponent<\n  ExpandProps<BaseInputInternalProps>,\n  typeof INPUT_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_BaseInput);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst getSizeStyles = ({ size }): CSSObject => {\n  if (size === 'small') {\n    return {\n      padding: `${tokens.spacing2Xs} ${tokens.spacingXs}`,\n      height: '32px',\n      maxHeight: '32px',\n    };\n  }\n\n  return {\n    height: '40px',\n    maxHeight: '40px',\n  };\n};\n\nconst getZIndex = ({\n  isDisabled,\n  isInvalid,\n  zIndexBase = tokens.zIndexDefault,\n}) => (isDisabled || isInvalid ? zIndexBase + 1 : zIndexBase);\n\nconst getStyles = ({ as, isDisabled, isInvalid, size, resize }) => ({\n  rootComponentWithIcon: css({\n    position: 'relative',\n    display: 'flex',\n    width: '100%',\n    zIndex: getZIndex({ isDisabled, isInvalid }),\n  }),\n  input: css({\n    outline: 'none',\n    boxShadow: tokens.insetBoxShadowDefault,\n    boxSizing: 'border-box',\n    backgroundColor: isDisabled ? tokens.gray100 : tokens.colorWhite,\n    border: `1px solid ${isInvalid ? tokens.red600 : tokens.gray300}`,\n    borderRadius: tokens.borderRadiusMedium,\n    color: tokens.gray700,\n    fontFamily: tokens.fontStackPrimary,\n    fontSize: tokens.fontSizeM,\n    lineHeight: tokens.lineHeightM,\n    padding: `10px ${tokens.spacingS}`,\n    margin: 0,\n    cursor: isDisabled ? 'not-allowed' : 'auto',\n    width: '100%',\n    zIndex: getZIndex({ isDisabled, isInvalid }),\n\n    // if the input is a textarea, the resize prop is applied and size should be ignored\n    ...(as === 'textarea' ? { resize } : getSizeStyles({ size })),\n\n    '&::placeholder': {\n      color: tokens.gray500,\n    },\n\n    '&:active, &:active:hover': {\n      borderColor: isInvalid\n        ? tokens.red600\n        : isDisabled\n        ? tokens.gray300\n        : tokens.blue600,\n      boxShadow: isInvalid\n        ? tokens.glowNegative\n        : isDisabled\n        ? 'none'\n        : tokens.glowPrimary,\n    },\n\n    '&:focus': {\n      borderColor: isInvalid\n        ? tokens.red600\n        : isDisabled\n        ? tokens.gray300\n        : tokens.blue600,\n      boxShadow: isInvalid\n        ? tokens.glowNegative\n        : isDisabled\n        ? 'none'\n        : tokens.glowPrimary,\n    },\n  }),\n\n  inputWithIcon: css({\n    paddingLeft: size === 'small' ? tokens.spacingXl : '38px',\n  }),\n\n  iconPlaceholder: css({\n    position: 'absolute',\n    pointerEvents: 'none',\n    top: 0,\n    bottom: 0,\n    left: size === 'small' ? tokens.spacingXs : tokens.spacingS,\n    display: 'flex',\n    alignItems: 'center',\n    zIndex: tokens.zIndexDefault,\n  }),\n});\n\nexport default getStyles;\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Stack,\n  type ExpandProps,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport getStyles from './InputGroup.styles';\nimport type { InputGroupSpacing } from './types';\n\nexport interface InputGroupProps extends CommonProps {\n  /**\n   * Sets the spacing of the elements if variant is separate.\n   * @default spacingS\n   */\n  spacing?: InputGroupSpacing;\n  children: React.ReactNode;\n}\n\nconst _InputGroup = (\n  props: ExpandProps<InputGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const { children, className, spacing = 'none', ...otherProps } = props;\n  const styles = getStyles({ spacing });\n  return (\n    <Stack\n      {...otherProps}\n      spacing={spacing}\n      ref={ref}\n      fullWidth\n      className={cx(styles.inputGroup, className)}\n    >\n      {children}\n    </Stack>\n  );\n};\n\nexport const InputGroup = React.forwardRef(_InputGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { GetStyleArguments } from './types';\n\nconst getInputGroupStyle = ({ spacing }) => {\n  if (spacing !== 'none') {\n    return;\n  }\n\n  return css({\n    position: 'relative',\n\n    '& button, & input': {\n      borderRadius: '0 !important',\n    },\n    '& > *': {\n      marginRight: '-1px !important',\n      '&:not(:focus), & button:not(:focus)': {\n        boxShadow: 'none !important',\n      },\n      '&:first-child, &:first-child > input, &:first-child button': {\n        borderBottomLeftRadius: `${tokens.borderRadiusMedium} !important`,\n        borderTopLeftRadius: `${tokens.borderRadiusMedium} !important`,\n      },\n      '&:last-child, &:last-child > input, &:last-child button': {\n        borderBottomRightRadius: `${tokens.borderRadiusMedium} !important`,\n        borderTopRightRadius: `${tokens.borderRadiusMedium} !important`,\n        marginRight: '0 !important',\n      },\n      '&:focus, &:focus-within': {\n        zIndex: tokens.zIndexDefault + 1,\n      },\n    },\n  });\n};\n\nexport default ({ spacing }: GetStyleArguments) => ({\n  inputGroup: getInputGroupStyle({ spacing }),\n});\n","import { TextInput as OriginalTextInput } from './TextInput';\nimport { InputGroup } from './input-group/InputGroup';\n\ntype CompoundTextInput = typeof OriginalTextInput & {\n  Group: typeof InputGroup;\n};\n\nexport const TextInput = OriginalTextInput as CompoundTextInput;\nTextInput.Group = InputGroup;\n","import React from 'react';\nimport { BaseCheckbox, BaseCheckboxProps } from '../BaseCheckbox';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport type SwitchProps = Omit<BaseCheckboxProps, 'type' | 'isIndeterminate'>;\n\nconst _Switch = (\n  props: ExpandProps<SwitchProps>,\n  ref: React.Ref<HTMLInputElement>,\n) => {\n  const {\n    testId = 'cf-ui-switch',\n    id,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    children,\n    ...otherProps\n  } = props;\n\n  // Removes the not needed properties that comes from FormControl context.\n  const {\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n    isReadOnly,\n    ...formProps\n  } = useFormControl({\n    id,\n    isDisabled,\n    isInvalid,\n    isRequired,\n  });\n\n  return (\n    <BaseCheckbox\n      {...formProps}\n      {...otherProps}\n      testId={testId}\n      type=\"switch\"\n      ref={ref}\n    >\n      {children}\n    </BaseCheckbox>\n  );\n};\n\nexport const Switch = React.forwardRef(_Switch);\n","import React, { useEffect } from 'react';\nimport { cx } from 'emotion';\n\nimport { BaseInput, type BaseInputProps } from '../BaseInput';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { getStyles } from './Textarea.styles';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport interface TextareaProps\n  extends Omit<BaseInputProps<'textarea'>, 'as' | 'type' | 'size'> {\n  /**\n   * Set's default value for textarea\n   */\n  defaultValue?: string;\n}\n\nconst _Textarea = (\n  {\n    className,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    isReadOnly,\n    onChange,\n    testId = 'cf-ui-textarea',\n    id,\n    resize = 'vertical',\n    maxLength,\n    value,\n    defaultValue,\n    ...otherProps\n  }: ExpandProps<TextareaProps>,\n  ref: React.Ref<HTMLTextAreaElement>,\n) => {\n  const styles = getStyles();\n\n  const {\n    setMaxLength,\n    maxLength: contextMaxLength,\n    setInputValue,\n    inputValue: contextInputValue,\n    ...formProps\n  } = useFormControl({\n    id,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n  });\n\n  useEffect(() => {\n    if (maxLength !== undefined && typeof setMaxLength === 'function') {\n      setMaxLength(maxLength);\n      setInputValue(value ?? defaultValue ?? '');\n    }\n  }, [defaultValue, maxLength, setInputValue, setMaxLength, value]);\n\n  const handleOnChange = (event) => {\n    if (typeof setInputValue === 'function') {\n      setInputValue(event.target.value);\n    }\n    onChange?.(event);\n  };\n\n  return (\n    <BaseInput\n      {...otherProps}\n      {...formProps}\n      defaultValue={defaultValue}\n      value={value}\n      testId={testId}\n      as=\"textarea\"\n      ref={ref}\n      className={cx(className, {\n        [styles.disabled]: isDisabled,\n        [styles.error]: isInvalid,\n      })}\n      maxLength={maxLength}\n      resize={resize}\n      onChange={maxLength ? handleOnChange : onChange}\n    />\n  );\n};\n\n/**\n * Textarea is a form component that allows the user to enter a sizeable amount of multi-line plain text.\n */\nexport const Textarea = React.forwardRef(_Textarea);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = () => {\n  return {\n    error: css({\n      '&:focus': {\n        borderColor: tokens.colorNegative,\n        boxShadow: tokens.glowNegative,\n      },\n    }),\n    disabled: css({\n      '&:focus': {\n        borderColor: tokens.gray300,\n        boxShadow: 'none',\n      },\n    }),\n  };\n};\n","import React from 'react';\nimport type { CommonProps, PropsWithHTMLElement } from '@contentful/f36-core';\n\nexport type OptionInternalProps = CommonProps & {\n  isDisabled?: boolean;\n};\n\nexport type OptionProps = PropsWithHTMLElement<\n  OptionInternalProps,\n  'option',\n  'defaultChecked' | 'defaultValue' | 'selected' | 'disabled'\n>;\n\nexport const Option = ({\n  testId = 'cf-ui-select-option',\n  isDisabled,\n  ...otherProps\n}: OptionProps) => {\n  return <option data-test-id={testId} {...otherProps} disabled={isDisabled} />;\n};\n","import React, {\n  useCallback,\n  KeyboardEvent,\n  ReactNode,\n  ChangeEventHandler,\n} from 'react';\nimport { cx } from 'emotion';\nimport { ChevronDownIcon } from '@contentful/f36-icons';\n\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { getSelectStyles } from './Select.styles';\n\nexport type SelectSize = 'small' | 'medium';\n\nexport type SelectInternalProps = CommonProps & {\n  isRequired?: boolean;\n  isInvalid?: boolean;\n  isDisabled?: boolean;\n  onChange?: ChangeEventHandler<HTMLSelectElement>;\n  children: ReactNode;\n  willBlurOnEsc?: boolean;\n  size?: SelectSize;\n  value?: string;\n  defaultValue?: string;\n};\n\nexport type SelectProps = PropsWithHTMLElement<\n  SelectInternalProps,\n  'select',\n  'disabled' | 'required'\n>;\n\nconst _Select = (\n  {\n    id,\n    children,\n    className,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    testId = 'cf-ui-select',\n    willBlurOnEsc = true,\n    onKeyDown,\n    size = 'medium',\n    value = undefined,\n    defaultValue = undefined,\n    ...otherProps\n  }: ExpandProps<SelectProps>,\n  ref: React.Ref<HTMLSelectElement>,\n) => {\n  const formProps = useFormControl({\n    isDisabled,\n    isInvalid,\n    isRequired,\n    id,\n  });\n\n  const styles = getSelectStyles({\n    isDisabled: formProps.isDisabled,\n    isInvalid: formProps.isInvalid,\n    size,\n  });\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLSelectElement>) => {\n      if (e.nativeEvent.code === 'Escape' && willBlurOnEsc) {\n        e.currentTarget.blur();\n      }\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    },\n    [onKeyDown, willBlurOnEsc],\n  );\n\n  return (\n    <div className={cx(styles.wrapper, className)}>\n      <select\n        {...otherProps}\n        id={formProps.id}\n        data-test-id={testId}\n        className={styles.select}\n        onKeyDown={handleKeyDown}\n        required={formProps.isRequired}\n        aria-required={formProps.isRequired ? 'true' : undefined}\n        aria-invalid={formProps.isInvalid ? true : undefined}\n        aria-describedby={\n          formProps.id\n            ? `${formProps.id}-${\n                formProps.isInvalid ? `validation` : `helptext`\n              }`\n            : undefined\n        }\n        disabled={formProps.isDisabled}\n        defaultValue={defaultValue}\n        value={value}\n        ref={ref}\n      >\n        {children}\n      </select>\n      <ChevronDownIcon className={styles.icon} variant=\"muted\" />\n    </div>\n  );\n};\n\nexport const Select = React.forwardRef(_Select);\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getSelectStyles({ isInvalid, isDisabled, size }) {\n  const sizeStyles =\n    size === 'small'\n      ? {\n          padding: `${tokens.spacing2Xs} ${tokens.spacingXs}`,\n          height: '32px',\n        }\n      : {\n          padding: `10px ${tokens.spacingL} 10px ${tokens.spacingS}`,\n          height: '40px',\n        };\n\n  const select = css({\n    width: '100%',\n    display: 'block',\n    appearance: 'none',\n    backgroundColor: tokens.colorWhite,\n    color: tokens.gray700,\n\n    fontSize: tokens.fontSizeM,\n    lineHeight: tokens.lineHeightM,\n    fontFamily: tokens.fontStackPrimary,\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: tokens.insetBoxShadowDefault,\n    outline: 'none',\n    border: `1px solid ${tokens.gray300}`,\n    cursor: 'pointer',\n\n    '&::placeholder': {\n      color: tokens.gray500,\n    },\n    '&:focus': {\n      outline: 'none',\n      boxShadow: tokens.glowPrimary,\n      borderColor: tokens.colorPrimary,\n    },\n    '&:-moz-focusring': { color: 'transparent', textShadow: '0 0 0 #000' },\n    '&::-ms-expand': { display: 'none' },\n  });\n\n  const disabled = css({\n    backgroundColor: tokens.gray100,\n    cursor: 'not-allowed',\n    color: tokens.gray600,\n    '&:focus, &:active': { borderColor: tokens.gray300 },\n  });\n\n  const invalid = css({\n    borderColor: isDisabled ? tokens.red300 : tokens.red600,\n    '&:focus': {\n      borderColor: tokens.red600,\n      boxShadow: tokens.glowNegative,\n    },\n  });\n\n  return {\n    wrapper: css({\n      position: 'relative',\n      display: 'block',\n      width: 'auto',\n    }),\n    select: css([\n      select,\n      sizeStyles,\n      isDisabled && disabled,\n      isInvalid && invalid,\n    ]),\n    icon: css({\n      position: 'absolute',\n      right: tokens.spacingXs,\n      top: '50%',\n      marginTop: '-8px',\n      pointerEvents: 'none',\n    }),\n  };\n}\n","import { Select as OriginalSelect } from './Select';\nimport { Option } from './SelectOption';\n\ntype CompoundSelect = typeof OriginalSelect & {\n  Option: typeof Option;\n};\n\nexport const Select = OriginalSelect as CompoundSelect;\nSelect.Option = Option;\n","import React, { forwardRef, useCallback, type FormEvent } from 'react';\n\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nexport type FormProps = PropsWithHTMLElement<CommonProps, 'form'>;\n\nfunction _Form(\n  {\n    children,\n    onSubmit,\n    testId = 'cf-ui-form-label',\n    ...otherProps\n  }: ExpandProps<FormProps>,\n  ref: React.Ref<HTMLFormElement>,\n) {\n  const handleSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (onSubmit) {\n        onSubmit(event);\n      }\n    },\n    [onSubmit],\n  );\n  return (\n    <form\n      ref={ref}\n      data-test-id={testId}\n      onSubmit={handleSubmit}\n      {...otherProps}\n    >\n      {children}\n    </form>\n  );\n}\n\n_Form.displayName = 'Form';\n\nexport const Form = forwardRef(_Form);\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}