{"ast":null,"code":"import d, { useCallback, useState, useEffect } from 'react';\nimport { isValid, startOfDay, endOfDay, parse, format } from 'date-fns';\nimport { css, cx } from 'emotion';\nimport n from '@contentful/f36-tokens';\nimport { DayPicker, useDayPicker, CaptionDropdowns, CaptionNavigation } from 'react-day-picker';\nexport { Day, DayContent, useDayPicker } from 'react-day-picker';\nimport { Flex } from '@contentful/f36-core';\nimport { Heading } from '@contentful/f36-typography';\nimport { Popover } from '@contentful/f36-popover';\nimport ue from 'react-focus-lock';\nimport { TextInput } from '@contentful/f36-forms';\nimport { IconButton } from '@contentful/f36-button';\nimport { CalendarIcon } from '@contentful/f36-icons';\nvar J = Object.defineProperty,\n  K = Object.defineProperties;\nvar Q = Object.getOwnPropertyDescriptors;\nvar x = Object.getOwnPropertySymbols;\nvar z = Object.prototype.hasOwnProperty,\n  W = Object.prototype.propertyIsEnumerable;\nvar M = (e, t, o) => t in e ? J(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: o\n  }) : e[t] = o,\n  p = (e, t) => {\n    for (var o in t || (t = {})) z.call(t, o) && M(e, o, t[o]);\n    if (x) for (var o of x(t)) W.call(t, o) && M(e, o, t[o]);\n    return e;\n  },\n  P = (e, t) => K(e, Q(t));\nvar S = (e, t) => {\n  var o = {};\n  for (var i in e) z.call(e, i) && t.indexOf(i) < 0 && (o[i] = e[i]);\n  if (e != null && x) for (var i of x(e)) t.indexOf(i) < 0 && W.call(e, i) && (o[i] = e[i]);\n  return o;\n};\nvar F = () => ({\n  calendar: css({\n    padding: n.spacingM\n  })\n});\nvar H = 40,\n  g = () => ({\n    vhidden: css({\n      boxSizing: \"border-box\",\n      padding: \"0\",\n      margin: \"0\",\n      background: \"transparent\",\n      border: \"0\",\n      MozAppearance: \"none\",\n      WebkitAppearance: \"none\",\n      appearance: \"none\",\n      position: \"absolute\",\n      top: \"0\",\n      width: \"1px\",\n      height: \"1px\",\n      overflow: \"hidden\",\n      clip: \"rect(1px, 1px, 1px, 1px)\"\n    }),\n    button_reset: css({\n      appearance: \"none\",\n      position: \"relative\",\n      margin: 0,\n      padding: 0,\n      border: \"none\",\n      outline: \"none\",\n      background: \"none\"\n    }),\n    button: css({\n      borderRadius: \"50%\",\n      cursor: \"pointer\",\n      color: n.gray900,\n      \"&.rdp-day_disabled\": {\n        color: n.gray400,\n        pointerEvents: \"none\"\n      },\n      \"&:focus, &:active\": {\n        boxShadow: n.glowPrimary\n      },\n      \"&:focus:not(:focus-visible)\": {\n        boxShadow: \"unset\"\n      },\n      \"&:hover\": {\n        backgroundColor: n.gray200\n      },\n      \"&.rdp-day_selected:not(.rdp-day_disabled)\": {\n        backgroundColor: n.blue600,\n        color: n.colorWhite,\n        fontWeight: n.fontWeightDemiBold\n      }\n    }),\n    months: css({\n      display: \"flex\"\n    }),\n    month: css({\n      width: \"100%\",\n      margin: \"0 1em\",\n      \"&:first-child\": {\n        marginLeft: 0\n      },\n      \"&:last-child\": {\n        marginRight: 0\n      }\n    }),\n    table: css({\n      width: \"100%\",\n      margin: 0,\n      borderCollapse: \"collapse\"\n    }),\n    caption: css({\n      position: \"relative\",\n      padding: 0,\n      textAlign: \"left\",\n      \".rdp-multiple_months &\": {\n        display: \"block\",\n        textAlign: \"center\"\n      }\n    }),\n    caption_dropdowns: css({\n      position: \"relative\",\n      display: \"inline-flex\"\n    }),\n    caption_label: css({\n      position: \"relative\",\n      zIndex: 1,\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      margin: \"0\",\n      padding: `0 ${n.spacingXs}`,\n      height: \"2rem\",\n      whiteSpace: \"nowrap\",\n      fontSize: n.fontSizeM,\n      fontWeight: n.fontWeightMedium,\n      borderRadius: n.borderRadiusMedium,\n      \"& + &\": {\n        marginLeft: \"3px\"\n      }\n    }),\n    nav: css({\n      whiteSpace: \"nowrap\",\n      \".rdp-multiple_months .rdp-caption_start &\": {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"0\",\n        transform: \"translateY(-50%)\"\n      },\n      \".rdp-multiple_months .rdp-caption_end &\": {\n        position: \"absolute\",\n        top: \"50%\",\n        right: \"0\",\n        transform: \"translateY(-50%)\"\n      }\n    }),\n    nav_button: css({\n      width: \"2rem\",\n      height: \"2rem\",\n      display: \"inline-flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: \"transparent\"\n    }),\n    nav_button_previous: css({\n      marginRight: \"3px\"\n    }),\n    dropdown_month: css({\n      position: \"relative\",\n      display: \"inline-flex\",\n      alignItems: \"center\"\n    }),\n    dropdown_year: css({\n      position: \"relative\",\n      display: \"inline-flex\",\n      alignItems: \"center\"\n    }),\n    dropdown: css({\n      appearance: \"none\",\n      position: \"absolute\",\n      zIndex: 2,\n      top: \"0\",\n      bottom: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      margin: \"0\",\n      padding: \"0\",\n      cursor: \"pointer\",\n      opacity: \"0\",\n      border: \"none\",\n      backgroundColor: \"transparent\",\n      fontFamily: \"inherit\",\n      fontSize: \"inherit\",\n      lineHeight: \"inherit\",\n      \"&:focus:not([disabled]) + div, &:active:not([disabled]) + div\": {\n        boxShadow: n.glowPrimary\n      },\n      \"&:hover:not([disabled]) + div, &:hover:not([disabled]) + div\": {\n        backgroundColor: n.gray200\n      }\n    }),\n    dropdown_icon: css({\n      marginLeft: \"8px\"\n    }),\n    head: css({\n      border: 0\n    }),\n    head_row: css({\n      height: \"100%\"\n    }),\n    row: css({\n      height: \"100%\"\n    }),\n    head_cell: css({\n      verticalAlign: \"middle\",\n      fontSize: n.fontSizeS,\n      fontWeight: n.fontWeightDemiBold,\n      textAlign: \"center\",\n      height: \"32px\",\n      color: n.gray600\n    }),\n    tbody: css({\n      border: 0\n    }),\n    tfoot: css({\n      margin: \"0.5em\"\n    }),\n    cell: css({\n      padding: \"2px\",\n      textAlign: \"center\"\n    }),\n    day: css({\n      display: \"flex\",\n      overflow: \"hidden\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: `${H / 16}rem`,\n      height: `${H / 16}rem`,\n      borderRadius: \"50%\",\n      margin: \"auto\",\n      \"&.rdp-day_today:not(.rdp-day_outside)\": {\n        fontWeight: n.fontWeightDemiBold\n      },\n      \"&.rdp-day_today:not(.rdp-day_outside):not(.rdp-day_selected):not(:hover)\": {\n        backgroundColor: n.blue100\n      }\n    }),\n    nav_icon: css({\n      width: \"0.625rem\"\n    })\n  });\nvar A = e => {\n  let t = g(),\n    {\n      fromDate: o,\n      toDate: i,\n      numberOfMonths: c\n    } = useDayPicker(),\n    s = Boolean(o && i && c === 1);\n  return d.createElement(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    className: t.caption\n  }, s && d.createElement(CaptionDropdowns, p({}, e)), d.createElement(CaptionNavigation, p({}, e)));\n};\nvar E = e => {\n  let t = g(),\n    {\n      fromDate: o,\n      toDate: i,\n      formatters: {\n        formatCaption: c\n      },\n      locale: s,\n      numberOfMonths: u\n    } = useDayPicker(),\n    l = Boolean(o && i && u === 1);\n  return d.createElement(Heading, {\n    as: \"h2\",\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    id: e.id,\n    className: cx(t.caption_label, l && t.vhidden)\n  }, c(e.displayMonth, {\n    locale: s\n  }));\n};\nfunction V(e) {\n  var o;\n  let t = g();\n  return d.createElement(DayPicker, P(p({}, e), {\n    weekStartsOn: (o = e.weekStartsOn) != null ? o : 1,\n    classNames: t,\n    components: p({\n      Caption: A,\n      CaptionLabel: E\n    }, e.components)\n  }));\n}\nfunction be(e) {\n  let t = F(),\n    L = e,\n    {\n      testId: o = \"cf-ui-datepicker\",\n      className: i,\n      style: c,\n      inputProps: s,\n      popoverProps: u,\n      selected: l,\n      onSelect: m,\n      fromDate: f,\n      toDate: b,\n      locale: k,\n      dateFormat: y = \"dd LLL yyyy\",\n      defaultIsOpen: j\n    } = L,\n    $ = S(L, [\"testId\", \"className\", \"style\", \"inputProps\", \"popoverProps\", \"selected\", \"onSelect\", \"fromDate\", \"toDate\", \"locale\", \"dateFormat\", \"defaultIsOpen\"]),\n    h = useCallback(a => !(!isValid(a) || f && startOfDay(f).getTime() > a.getTime() || b && a.getTime() > endOfDay(b).getTime()), [f, b]),\n    D = useCallback(a => parse(a, y, new Date(), {\n      locale: k\n    }), [k, y]),\n    [G, w] = useState(j),\n    [v, I] = useState(() => l ? format(l, y) : \"\");\n  useEffect(() => {\n    if (!l) {\n      I(\"\");\n      return;\n    }\n    l.getTime() !== D(v).getTime() && I(format(l, y));\n  }, [l]);\n  let U = useCallback(a => {\n      I(a.currentTarget.value);\n      let O = D(a.currentTarget.value);\n      h(O) ? m(O) : m(void 0);\n    }, [m, D, h]),\n    X = useCallback(a => {\n      a && h(a) && (m(a), w(!1));\n    }, [m, h]),\n    q = v && !h(D(v));\n  return d.createElement(Popover, p({\n    isOpen: G,\n    onClose: () => w(!1)\n  }, u), d.createElement(Popover.Trigger, null, d.createElement(De, {\n    className: i,\n    style: c,\n    testId: o,\n    isDisabled: s == null ? void 0 : s.isDisabled,\n    onTriggerClick: () => {\n      w(a => !a);\n    }\n  }, d.createElement(TextInput, p({\n    placeholder: format(new Date(), y),\n    value: v,\n    onChange: U,\n    isInvalid: (s == null ? void 0 : s.isInvalid) || q,\n    \"aria-label\": \"Enter date\",\n    testId: \"cf-ui-datepicker-input\"\n  }, s)))), d.createElement(Popover.Content, null, d.createElement(ue, {\n    returnFocus: !0\n  }, d.createElement(V, P(p({}, $), {\n    className: t.calendar,\n    mode: \"single\",\n    selected: l,\n    onSelect: X,\n    initialFocus: !1,\n    defaultMonth: l,\n    fromDate: f,\n    toDate: b,\n    locale: k\n  })))));\n}\nvar De = d.forwardRef((e, t) => {\n  let f = e,\n    {\n      children: o,\n      testId: i,\n      style: c,\n      className: s,\n      onTriggerClick: u,\n      isDisabled: l\n    } = f,\n    m = S(f, [\"children\", \"testId\", \"style\", \"className\", \"onTriggerClick\", \"isDisabled\"]);\n  return d.createElement(TextInput.Group, {\n    ref: t,\n    className: s,\n    style: c,\n    testId: i\n  }, o, d.createElement(IconButton, p({\n    \"aria-label\": \"Use calendar\",\n    variant: \"secondary\",\n    icon: d.createElement(CalendarIcon, {\n      \"aria-label\": \"calendar\"\n    }),\n    onClick: u,\n    isDisabled: l,\n    testId: \"cf-ui-datepicker-button\"\n  }, m)));\n});\nexport { V as Calendar, be as Datepicker };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Datepicker.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Datepicker.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Calendar/Calendar.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Calendar/Calendar.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Calendar/CalendarCaption.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Calendar/CalendarCaptionLabel.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-datepicker/src/Calendar/index.ts"],"sourcesContent":["import React, {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { CommonProps } from '@contentful/f36-core';\n\nimport { format, isValid, parse, startOfDay, endOfDay } from 'date-fns';\nimport { getStyles } from './Datepicker.styles';\nimport { Calendar } from './Calendar';\nimport { Popover } from '@contentful/f36-popover';\nimport { DayPickerSingleProps } from 'react-day-picker';\nimport FocusLock from 'react-focus-lock';\nimport { TextInput, TextInputProps } from '@contentful/f36-forms';\nimport { IconButton } from '@contentful/f36-button';\nimport { CalendarIcon } from '@contentful/f36-icons';\nimport { PopoverProps } from '@contentful/f36-popover';\n\nexport type DatepickerProps = CommonProps & {\n  /**\n   * Callback fired when the day is selected\n   */\n  onSelect: (day: Date | undefined) => void;\n\n  /**\n   * Format that is used to display date in the input,\n   * It is based on (Unicode Technical Standart #35)[https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table]\n   *\n   * @default 'dd LLL yyyy' e.g. 31 Jan 2022\n   */\n  dateFormat?: string;\n\n  /**\n   * If `true`, the Datepicker will be initially opened.\n   */\n  defaultIsOpen?: boolean;\n\n  /**\n   * Props to pass to the TextInput component\n   */\n  inputProps?: Partial<TextInputProps>;\n\n  /**\n   * Props to pass to the Popover (Dropdown) component\n   */\n  popoverProps?: Partial<PopoverProps>;\n} & Omit<\n    DayPickerSingleProps,\n    | 'mode'\n    | 'onSelect'\n    | 'fromMonth'\n    | 'toMonth'\n    | 'fromYear'\n    | 'toYear'\n    | 'classNames'\n    | 'className'\n  >;\n\n/**\n * Provides functionality for date selection.\n */\nexport function Datepicker(props: DatepickerProps) {\n  const styles = getStyles();\n  const {\n    testId = 'cf-ui-datepicker',\n    className,\n    style,\n    inputProps,\n    popoverProps,\n    selected,\n    onSelect,\n    fromDate,\n    toDate,\n    locale,\n    dateFormat = 'dd LLL yyyy',\n    defaultIsOpen,\n    ...otherProps\n  } = props;\n\n  const isDateValid = useCallback(\n    (date: Date) => {\n      if (!isValid(date)) {\n        return false;\n      }\n      if (fromDate && startOfDay(fromDate).getTime() > date.getTime()) {\n        return false;\n      }\n      if (toDate && date.getTime() > endOfDay(toDate).getTime()) {\n        return false;\n      }\n      return true;\n    },\n    [fromDate, toDate],\n  );\n\n  const parseInputDate = useCallback(\n    (value: string) => parse(value, dateFormat, new Date(), { locale }),\n    [locale, dateFormat],\n  );\n\n  const [isPopoverOpen, setIsPopoverOpen] = useState(defaultIsOpen);\n  const [inputValue, setInputValue] = useState<string>(() =>\n    selected ? format(selected, dateFormat) : '',\n  );\n\n  useEffect(() => {\n    if (!selected) {\n      setInputValue('');\n      return;\n    }\n\n    if (selected.getTime() !== parseInputDate(inputValue).getTime()) {\n      setInputValue(format(selected, dateFormat));\n    }\n    // we want to run this hook only when `selected` prop changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      setInputValue(e.currentTarget.value);\n\n      const date = parseInputDate(e.currentTarget.value);\n      if (isDateValid(date)) {\n        onSelect(date);\n      } else {\n        onSelect(undefined);\n      }\n    },\n    [onSelect, parseInputDate, isDateValid],\n  );\n\n  const handleDaySelect = useCallback(\n    (date: Date) => {\n      if (date && isDateValid(date)) {\n        onSelect(date);\n        setIsPopoverOpen(false);\n      }\n    },\n    [onSelect, isDateValid],\n  );\n\n  const isTextInputValueInvalid =\n    inputValue && !isDateValid(parseInputDate(inputValue));\n\n  return (\n    <Popover\n      isOpen={isPopoverOpen}\n      onClose={() => setIsPopoverOpen(false)}\n      {...popoverProps}\n    >\n      <Popover.Trigger>\n        {/* we need this additional component to pass <Popover.Trigger> props to the correct trigger button */}\n        <DatepickerTrigger\n          className={className}\n          style={style}\n          testId={testId}\n          isDisabled={inputProps?.isDisabled}\n          onTriggerClick={() => {\n            setIsPopoverOpen((prevState) => !prevState);\n          }}\n        >\n          <TextInput\n            placeholder={format(new Date(), dateFormat)}\n            value={inputValue}\n            onChange={handleInputChange}\n            isInvalid={inputProps?.isInvalid || isTextInputValueInvalid}\n            aria-label=\"Enter date\"\n            testId=\"cf-ui-datepicker-input\"\n            {...inputProps}\n          />\n        </DatepickerTrigger>\n      </Popover.Trigger>\n      <Popover.Content>\n        <FocusLock returnFocus={true}>\n          <Calendar\n            {...otherProps}\n            className={styles.calendar}\n            mode=\"single\"\n            selected={selected}\n            onSelect={handleDaySelect}\n            initialFocus={false}\n            defaultMonth={selected}\n            fromDate={fromDate}\n            toDate={toDate}\n            locale={locale}\n          />\n        </FocusLock>\n      </Popover.Content>\n    </Popover>\n  );\n}\n\ntype DatepickerTriggerProps = {\n  children: React.ReactNode;\n  isDisabled: boolean;\n  onTriggerClick: () => void;\n} & Pick<DatepickerProps, 'className' | 'style' | 'testId'>;\n\n// eslint-disable-next-line react/display-name\nconst DatepickerTrigger = React.forwardRef<\n  HTMLDivElement,\n  DatepickerTriggerProps\n>((props, ref) => {\n  const {\n    children,\n    testId,\n    style,\n    className,\n    onTriggerClick,\n    isDisabled,\n    // props will be passed from <Popover.Trigger> wrapper\n    ...popoverTriggerProps\n  } = props;\n\n  return (\n    <TextInput.Group\n      ref={ref}\n      className={className}\n      style={style}\n      testId={testId}\n    >\n      {children}\n      <IconButton\n        aria-label=\"Use calendar\"\n        variant=\"secondary\"\n        icon={<CalendarIcon aria-label=\"calendar\" />}\n        onClick={onTriggerClick}\n        isDisabled={isDisabled}\n        testId=\"cf-ui-datepicker-button\"\n        {...popoverTriggerProps}\n      />\n    </TextInput.Group>\n  );\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = () => {\n  return {\n    calendar: css({\n      padding: tokens.spacingM,\n    }),\n  };\n};\n","import React from 'react';\n\nimport { getStyles } from './Calendar.styles';\n\nimport {\n  DayPicker,\n  DayPickerDefaultProps,\n  DayPickerSingleProps,\n} from 'react-day-picker';\nimport { CalendarCaption } from './CalendarCaption';\nimport { CalendarCaptionLabel } from './CalendarCaptionLabel';\n\nexport type CalendarProps =\n  | Omit<DayPickerDefaultProps, 'classNames'>\n  | Omit<DayPickerSingleProps, 'classNames'>;\n\n/**\n * Provides functionality for calendar date selection. Used as a part of Datepicker component.\n * Based on the [React DayPicker](https://react-day-picker.js.org/) library.\n */\nexport function Calendar(props: CalendarProps) {\n  const styles = getStyles();\n\n  return (\n    <DayPicker\n      {...props}\n      weekStartsOn={props.weekStartsOn ?? 1}\n      classNames={styles}\n      components={{\n        Caption: CalendarCaption,\n        CaptionLabel: CalendarCaptionLabel,\n        ...props.components,\n      }}\n    />\n  );\n}\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { ClassNames } from 'react-day-picker';\n\nconst cellSize = 40;\n\nexport const getStyles = (): ClassNames => {\n  return {\n    vhidden: css({\n      boxSizing: 'border-box',\n      padding: '0',\n      margin: '0',\n      background: 'transparent',\n      border: '0',\n      MozAppearance: 'none',\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      position: 'absolute',\n      top: '0',\n      width: '1px',\n      height: '1px',\n      overflow: 'hidden',\n      clip: 'rect(1px, 1px, 1px, 1px)',\n    }),\n    button_reset: css({\n      appearance: 'none',\n      position: 'relative',\n      margin: 0,\n      padding: 0,\n      border: 'none',\n      outline: 'none',\n      background: 'none',\n    }),\n    button: css({\n      borderRadius: '50%',\n      cursor: 'pointer',\n      color: tokens.gray900,\n\n      '&.rdp-day_disabled': {\n        color: tokens.gray400,\n        pointerEvents: 'none',\n      },\n      '&:focus, &:active': {\n        boxShadow: tokens.glowPrimary,\n      },\n\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset',\n      },\n\n      '&:hover': {\n        backgroundColor: tokens.gray200,\n      },\n\n      '&.rdp-day_selected:not(.rdp-day_disabled)': {\n        backgroundColor: tokens.blue600,\n        color: tokens.colorWhite,\n        fontWeight: tokens.fontWeightDemiBold,\n      },\n    }),\n\n    months: css({\n      display: 'flex',\n    }),\n    month: css({\n      width: '100%',\n      margin: '0 1em',\n      '&:first-child': {\n        marginLeft: 0,\n      },\n      '&:last-child': {\n        marginRight: 0,\n      },\n    }),\n    table: css({\n      width: '100%',\n      margin: 0,\n      borderCollapse: 'collapse',\n    }),\n    caption: css({\n      position: 'relative',\n      padding: 0,\n      textAlign: 'left',\n\n      '.rdp-multiple_months &': {\n        display: 'block',\n        textAlign: 'center',\n      },\n    }),\n    caption_dropdowns: css({\n      position: 'relative',\n      display: 'inline-flex',\n    }),\n    caption_label: css({\n      position: 'relative',\n      zIndex: 1,\n      display: 'inline-flex',\n      alignItems: 'center',\n      margin: '0',\n      padding: `0 ${tokens.spacingXs}`,\n      height: '2rem',\n      whiteSpace: 'nowrap',\n      fontSize: tokens.fontSizeM,\n      fontWeight: tokens.fontWeightMedium,\n      borderRadius: tokens.borderRadiusMedium,\n\n      '& + &': {\n        marginLeft: '3px',\n      },\n    }),\n    nav: css({\n      whiteSpace: 'nowrap',\n\n      '.rdp-multiple_months .rdp-caption_start &': {\n        position: 'absolute',\n        top: '50%',\n        left: '0',\n        transform: 'translateY(-50%)',\n      },\n\n      '.rdp-multiple_months .rdp-caption_end &': {\n        position: 'absolute',\n        top: '50%',\n        right: '0',\n        transform: 'translateY(-50%)',\n      },\n    }),\n\n    nav_button: css({\n      width: '2rem',\n      height: '2rem',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'transparent',\n    }),\n    nav_button_previous: css({\n      marginRight: '3px',\n    }),\n    dropdown_month: css({\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }),\n    dropdown_year: css({\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }),\n    dropdown: css({\n      appearance: 'none',\n      position: 'absolute',\n      zIndex: 2,\n      top: '0',\n      bottom: '0',\n      left: '0',\n      width: '100%',\n      margin: '0',\n      padding: '0',\n      cursor: 'pointer',\n      opacity: '0',\n      border: 'none',\n      backgroundColor: 'transparent',\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      lineHeight: 'inherit',\n\n      '&:focus:not([disabled]) + div, &:active:not([disabled]) + div': {\n        boxShadow: tokens.glowPrimary,\n      },\n\n      '&:hover:not([disabled]) + div, &:hover:not([disabled]) + div': {\n        backgroundColor: tokens.gray200,\n      },\n    }),\n\n    dropdown_icon: css({\n      marginLeft: '8px',\n    }),\n\n    head: css({\n      border: 0,\n    }),\n\n    head_row: css({\n      height: '100%',\n    }),\n\n    row: css({\n      height: '100%',\n    }),\n\n    head_cell: css({\n      verticalAlign: 'middle',\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightDemiBold,\n      textAlign: 'center',\n      height: '32px',\n      color: tokens.gray600,\n    }),\n\n    tbody: css({\n      border: 0,\n    }),\n\n    tfoot: css({\n      margin: '0.5em',\n    }),\n\n    cell: css({\n      padding: '2px',\n      textAlign: 'center',\n    }),\n    day: css({\n      display: 'flex',\n      overflow: 'hidden',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: `${cellSize / 16}rem`,\n      height: `${cellSize / 16}rem`,\n      borderRadius: '50%',\n      margin: 'auto',\n\n      '&.rdp-day_today:not(.rdp-day_outside)': {\n        fontWeight: tokens.fontWeightDemiBold,\n      },\n      '&.rdp-day_today:not(.rdp-day_outside):not(.rdp-day_selected):not(:hover)':\n        {\n          backgroundColor: tokens.blue100,\n        },\n    }),\n\n    nav_icon: css({\n      width: '0.625rem',\n    }),\n  };\n};\n","import React from 'react';\n\nimport {\n  CaptionDropdowns,\n  CaptionNavigation,\n  CaptionProps,\n  useDayPicker,\n} from 'react-day-picker';\nimport { Flex } from '@contentful/f36-core';\nimport { getStyles } from './Calendar.styles';\n\nexport const CalendarCaption = (props: CaptionProps) => {\n  const styles = getStyles();\n  const { fromDate, toDate, numberOfMonths } = useDayPicker();\n\n  const isDropdownsVisible = Boolean(\n    fromDate && toDate && numberOfMonths === 1,\n  );\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      className={styles.caption}\n    >\n      {isDropdownsVisible && <CaptionDropdowns {...props} />}\n      <CaptionNavigation {...props} />\n    </Flex>\n  );\n};\n","import React from 'react';\n\nimport { CaptionLabelProps, useDayPicker } from 'react-day-picker';\nimport { Heading } from '@contentful/f36-typography';\nimport { getStyles } from './Calendar.styles';\nimport { cx } from 'emotion';\n\nexport const CalendarCaptionLabel = (props: CaptionLabelProps) => {\n  const styles = getStyles();\n  const {\n    fromDate,\n    toDate,\n    formatters: { formatCaption },\n    locale,\n    numberOfMonths,\n  } = useDayPicker();\n\n  const isVisuallyHidden = Boolean(fromDate && toDate && numberOfMonths === 1);\n\n  return (\n    <Heading\n      as=\"h2\"\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      id={props.id}\n      className={cx(styles.caption_label, isVisuallyHidden && styles.vhidden)}\n    >\n      {formatCaption(props.displayMonth, { locale })}\n    </Heading>\n  );\n};\n","export * from './Calendar';\nexport { Day, DayContent, useDayPicker } from 'react-day-picker';\nexport type { DayProps, DayContentProps } from 'react-day-picker';\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}