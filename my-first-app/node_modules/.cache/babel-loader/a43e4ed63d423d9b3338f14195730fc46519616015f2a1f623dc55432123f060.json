{"ast":null,"code":"import g from 'react';\nimport { cx, css } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nimport r from '@contentful/f36-tokens';\nvar C = Object.defineProperty,\n  R = Object.defineProperties;\nvar T = Object.getOwnPropertyDescriptors;\nvar p = Object.getOwnPropertySymbols;\nvar E = Object.prototype.hasOwnProperty,\n  h = Object.prototype.propertyIsEnumerable;\nvar P = (e, t, a) => t in e ? C(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: a\n  }) : e[t] = a,\n  n = (e, t) => {\n    for (var a in t || (t = {})) E.call(t, a) && P(e, a, t[a]);\n    if (p) for (var a of p(t)) h.call(t, a) && P(e, a, t[a]);\n    return e;\n  },\n  l = (e, t) => R(e, T(t));\nvar c = (e, t) => {\n  var a = {};\n  for (var o in e) E.call(e, o) && t.indexOf(o) < 0 && (a[o] = e[o]);\n  if (e != null && p) for (var o of p(e)) t.indexOf(o) < 0 && h.call(e, o) && (a[o] = e[o]);\n  return a;\n};\nvar H = _ref => {\n    let {\n      variant: e\n    } = _ref;\n    switch (e) {\n      case \"positive\":\n        return {\n          color: r.green600,\n          backgroundColor: r.green200\n        };\n      case \"primary\":\n        return {\n          color: r.blue600,\n          backgroundColor: r.blue200\n        };\n      case \"negative\":\n        return {\n          color: r.red600,\n          backgroundColor: r.red200\n        };\n      case \"warning\":\n        return {\n          color: r.orange600,\n          backgroundColor: r.orange200\n        };\n      case \"secondary\":\n        return {\n          color: r.gray700,\n          backgroundColor: r.gray200\n        };\n      case \"primary-filled\":\n        return {\n          color: r.colorWhite,\n          backgroundColor: r.blue600\n        };\n      case \"featured\":\n        return {\n          color: r.purple600,\n          backgroundColor: r.purple200\n        };\n      default:\n        return {};\n    }\n  },\n  N = _ref2 => {\n    let {\n      size: e\n    } = _ref2;\n    switch (e) {\n      case \"small\":\n        return {\n          padding: `3px ${r.spacing2Xs}`,\n          fontSize: \"0.625rem\",\n          lineHeight: \"0.625rem\",\n          maxHeight: \"16px\"\n        };\n      default:\n        return {\n          padding: `0 ${r.spacingXs}`,\n          fontSize: `calc(1rem * (12 / ${r.fontBaseDefault}))`,\n          lineHeight: \"20px\",\n          maxHeight: \"20px\"\n        };\n    }\n  },\n  v = () => ({\n    badge: _ref3 => {\n      let {\n        variant: e,\n        size: t\n      } = _ref3;\n      return css(n(n({\n        columnGap: r.spacing2Xs,\n        alignItems: \"center\",\n        fontFamily: r.fontStackPrimary,\n        fontWeight: r.fontWeightDemiBold,\n        textTransform: \"uppercase\",\n        letterSpacing: \"0.06rem\",\n        borderRadius: `${r.borderRadiusSmall}`,\n        overflow: \"hidden\",\n        verticalAlign: \"middle\"\n      }, H({\n        variant: e\n      })), N({\n        size: t\n      })));\n    },\n    badgeIcon: css({\n      flexShrink: 0\n    }),\n    badgeText: css({\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    })\n  });\nvar m = g.forwardRef((e, t) => {\n  let a = v(),\n    S = e,\n    {\n      children: o,\n      variant: i = \"primary\",\n      size: s = \"default\",\n      testId: d = \"cf-ui-badge\",\n      startIcon: u,\n      endIcon: f,\n      className: k\n    } = S,\n    w = c(S, [\"children\", \"variant\", \"size\", \"testId\", \"startIcon\", \"endIcon\", \"className\"]),\n    B = x => g.cloneElement(x, {\n      size: \"tiny\",\n      className: cx(a.badgeIcon, x.props.className),\n      variant: i === \"primary-filled\" ? \"white\" : i\n    });\n  return g.createElement(Box, l(n({\n    as: \"div\",\n    testId: d,\n    display: \"inline-flex\",\n    className: cx(a.badge({\n      variant: i,\n      size: s\n    }), k)\n  }, w), {\n    ref: t\n  }), u && s === \"default\" && B(u), g.createElement(\"span\", {\n    className: a.badgeText\n  }, o), f && s === \"default\" && B(f));\n});\nm.displayName = \"Badge\";\nvar W = {\n  published: \"positive\",\n  draft: \"warning\",\n  archived: \"negative\",\n  changed: \"primary\",\n  deleted: \"negative\",\n  new: \"primary-filled\"\n};\nfunction I(e, t) {\n  let d = e,\n    {\n      entityStatus: a,\n      size: o = \"default\"\n    } = d,\n    i = c(d, [\"entityStatus\", \"size\"]),\n    s = W[a];\n  return g.createElement(m, l(n({}, i), {\n    size: o,\n    variant: s,\n    ref: t\n  }), a);\n}\nI.displayName = \"EntityStatusBadge\";\nvar M = g.forwardRef(I);\nexport { m as Badge, M as EntityStatusBadge };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-badge/src/Badge/Badge.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-badge/src/Badge/Badge.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-badge/src/EntityStatusBadge/EntityStatusBadge.tsx"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n  type PickUnion,\n} from '@contentful/f36-core';\n\nimport type { BadgeSize, BadgeVariant } from '../types';\nimport { getBadgeStyles } from './Badge.styles';\n\ntype BadgeSizeWithIconProps =\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size?: Exclude<BadgeSize, 'small'>;\n      /**\n       * Expects any of the icon components. Renders the icon aligned to the start\n       */\n      startIcon?: React.ReactElement;\n      /**\n       * Expects any of the icon components. Renders the icon aligned to the end\n       */\n      endIcon?: React.ReactElement;\n    }\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size: PickUnion<BadgeSize, 'small'>;\n      // We use discriminative union typing, so in case the size is set as small we don't allow startIcon or endIcon\n      startIcon?: never;\n      endIcon?: never;\n    };\n\nexport type BadgeInternalProps = CommonProps &\n  BadgeSizeWithIconProps & {\n    /**\n     * Determines the variation of the component\n     * @default primary\n     */\n    variant?: BadgeVariant;\n\n    children: React.ReactNode;\n  };\n\nexport type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;\n\nexport const Badge = React.forwardRef<HTMLDivElement, ExpandProps<BadgeProps>>(\n  (props, ref) => {\n    const styles = getBadgeStyles();\n    const {\n      children,\n      variant = 'primary',\n      size = 'default',\n      testId = 'cf-ui-badge',\n      startIcon,\n      endIcon,\n      className,\n      ...otherProps\n    } = props;\n\n    const iconContent = (icon) =>\n      React.cloneElement(icon, {\n        size: 'tiny',\n        className: cx(styles.badgeIcon, icon.props.className),\n        variant: variant === 'primary-filled' ? 'white' : variant,\n      });\n\n    return (\n      <Box\n        as=\"div\"\n        testId={testId}\n        display=\"inline-flex\"\n        className={cx(styles.badge({ variant, size }), className)}\n        {...otherProps}\n        ref={ref}\n      >\n        {startIcon && size === 'default' && iconContent(startIcon)}\n        <span className={styles.badgeText}>{children}</span>\n        {endIcon && size === 'default' && iconContent(endIcon)}\n      </Box>\n    );\n  },\n);\n\nBadge.displayName = 'Badge';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport type { BadgeVariant, BadgeSize, BadgeStylesProps } from '../types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst variantToStyles = ({ variant }: { variant: BadgeVariant }): CSSObject => {\n  switch (variant) {\n    case 'positive':\n      return {\n        color: tokens.green600,\n        backgroundColor: tokens.green200,\n      };\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        backgroundColor: tokens.blue200,\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.red200,\n      };\n    case 'warning':\n      return {\n        color: tokens.orange600,\n        backgroundColor: tokens.orange200,\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray700,\n        backgroundColor: tokens.gray200,\n      };\n    case 'primary-filled':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue600,\n      };\n    case 'featured':\n      return {\n        color: tokens.purple600,\n        backgroundColor: tokens.purple200,\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = ({ size }: { size: BadgeSize }): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        padding: `3px ${tokens.spacing2Xs}`,\n        fontSize: '0.625rem',\n        lineHeight: '0.625rem',\n        maxHeight: '16px',\n      };\n    default:\n      return {\n        padding: `0 ${tokens.spacingXs}`,\n        fontSize: `calc(1rem * (12 / ${tokens.fontBaseDefault}))`,\n        lineHeight: '20px',\n        maxHeight: '20px',\n      };\n  }\n};\n\nexport const getBadgeStyles = () => ({\n  badge: ({ variant, size }: BadgeStylesProps) =>\n    css({\n      columnGap: tokens.spacing2Xs,\n      alignItems: 'center',\n      fontFamily: tokens.fontStackPrimary,\n      fontWeight: tokens.fontWeightDemiBold,\n      textTransform: 'uppercase',\n      letterSpacing:\n        '0.06rem' /*move to tokens or update wide letter spacing token*/,\n      borderRadius: `${tokens.borderRadiusSmall}`,\n      overflow: 'hidden',\n      verticalAlign: 'middle',\n      ...variantToStyles({ variant }),\n      ...sizeToStyles({ size }),\n    }),\n  badgeIcon: css({\n    flexShrink: 0,\n  }),\n  badgeText: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import React from 'react';\nimport type { EntityStatus, ExpandProps } from '@contentful/f36-core';\n\nimport { Badge, type BadgeProps } from '../Badge/Badge';\nimport type { BadgeVariant } from '../types';\n\nconst statusMap: { [key in EntityStatus]: BadgeVariant } = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'negative',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled',\n};\n\nexport interface EntityStatusBadgeProps\n  extends Omit<BadgeProps, 'variant' | 'children' | 'endIcon' | 'startIcon'> {\n  entityStatus: EntityStatus;\n}\n\nfunction EntityStatusBadge(\n  props: EntityStatusBadgeProps,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { entityStatus, size = 'default', ...otherProps } = props;\n  const variant = statusMap[entityStatus];\n  return (\n    <Badge {...otherProps} size={size} variant={variant} ref={ref}>\n      {entityStatus}\n    </Badge>\n  );\n}\n\nEntityStatusBadge.displayName = 'EntityStatusBadge';\n\nconst _EntityStatusBadge = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<EntityStatusBadgeProps>\n>(EntityStatusBadge);\nexport { _EntityStatusBadge as EntityStatusBadge };\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}