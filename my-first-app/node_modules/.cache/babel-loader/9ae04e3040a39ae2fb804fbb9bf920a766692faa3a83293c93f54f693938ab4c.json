{"ast":null,"code":"import * as _ from 'react';\nimport ___default, { useMemo, useState, useCallback } from 'react';\nimport { css, Global } from '@emotion/core';\nimport P from '@contentful/f36-tokens';\nimport { cx, css as css$1 } from 'emotion';\nvar le = Object.defineProperty,\n  me = Object.defineProperties;\nvar ce = Object.getOwnPropertyDescriptors;\nvar A = Object.getOwnPropertySymbols;\nvar v = Object.prototype.hasOwnProperty,\n  j = Object.prototype.propertyIsEnumerable;\nvar X = (e, t, o) => t in e ? le(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: o\n  }) : e[t] = o,\n  i = (e, t) => {\n    for (var o in t || (t = {})) v.call(t, o) && X(e, o, t[o]);\n    if (A) for (var o of A(t)) j.call(t, o) && X(e, o, t[o]);\n    return e;\n  },\n  a = (e, t) => me(e, ce(t));\nvar c = (e, t) => {\n  var o = {};\n  for (var r in e) v.call(e, r) && t.indexOf(r) < 0 && (o[r] = e[r]);\n  if (e != null && A) for (var r of A(e)) t.indexOf(r) < 0 && j.call(e, r) && (o[r] = e[r]);\n  return o;\n};\nvar fe = css`\n  /* Remove default margin */\n  /* Button has default margin in some browsers, like safari */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  p,\n  figure,\n  blockquote,\n  dl,\n  dd,\n  button {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n  ul[role='list'],\n  ol[role='list'] {\n    list-style: none;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n  }\n\n  /* Set core body defaults */\n  body {\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n  }\n\n  /* A elements that don't have a class get default styles */\n  a:not([class]) {\n    text-decoration-skip-ink: auto;\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for inputs and buttons */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Remove all animations and transitions for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`,\n  W = _ref => {\n    let {\n      withNormalize: e = !0,\n      styles: t\n    } = _ref;\n    return _.createElement(Global, {\n      styles: css`\n        ${e ? fe : void 0};\n        html {\n          border: 0;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        body {\n          color: ${P.gray800};\n          font-family: ${P.fontStackPrimary};\n          font-size: ${P.fontSizeM};\n          line-height: ${P.lineHeightM};\n        }\n\n        code {\n          font-family: ${P.fontStackMonospace};\n        }\n\n        fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n        }\n\n        *,\n        *::after,\n        *::before {\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          box-sizing: inherit;\n        }\n\n        ${t};\n      `\n    });\n  };\nvar ye = {\n  none: 0,\n  spacing2Xs: P.spacing2Xs,\n  spacingXs: P.spacingXs,\n  spacingS: P.spacingS,\n  spacingM: P.spacingM,\n  spacingL: P.spacingL,\n  spacingXl: P.spacingXl,\n  spacing2Xl: P.spacing2Xl,\n  spacing3Xl: P.spacing3Xl,\n  spacing4Xl: P.spacing4Xl\n};\nfunction m(e) {\n  return ye[e];\n}\nfunction J(e) {\n  return Object.assign({}, e.margin ? {\n    margin: m(e.margin)\n  } : null, e.marginLeft ? {\n    marginLeft: m(e.marginLeft)\n  } : null, e.marginRight ? {\n    marginRight: m(e.marginRight)\n  } : null, e.marginTop ? {\n    marginTop: m(e.marginTop)\n  } : null, e.marginBottom ? {\n    marginBottom: m(e.marginBottom)\n  } : null, e.padding ? {\n    padding: m(e.padding)\n  } : null, e.paddingLeft ? {\n    paddingLeft: m(e.paddingLeft)\n  } : null, e.paddingRight ? {\n    paddingRight: m(e.paddingRight)\n  } : null, e.paddingTop ? {\n    paddingTop: m(e.paddingTop)\n  } : null, e.paddingBottom ? {\n    paddingBottom: m(e.paddingBottom)\n  } : null);\n}\nvar xe = \"div\";\nfunction g(e) {\n  let E = e,\n    {\n      display: t,\n      className: o,\n      margin: r,\n      marginBottom: s,\n      marginLeft: p,\n      marginRight: n,\n      marginTop: l,\n      padding: d,\n      paddingBottom: f,\n      paddingLeft: y,\n      paddingRight: x,\n      paddingTop: S,\n      testId: R,\n      as: h = xe\n    } = E,\n    T = c(E, [\"display\", \"className\", \"margin\", \"marginBottom\", \"marginLeft\", \"marginRight\", \"marginTop\", \"padding\", \"paddingBottom\", \"paddingLeft\", \"paddingRight\", \"paddingTop\", \"testId\", \"as\"]);\n  return {\n    boxProps: i({\n      className: cx(css$1({\n        display: t\n      }), css$1(i({}, J({\n        margin: r,\n        marginBottom: s,\n        marginLeft: p,\n        marginRight: n,\n        marginTop: l,\n        padding: d,\n        paddingBottom: f,\n        paddingLeft: y,\n        paddingRight: x,\n        paddingTop: S\n      }))), o),\n      [\"data-test-id\"]: R\n    }, T),\n    Element: h\n  };\n}\nfunction H(e, t) {\n  let {\n    boxProps: o,\n    Element: r\n  } = g(e);\n  return _.createElement(r, a(i({}, o), {\n    ref: t\n  }), e.children);\n}\nH.displayName = \"Box\";\nvar q = _.forwardRef(H);\nvar Re = \"div\";\nfunction V(we, pe) {\n  var O = we,\n    {\n      isInline: e,\n      alignItems: t,\n      alignSelf: o,\n      alignContent: r,\n      flex: s,\n      flexBasis: p,\n      flexShrink: n,\n      flexDirection: l,\n      flexGrow: d,\n      flexWrap: f,\n      fullHeight: y,\n      fullWidth: x,\n      gap: S,\n      justifyContent: R,\n      justifyItems: h,\n      justifySelf: T,\n      order: b,\n      children: E,\n      as: I\n    } = O,\n    G = c(O, [\"isInline\", \"alignItems\", \"alignSelf\", \"alignContent\", \"flex\", \"flexBasis\", \"flexShrink\", \"flexDirection\", \"flexGrow\", \"flexWrap\", \"fullHeight\", \"fullWidth\", \"gap\", \"justifyContent\", \"justifyItems\", \"justifySelf\", \"order\", \"children\", \"as\"]);\n  var N;\n  let {\n    boxProps: U,\n    Element: se\n  } = g(a(i({}, G), {\n    as: I || Re\n  }));\n  return _.createElement(se, a(i({}, U), {\n    className: cx(css$1({\n      display: e ? \"inline-flex\" : \"flex\",\n      width: x ? \"100%\" : void 0,\n      height: y ? \"100%\" : void 0,\n      flex: s,\n      flexBasis: p,\n      flexShrink: n,\n      flexDirection: l,\n      gap: (N = P[S]) != null ? N : S,\n      justifyContent: R,\n      justifyItems: h,\n      justifySelf: T,\n      alignItems: t,\n      alignSelf: o,\n      alignContent: r,\n      order: b,\n      flexWrap: f,\n      flexGrow: d\n    }), U.className),\n    ref: pe\n  }), E);\n}\nV.displayName = \"Flex\";\nvar k = _.forwardRef(V);\nvar Te = \"div\";\nfunction Q(S, x) {\n  var R = S,\n    {\n      alignContent: e,\n      children: t,\n      columnGap: o = \"spacingM\",\n      columns: r = \"auto\",\n      flow: s,\n      isInline: p,\n      justifyContent: n,\n      rowGap: l = \"none\",\n      rows: d = \"auto\",\n      as: f\n    } = R,\n    y = c(R, [\"alignContent\", \"children\", \"columnGap\", \"columns\", \"flow\", \"isInline\", \"justifyContent\", \"rowGap\", \"rows\", \"as\"]);\n  var E, I;\n  let h = G => typeof G == \"number\" ? `repeat(${G}, minmax(0, 1fr))` : G,\n    {\n      boxProps: T,\n      Element: b\n    } = g(a(i({}, y), {\n      as: f || Te\n    }));\n  return _.createElement(b, a(i({}, T), {\n    className: cx(css$1({\n      display: p ? \"inline-grid\" : \"grid\",\n      gridTemplateColumns: h(r),\n      gridTemplateRows: h(d),\n      flow: s,\n      justifyContent: n,\n      alignContent: e,\n      columnGap: (E = m(o)) != null ? E : 0,\n      rowGap: (I = m(l)) != null ? I : 0\n    }), T.className),\n    ref: x\n  }), t);\n}\nQ.displayName = \"Grid\";\nvar Y = _.forwardRef(Q);\nfunction Z(f, d) {\n  var y = f,\n    {\n      children: e,\n      columnStart: t,\n      columnEnd: o,\n      rowStart: r,\n      rowEnd: s,\n      area: p,\n      order: n\n    } = y,\n    l = c(y, [\"children\", \"columnStart\", \"columnEnd\", \"rowStart\", \"rowEnd\", \"area\", \"order\"]);\n  let x = p || [r || \"auto\", t || \"auto\", s || \"auto\", o || \"auto\"].join(\" / \"),\n    {\n      boxProps: S,\n      Element: R\n    } = g(l);\n  return _.createElement(R, a(i({}, S), {\n    className: cx(css$1({\n      gridArea: x,\n      order: n\n    }), S.className),\n    ref: d\n  }), e);\n}\nZ.displayName = \"GridItem\";\nvar w = _.forwardRef(Z);\nvar M = Y;\nM.Item = w;\nvar be = \"div\";\nfunction ee(d, l) {\n  var f = d,\n    {\n      flexDirection: e = \"row\",\n      alignItems: t = \"center\",\n      isInline: o = !1,\n      spacing: r = \"spacingM\",\n      children: s,\n      as: p\n    } = f,\n    n = c(f, [\"flexDirection\", \"alignItems\", \"isInline\", \"spacing\", \"children\", \"as\"]);\n  let {\n    boxProps: y,\n    Element: x\n  } = g(a(i({}, n), {\n    as: p || be\n  }));\n  return _.createElement(k, a(i({}, y), {\n    as: x,\n    flexDirection: e,\n    alignItems: t,\n    isInline: o,\n    className: y.className,\n    gap: r,\n    ref: l\n  }), s);\n}\nee.displayName = \"Stack\";\nvar te = _.forwardRef(ee);\nfunction oe() {\n  return {\n    screenReaderOnly: css$1({\n      position: \"absolute\",\n      width: \"1px\",\n      height: \"1px\",\n      padding: 0,\n      margin: \"-1px\",\n      overflow: \"hidden\",\n      clip: \"rect(0, 0, 0, 0)\",\n      border: 0\n    })\n  };\n}\nvar re = p => {\n  var n = p,\n    {\n      children: e,\n      className: t,\n      testId: o = \"cf-ui-ScreenReaderOnly\",\n      as: r = \"div\"\n    } = n,\n    s = c(n, [\"children\", \"className\", \"testId\", \"as\"]);\n  let l = oe();\n  return ___default.createElement(r, a(i({}, s), {\n    \"data-test-id\": o,\n    className: cx(l.screenReaderOnly, t)\n  }), e);\n};\nfunction ne(e, t) {\n  return useMemo(() => e || [t || \"id\", Math.round(Math.random() * 1e4)].join(\"_\"), []);\n}\nfunction ae(_ref2) {\n  let {\n    isOpen: e,\n    defaultIsOpen: t,\n    onOpen: o,\n    onClose: r\n  } = _ref2;\n  let [s, p] = useState(t || !1),\n    n = e !== void 0,\n    l = n ? e : s,\n    d = useCallback(() => {\n      n || p(!1), r == null || r();\n    }, [n, r]),\n    f = useCallback(() => {\n      n || p(!0), o == null || o();\n    }, [n, o]);\n  return {\n    isOpen: l,\n    isControlled: n,\n    handleClose: d,\n    handleOpen: f\n  };\n}\nfunction Be() {\n  for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n    e[_key] = arguments[_key];\n  }\n  return t => {\n    e.forEach(o => {\n      typeof o == \"function\" ? o(t) : o != null && (o.current = t);\n    });\n  };\n}\nvar Le = _ref3 => {\n  let {\n    status: e\n  } = _ref3;\n  switch (e) {\n    case \"published\":\n      return {\n        color: P.colorGreenBase,\n        backgroundColor: P.colorGreenLightest\n      };\n    case \"changed\":\n      return {\n        color: P.colorBlueBase,\n        backgroundColor: P.colorBlueLightest\n      };\n    case \"deleted\":\n    case \"archived\":\n      return {\n        color: P.colorRedBase,\n        backgroundColor: P.colorRedLightest\n      };\n    case \"draft\":\n      return {\n        color: P.colorOrangeDark,\n        backgroundColor: \"#ffefd5\"\n      };\n    case \"new\":\n      return {\n        color: P.colorWhite,\n        backgroundColor: P.colorPrimary\n      };\n    default:\n      return console.warn(`Unknown EntityStatus: ${e}`), {};\n  }\n};\nexport { q as Box, k as Flex, W as GlobalStyles, M as Grid, w as GridItem, re as ScreenReaderOnly, te as Stack, Le as getEntityStatusStyles, Be as mergeRefs, g as useBox, ae as useControllableState, ne as useId };","map":{"version":3,"names":["___default","useMemo","useState","useCallback","css","Global","P","cx","css$1","le","Object","defineProperty","me","defineProperties","ce","getOwnPropertyDescriptors","A","getOwnPropertySymbols","v","prototype","hasOwnProperty","j","propertyIsEnumerable","X","e","t","o","enumerable","configurable","writable","value","i","call","a","c","r","indexOf","fe","W","_ref","withNormalize","styles","_","createElement","gray800","fontStackPrimary","fontSizeM","lineHeightM","fontStackMonospace"],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/GlobalStyles/GlobalStyles.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/Flex/Flex.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/Box/Box.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/utils/getSpacingStyles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/Grid/Grid.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/Grid/GridItem/GridItem.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/Grid/CompoundGrid.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/Stack/Stack.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/ScreenReaderOnly/ScreenReaderOnly.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/ScreenReaderOnly/ScreenReaderOnly.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/hooks/useId.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/hooks/useControllableState.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/utils/mergeRefs.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-core/src/utils/getEntityStatusStyles.ts"],"sourcesContent":["import * as React from 'react';\nimport { Global, css, SerializedStyles } from '@emotion/core';\nimport tokens from '@contentful/f36-tokens';\n\nconst cssReset = css`\n  /* Remove default margin */\n  /* Button has default margin in some browsers, like safari */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  p,\n  figure,\n  blockquote,\n  dl,\n  dd,\n  button {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n  ul[role='list'],\n  ol[role='list'] {\n    list-style: none;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n  }\n\n  /* Set core body defaults */\n  body {\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n  }\n\n  /* A elements that don't have a class get default styles */\n  a:not([class]) {\n    text-decoration-skip-ink: auto;\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for inputs and buttons */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Remove all animations and transitions for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n\nexport const GlobalStyles = ({\n  withNormalize = true,\n  styles,\n}: {\n  /**\n   * Determines if CSS reset should be used\n   *\n   * @default true\n   */\n  withNormalize?: boolean;\n  /**\n   * Extend global styles\n   *\n   * @default undefined\n   */\n  styles?: SerializedStyles;\n}) => {\n  return (\n    <Global\n      styles={css`\n        ${withNormalize ? cssReset : undefined};\n        html {\n          border: 0;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        body {\n          color: ${tokens.gray800};\n          font-family: ${tokens.fontStackPrimary};\n          font-size: ${tokens.fontSizeM};\n          line-height: ${tokens.lineHeightM};\n        }\n\n        code {\n          font-family: ${tokens.fontStackMonospace};\n        }\n\n        fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n        }\n\n        *,\n        *::after,\n        *::before {\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          box-sizing: inherit;\n        }\n\n        ${styles};\n      `}\n    />\n  );\n};\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport type * as CSS from 'csstype';\nimport tokens from '@contentful/f36-tokens';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type { MarginProps, PaddingProps, CommonProps, Spacing } from '../types';\n\nexport interface FlexInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * Sets width: 100% */\n  fullWidth?: boolean;\n  /**\n   * Sets height: 100% */\n  fullHeight?: boolean;\n\n  /**\n   * Sets display: inline-flex */\n  isInline?: boolean;\n\n  /**\n   * A shorthand property for flex-grow, flex-shrink, flex-basis\n   */\n  flex?: CSS.Property.Flex;\n  /**\n   * Defines the initial size of a flexbox item.\n   * */\n  flexBasis?: CSS.Property.FlexBasis;\n  /**\n   * Defines how much a flexbox item should shrink if there's not enough space available. */\n  flexShrink?: CSS.Property.FlexShrink;\n  /**\n   * Defines if flexbox items appear on a single line or on multiple lines within a flexbox container. */\n  flexWrap?: CSS.Property.FlexWrap;\n  /**\n   * Defines how flexbox items are ordered within a flexbox container. */\n  flexDirection?: CSS.Property.FlexDirection;\n  /**\n   * Defines how much a flexbox item should grow if there's space available. */\n  flexGrow?: CSS.Property.FlexGrow;\n  /**\n   * Defines a gap between flexbox items. */\n  gap?: Spacing | string;\n  /**\n   * Defines how flexbox/grid items are aligned according to the main axis, within a flexbox/grid container. */\n  justifyContent?: CSS.Property.JustifyContent;\n  /**\n   * Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis. */\n  justifyItems?: CSS.Property.JustifyContent;\n  /**\n   * Sets the way a box is justified inside its alignment container along the appropriate axis. */\n  justifySelf?: CSS.Property.JustifySelf;\n  /**\n   * Defines how flexbox items are aligned according to the cross axis, within a line of a flexbox container.\n   */\n  alignItems?: CSS.Property.AlignItems;\n  /**\n   * Works like align-items, but applies only to a single flexbox item, instead of all of them.\n   */\n  alignSelf?: CSS.Property.AlignItems;\n  /**\n   * Defines how each line is aligned within a flexbox/grid container.\n   */\n  alignContent?: CSS.Property.AlignContent;\n  /**\n   * Defines the order of a flexbox item\n   */\n  order?: CSS.Property.Order;\n}\n\nexport type FlexProps<E extends React.ElementType = typeof FLEX_DEFAULT_TAG> =\n  PolymorphicProps<FlexInternalProps, E>;\n\nconst FLEX_DEFAULT_TAG = 'div';\n\nfunction _Flex<E extends React.ElementType = typeof FLEX_DEFAULT_TAG>(\n  {\n    isInline,\n    alignItems,\n    alignSelf,\n    alignContent,\n    flex,\n    flexBasis,\n    flexShrink,\n    flexDirection,\n    flexGrow,\n    flexWrap,\n    fullHeight,\n    fullWidth,\n    gap,\n    justifyContent,\n    justifyItems,\n    justifySelf,\n    order,\n    children,\n    as,\n    ...otherProps\n  }: FlexProps<E>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- We want to support all element types\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || FLEX_DEFAULT_TAG,\n  });\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          display: isInline ? 'inline-flex' : 'flex',\n          width: fullWidth ? '100%' : undefined,\n          height: fullHeight ? '100%' : undefined,\n          flex,\n          flexBasis,\n          flexShrink,\n          flexDirection,\n          gap: tokens[gap] ?? gap,\n          justifyContent,\n          justifyItems,\n          justifySelf,\n          alignItems,\n          alignSelf,\n          alignContent,\n          order,\n          flexWrap,\n          flexGrow,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_Flex.displayName = 'Flex';\n\nexport const Flex: PolymorphicComponent<\n  ExpandProps<FlexInternalProps>,\n  typeof FLEX_DEFAULT_TAG\n> = React.forwardRef(_Flex);\n","import * as React from 'react';\nimport * as CSS from 'csstype';\nimport { css, cx } from 'emotion';\nimport type { MarginProps, PaddingProps, CommonProps } from '../types';\nimport { getSpacingStyles } from '../utils/getSpacingStyles';\n\nconst BOX_DEFAULT_TAG: React.ElementType = 'div';\n\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '../Primitive/Primitive';\n\nexport interface BoxInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Sets the display behavior of the element\n   */\n  display?: CSS.Property.Display;\n  children?: React.ReactNode;\n  as?: React.ElementType<any>;\n}\n\nexport type BoxProps<E extends React.ElementType = typeof BOX_DEFAULT_TAG> =\n  PolymorphicProps<BoxInternalProps, E>;\n\nexport function useBox<E extends React.ElementType = typeof BOX_DEFAULT_TAG>(\n  props: BoxProps<E>,\n) {\n  const {\n    display,\n    className,\n    margin,\n    marginBottom,\n    marginLeft,\n    marginRight,\n    marginTop,\n    padding,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    testId,\n    as: Element = BOX_DEFAULT_TAG,\n    ...otherProps\n  } = props;\n  const boxProps = {\n    className: cx(\n      css({\n        display,\n      }),\n      css({\n        ...getSpacingStyles({\n          margin,\n          marginBottom,\n          marginLeft,\n          marginRight,\n          marginTop,\n          padding,\n          paddingBottom,\n          paddingLeft,\n          paddingRight,\n          paddingTop,\n        }),\n      }),\n      className,\n    ),\n    ['data-test-id']: testId,\n    ...otherProps,\n  };\n\n  return {\n    boxProps: boxProps,\n    Element,\n  };\n}\n\nfunction _Box<E extends React.ElementType = typeof BOX_DEFAULT_TAG>(\n  props: BoxProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<E>(props);\n\n  return (\n    <Element {...boxProps} ref={ref}>\n      {props.children}\n    </Element>\n  );\n}\n\n_Box.displayName = 'Box';\n\nexport const Box: PolymorphicComponent<\n  ExpandProps<BoxInternalProps>,\n  typeof BOX_DEFAULT_TAG\n> = React.forwardRef(_Box);\n","import tokens from '@contentful/f36-tokens';\nimport type { MarginProps, PaddingProps, Spacing } from '../types';\n\nconst SpacingTable: { [key in Spacing]: string | number | undefined } = {\n  none: 0,\n  spacing2Xs: tokens.spacing2Xs,\n  spacingXs: tokens.spacingXs,\n  spacingS: tokens.spacingS,\n  spacingM: tokens.spacingM,\n  spacingL: tokens.spacingL,\n  spacingXl: tokens.spacingXl,\n  spacing2Xl: tokens.spacing2Xl,\n  spacing3Xl: tokens.spacing3Xl,\n  spacing4Xl: tokens.spacing4Xl,\n};\n\nexport function convertSpacingToToken(spacing: Spacing) {\n  return SpacingTable[spacing];\n}\n\nexport function getSpacingStyles(props: MarginProps & PaddingProps) {\n  return Object.assign(\n    {},\n    props.margin ? { margin: convertSpacingToToken(props.margin) } : null,\n    props.marginLeft\n      ? { marginLeft: convertSpacingToToken(props.marginLeft) }\n      : null,\n    props.marginRight\n      ? { marginRight: convertSpacingToToken(props.marginRight) }\n      : null,\n    props.marginTop\n      ? { marginTop: convertSpacingToToken(props.marginTop) }\n      : null,\n    props.marginBottom\n      ? { marginBottom: convertSpacingToToken(props.marginBottom) }\n      : null,\n    props.padding ? { padding: convertSpacingToToken(props.padding) } : null,\n    props.paddingLeft\n      ? { paddingLeft: convertSpacingToToken(props.paddingLeft) }\n      : null,\n    props.paddingRight\n      ? { paddingRight: convertSpacingToToken(props.paddingRight) }\n      : null,\n    props.paddingTop\n      ? { paddingTop: convertSpacingToToken(props.paddingTop) }\n      : null,\n    props.paddingBottom\n      ? { paddingBottom: convertSpacingToToken(props.paddingBottom) }\n      : null,\n  );\n}\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport type * as CSS from 'csstype';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '../Primitive/Primitive';\nimport type { MarginProps, PaddingProps, CommonProps, Spacing } from '../types';\nimport { useBox } from '../Box';\nimport { convertSpacingToToken } from '../utils/getSpacingStyles';\n\nexport interface GridInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * Defines how many columns, default is `auto` */\n  columns?: number | CSS.Property.GridTemplateColumns;\n  /**\n   * Defines how many rows, default is `auto` */\n  rows?: number | CSS.Property.GridTemplateColumns;\n  /**\n   * Spaces between rows, corresponds to of spacing tokens values, default is none */\n  rowGap?: Spacing;\n  /**\n   * One of Spacing tokens values, default is 0 */\n  columnGap?: Spacing;\n  /**\n   * One of grid-auto-flow css values */\n  flow?: CSS.Property.GridAutoFlow;\n  /**\n   * Sets display:inline-grid */\n  isInline?: boolean;\n  /**\n   * One of justify-content css values */\n  justifyContent?: CSS.Property.JustifyContent;\n  /**\n   * One of justify-content css values */\n  alignContent?: CSS.Property.AlignContent;\n}\n\nconst GRID_DEFAULT_TAG = 'div';\n\nexport type GridProps<E extends React.ElementType = typeof GRID_DEFAULT_TAG> =\n  PolymorphicProps<GridInternalProps, E>;\n\nfunction _Grid<E extends React.ElementType = typeof GRID_DEFAULT_TAG>(\n  {\n    alignContent,\n    children,\n    columnGap = 'spacingM',\n    columns = 'auto',\n    flow,\n    isInline,\n    justifyContent,\n    rowGap = 'none',\n    rows = 'auto',\n    as,\n    ...otherProps\n  }: GridProps<E>,\n  ref: React.Ref<any>,\n) {\n  const handleGridTemplate = (value?: string | number) => {\n    if (typeof value === 'number') {\n      return `repeat(${value}, minmax(0, 1fr))`;\n    }\n    return value;\n  };\n\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || GRID_DEFAULT_TAG,\n  });\n\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          display: isInline ? 'inline-grid' : 'grid',\n          gridTemplateColumns: handleGridTemplate(columns),\n          gridTemplateRows: handleGridTemplate(rows),\n          flow,\n          justifyContent,\n          alignContent,\n          columnGap: convertSpacingToToken(columnGap) ?? 0,\n          rowGap: convertSpacingToToken(rowGap) ?? 0,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_Grid.displayName = 'Grid';\n\nexport const Grid: PolymorphicComponent<\n  ExpandProps<GridInternalProps>,\n  typeof GRID_DEFAULT_TAG\n> = React.forwardRef(_Grid);\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport type * as CSS from 'csstype';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n} from '../../Primitive/Primitive';\nimport { useBox } from '../../Box';\nimport type { MarginProps, PaddingProps, CommonProps } from '../../types';\n\nconst GRID_ITEM_DEFAULT_TAG = 'div';\n\nexport interface GridItemInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * one of grid-column-start css values */\n  columnStart?: CSS.Property.GridColumnStart;\n  /**\n   * one of grid-column-end css values */\n  columnEnd?: CSS.Property.GridColumnEnd;\n  /**\n   * one of grid-column-start css values */\n  rowStart?: CSS.Property.GridRowStart;\n  /**\n   * one of grid-row-end css values */\n  rowEnd?: CSS.Property.GridRowEnd;\n  /**\n   * one of grid-area css values */\n  area?: CSS.Property.GridArea;\n  /**\n   * order css property */\n  order?: number;\n}\n\nexport type GridItemProps<\n  E extends React.ElementType = typeof GRID_ITEM_DEFAULT_TAG,\n> = PolymorphicProps<GridItemInternalProps, E>;\n\nfunction _GridItem<E extends React.ElementType = typeof GRID_ITEM_DEFAULT_TAG>(\n  {\n    children,\n    columnStart,\n    columnEnd,\n    rowStart,\n    rowEnd,\n    area,\n    order,\n    ...otherProps\n  }: GridItemProps<E>,\n  ref: React.Ref<any>,\n) {\n  const calculatedArea = area\n    ? area\n    : [\n        rowStart || 'auto',\n        columnStart || 'auto',\n        rowEnd || 'auto',\n        columnEnd || 'auto',\n      ].join(' / ');\n\n  const { boxProps, Element } = useBox(otherProps);\n\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          gridArea: calculatedArea,\n          order,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_GridItem.displayName = 'GridItem';\n\nexport const GridItem: PolymorphicComponent<\n  GridItemInternalProps,\n  typeof GRID_ITEM_DEFAULT_TAG\n> = React.forwardRef(_GridItem);\n","import { Grid as OriginalGrid } from './Grid';\nimport { GridItem } from './GridItem/GridItem';\n\ntype CompoundGrid = typeof OriginalGrid & {\n  Item: typeof GridItem;\n};\n\nexport const Grid = OriginalGrid as CompoundGrid;\nGrid.Item = GridItem;\n","import * as React from 'react';\n\nimport {\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type { Spacing } from '../types';\nimport { Flex, type FlexInternalProps } from '../Flex/Flex';\n\nexport interface StackInternalProps\n  extends Omit<FlexInternalProps, 'flexDirection' | 'gap'> {\n  /**\n   * Defines how flexbox items are ordered within a flexbox container. */\n  flexDirection?: 'row' | 'column';\n  /**\n   * The space between each stack item\n   */\n  spacing?: Spacing;\n}\n\nexport type StackProps<E extends React.ElementType = typeof STACK_DEFAULT_TAG> =\n  PolymorphicProps<StackInternalProps, E>;\n\nconst STACK_DEFAULT_TAG = 'div';\n\nfunction _Stack<E extends React.ElementType = typeof STACK_DEFAULT_TAG>(\n  {\n    flexDirection = 'row',\n    alignItems = 'center',\n    isInline = false,\n    spacing = 'spacingM',\n    children,\n    as,\n    ...otherProps\n  }: StackProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || STACK_DEFAULT_TAG,\n  });\n  return (\n    <Flex\n      {...boxProps}\n      as={Element}\n      flexDirection={flexDirection}\n      alignItems={alignItems}\n      isInline={isInline}\n      className={boxProps.className}\n      gap={spacing}\n      ref={ref}\n    >\n      {children}\n    </Flex>\n  );\n}\n\n_Stack.displayName = 'Stack';\n\nexport const Stack: PolymorphicComponent<\n  ExpandProps<StackInternalProps>,\n  typeof STACK_DEFAULT_TAG\n> = React.forwardRef(_Stack);\n","import { cx } from 'emotion';\nimport React from 'react';\nimport { getStyles } from './ScreenReaderOnly.styles';\nimport type { CommonProps } from '../types';\n\nexport interface ScreenReaderOnlyProps extends CommonProps {\n  children?: React.ReactNode;\n  as?: 'div' | 'span';\n}\n\nexport const ScreenReaderOnly = ({\n  children,\n  className,\n  testId = 'cf-ui-ScreenReaderOnly',\n  as = 'div',\n  ...otherProps\n}: ScreenReaderOnlyProps) => {\n  const styles = getStyles();\n\n  const Element: React.ElementType = as;\n\n  return (\n    <Element\n      {...otherProps}\n      data-test-id={testId}\n      className={cx(styles.screenReaderOnly, className)}\n    >\n      {children}\n    </Element>\n  );\n};\n","import { css } from 'emotion';\n\nexport function getStyles() {\n  return {\n    screenReaderOnly: css({\n      position: 'absolute',\n      width: '1px',\n      height: '1px',\n      padding: 0,\n      margin: '-1px',\n      overflow: 'hidden',\n      clip: 'rect(0, 0, 0, 0)',\n      border: 0,\n    }),\n  };\n}\n","import { useMemo } from 'react';\n\n/**\n * useId hook provides unique ids for react elements.\n *\n * @param id - an id, provided to a component's props. Can be undefined.\n * @param modifier - a descriptive string, to make ids more readable.\n * @returns a unique id\n */\nexport function useId(id?: string, modifier?: string): string {\n  return useMemo(\n    () => id || [modifier || 'id', Math.round(Math.random() * 10000)].join('_'),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n}\n","import { useState, useCallback } from 'react';\n\nexport type UseControllableStateProps = {\n  isOpen: boolean;\n  defaultIsOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n};\n\n/**\n * Hook that manages the controlled and un-controlled state\n */\nexport function useControllableState({\n  isOpen,\n  defaultIsOpen,\n  onOpen,\n  onClose,\n}: UseControllableStateProps) {\n  const [isOpenState, setIsOpen] = useState(defaultIsOpen || false);\n\n  const isControlled = isOpen !== undefined;\n  const isOpenValue = isControlled ? isOpen : isOpenState;\n\n  const handleClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClose?.();\n  }, [isControlled, onClose]);\n\n  const handleOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpen?.();\n  }, [isControlled, onOpen]);\n\n  return { isOpen: isOpenValue, isControlled, handleClose, handleOpen };\n}\n","import React from 'react';\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>;\n\nexport function mergeRefs<T>(\n  ...refs: Array<ReactRef<T> | undefined>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n","import tokens from '@contentful/f36-tokens';\n\nimport type { EntityStatus } from '../types';\n\nexport const getEntityStatusStyles = ({ status }: { status: EntityStatus }) => {\n  switch (status) {\n    case 'published':\n      return {\n        color: tokens.colorGreenBase,\n        backgroundColor: tokens.colorGreenLightest,\n      };\n    case 'changed':\n      return {\n        color: tokens.colorBlueBase,\n        backgroundColor: tokens.colorBlueLightest,\n      };\n    case 'deleted':\n    case 'archived':\n      return {\n        color: tokens.colorRedBase,\n        backgroundColor: tokens.colorRedLightest,\n      };\n    case 'draft':\n      return {\n        color: tokens.colorOrangeDark,\n        backgroundColor:\n          '#ffefd5' /* temporary hardcoded value until palette improvements */,\n      };\n    case 'new':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.colorPrimary,\n      };\n    default:\n      console.warn(`Unknown EntityStatus: ${status}`);\n      return {};\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}