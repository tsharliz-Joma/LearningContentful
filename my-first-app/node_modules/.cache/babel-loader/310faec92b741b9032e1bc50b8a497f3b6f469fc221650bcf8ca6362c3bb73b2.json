{"ast":null,"code":"import H, { useEffect } from 'react';\nimport f from '@contentful/f36-tokens';\nimport { cx, css } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nvar O = Object.defineProperty,\n  Y = Object.defineProperties;\nvar v = Object.getOwnPropertyDescriptors;\nvar g = Object.getOwnPropertySymbols;\nvar h = Object.prototype.hasOwnProperty,\n  E = Object.prototype.propertyIsEnumerable;\nvar x = (e, o, t) => o in e ? O(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  p = (e, o) => {\n    for (var t in o || (o = {})) h.call(o, t) && x(e, t, o[t]);\n    if (g) for (var t of g(o)) E.call(o, t) && x(e, t, o[t]);\n    return e;\n  },\n  a = (e, o) => Y(e, v(o));\nvar i = (e, o) => {\n  var t = {};\n  for (var r in e) h.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && g) for (var r of g(e)) o.indexOf(r) < 0 && E.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar J = \"span\";\nfunction K() {\n  return css({\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    maxWidth: \"100%\"\n  });\n}\nfunction Q() {\n  return css({\n    wordBreak: \"break-word\"\n  });\n}\nfunction S(pe, X) {\n  var P = pe,\n    {\n      fontSize: e = \"fontSizeM\",\n      fontStack: o = \"fontStackPrimary\",\n      fontWeight: t = \"fontWeightNormal\",\n      fontColor: r = \"gray800\",\n      lineHeight: m = \"lineHeightM\",\n      children: n,\n      isTruncated: l,\n      isWordBreak: d,\n      as: c,\n      className: W,\n      margin: M = \"none\"\n    } = P,\n    z = i(P, [\"fontSize\", \"fontStack\", \"fontWeight\", \"fontColor\", \"lineHeight\", \"children\", \"isTruncated\", \"isWordBreak\", \"as\", \"className\", \"margin\"]);\n  let w = c || J;\n  return H.createElement(Box, a(p({}, z), {\n    as: w,\n    className: cx(css({\n      padding: 0,\n      fontFamily: f[o],\n      fontWeight: f[t],\n      color: f[r],\n      fontSize: f[e],\n      lineHeight: f[m]\n    }), l ? K() : null, d ? Q() : null, W),\n    margin: M,\n    ref: X\n  }), n);\n}\nS.displayName = \"Text\";\nvar s = H.forwardRef(S);\nvar V = \"h1\";\nfunction A(m, r) {\n  var n = m,\n    {\n      children: e,\n      testId: o = \"cf-ui-heading\"\n    } = n,\n    t = i(n, [\"children\", \"testId\"]);\n  return H.createElement(s, a(p({\n    as: V,\n    testId: o,\n    marginBottom: \"spacingM\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\",\n    fontSize: \"fontSizeXl\",\n    lineHeight: \"lineHeightXl\"\n  }, t), {\n    ref: r\n  }), e);\n}\nA.displayName = \"Heading\";\nvar D = H.forwardRef(A);\nvar Z = \"h3\";\nfunction I(m, r) {\n  var n = m,\n    {\n      children: e,\n      testId: o = \"cf-ui-subheading\"\n    } = n,\n    t = i(n, [\"children\", \"testId\"]);\n  return H.createElement(s, a(p({\n    as: Z,\n    testId: o,\n    marginBottom: \"spacingM\",\n    fontSize: \"fontSizeL\",\n    lineHeight: \"lineHeightL\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\"\n  }, t), {\n    ref: r\n  }), e);\n}\nI.displayName = \"Subheading\";\nvar R = H.forwardRef(I);\nvar C = e => (useEffect(() => {\n  console.warn(\"Forma 36: Typography component is deprecated. You can safely remove it from your components.\");\n}, []), H.createElement(H.Fragment, null, e.children));\nC.displayName = \"Typography\";\nvar ee = \"h2\";\nfunction G(n, m) {\n  var l = n,\n    {\n      children: e,\n      size: o = \"default\",\n      testId: t = \"cf-ui-display-text\"\n    } = l,\n    r = i(l, [\"children\", \"size\", \"testId\"]);\n  let d = \"fontSize2Xl\",\n    c = \"lineHeight2Xl\";\n  return o === \"large\" && (d = \"fontSize3Xl\", c = \"lineHeight3Xl\"), H.createElement(s, a(p({\n    as: ee,\n    testId: t,\n    marginBottom: o === \"default\" ? \"spacingL\" : \"spacingXl\",\n    fontSize: d,\n    lineHeight: c,\n    fontColor: \"gray900\",\n    fontWeight: \"fontWeightDemiBold\"\n  }, r), {\n    ref: m\n  }), e);\n}\nG.displayName = \"DisplayText\";\nvar F = H.forwardRef(G);\nvar ne = \"h2\";\nfunction b(n, m) {\n  var l = n,\n    {\n      children: e,\n      className: o,\n      testId: t = \"cf-ui-section-heading\"\n    } = l,\n    r = i(l, [\"children\", \"className\", \"testId\"]);\n  return H.createElement(s, a(p({\n    as: ne,\n    testId: t,\n    marginBottom: \"spacingL\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\",\n    fontSize: \"fontSizeS\",\n    lineHeight: \"lineHeightS\",\n    className: cx(css({\n      letterSpacing: f.letterSpacingWide,\n      textTransform: \"uppercase\"\n    }), o)\n  }, r), {\n    ref: m\n  }), e);\n}\nb.displayName = \"SectionHeading\";\nvar U = H.forwardRef(b);\nvar y = H.forwardRef((m, r) => {\n  var n = m,\n    {\n      children: e,\n      testId: o = \"cf-ui-paragraph\"\n    } = n,\n    t = i(n, [\"children\", \"testId\"]);\n  return H.createElement(s, a(p({\n    as: \"p\",\n    testId: o,\n    marginBottom: \"spacingM\",\n    lineHeight: \"lineHeightM\"\n  }, t), {\n    ref: r\n  }), e);\n});\ny.displayName = \"Paragraph\";\nexport { F as DisplayText, D as Heading, y as Paragraph, U as SectionHeading, R as Subheading, s as Text, C as Typography };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/Heading/Heading.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/Text/Text.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/Subheading/Subheading.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/Typography.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/DisplayText/DisplayText.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/SectionHeading/SectionHeading.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-typography/src/Paragraph/Paragraph.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\n\nconst HEADING_DEFAULT_TAG = 'h1';\n\nexport type HeadingElement = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nexport interface HeadingInternalProps extends CommonProps, MarginProps {\n  as?: HeadingElement;\n  children?: React.ReactNode;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type HeadingProps<\n  E extends React.ElementType = typeof HEADING_DEFAULT_TAG,\n> = PolymorphicProps<HeadingInternalProps, E>;\n\nfunction _Heading<E extends React.ElementType = typeof HEADING_DEFAULT_TAG>(\n  { children, testId = 'cf-ui-heading', ...otherProps }: HeadingProps<E>,\n  ref: React.Ref<any>,\n) {\n  return (\n    <Text\n      as={HEADING_DEFAULT_TAG}\n      testId={testId}\n      marginBottom=\"spacingM\"\n      fontWeight=\"fontWeightDemiBold\"\n      fontColor=\"gray900\"\n      fontSize=\"fontSizeXl\"\n      lineHeight=\"lineHeightXl\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_Heading.displayName = 'Heading';\n\nexport const Heading: PolymorphicComponent<\n  ExpandProps<HeadingInternalProps>,\n  typeof HEADING_DEFAULT_TAG\n> = React.forwardRef(_Heading);\n","import React from 'react';\nimport tokens, {\n  FontSizeTokens,\n  LineHeightTokens,\n  FontWeightTokens,\n  FontStackTokens,\n  ColorTokens,\n} from '@contentful/f36-tokens';\nimport { css, cx } from 'emotion';\nimport {\n  Box,\n  type PolymorphicComponent,\n  type CommonProps,\n  type MarginProps,\n  type PolymorphicProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nexport interface TextInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  fontSize?: FontSizeTokens;\n  lineHeight?: LineHeightTokens;\n  fontStack?: FontStackTokens;\n  fontWeight?: FontWeightTokens;\n  fontColor?: ColorTokens;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nconst TEXT_DEFAULT_TAG = 'span';\n\nfunction truncatedStyle() {\n  return css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    maxWidth: '100%',\n  });\n}\n\nfunction wordBreakStyle() {\n  return css({\n    wordBreak: 'break-word',\n  });\n}\n\nexport type TextProps<E extends React.ElementType = typeof TEXT_DEFAULT_TAG> =\n  PolymorphicProps<TextInternalProps, E>;\n\nfunction _Text<E extends React.ElementType = typeof TEXT_DEFAULT_TAG>(\n  {\n    fontSize = 'fontSizeM',\n    fontStack = 'fontStackPrimary',\n    fontWeight = 'fontWeightNormal',\n    fontColor = 'gray800',\n    lineHeight = 'lineHeightM',\n    children,\n    isTruncated,\n    isWordBreak,\n    as,\n    className,\n    margin = 'none',\n    ...otherProps\n  }: TextProps<E>,\n  ref: React.Ref<any>,\n) {\n  const Element: React.ElementType = as || TEXT_DEFAULT_TAG;\n\n  return (\n    <Box\n      {...otherProps}\n      as={Element}\n      className={cx(\n        css({\n          padding: 0,\n          fontFamily: tokens[fontStack],\n          fontWeight: tokens[fontWeight],\n          color: tokens[fontColor],\n          fontSize: tokens[fontSize],\n          lineHeight: tokens[lineHeight],\n        }),\n        isTruncated ? truncatedStyle() : null,\n        isWordBreak ? wordBreakStyle() : null,\n        className,\n      )}\n      margin={margin}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n}\n\n_Text.displayName = 'Text';\n\nexport const Text: PolymorphicComponent<\n  ExpandProps<TextInternalProps>,\n  typeof TEXT_DEFAULT_TAG\n> = React.forwardRef(_Text);\n","import React from 'react';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport type { HeadingElement } from '../Heading';\nimport { Text } from '../Text';\n\nconst SUBHEADING_DEFAULT_TAG = 'h3';\n\nexport interface SubheadingInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  as?: HeadingElement;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type SubheadingProps<\n  E extends React.ElementType = typeof SUBHEADING_DEFAULT_TAG,\n> = PolymorphicProps<SubheadingInternalProps, E>;\n\nfunction _Subheading<\n  E extends React.ElementType = typeof SUBHEADING_DEFAULT_TAG,\n>(\n  { children, testId = 'cf-ui-subheading', ...otherProps }: SubheadingProps<E>,\n  ref: React.Ref<any>,\n) {\n  return (\n    <Text\n      as={SUBHEADING_DEFAULT_TAG}\n      testId={testId}\n      marginBottom=\"spacingM\"\n      fontSize=\"fontSizeL\"\n      lineHeight=\"lineHeightL\"\n      fontWeight=\"fontWeightDemiBold\"\n      fontColor=\"gray900\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_Subheading.displayName = 'Subheading';\n\nexport const Subheading: PolymorphicComponent<\n  ExpandProps<SubheadingInternalProps>,\n  typeof SUBHEADING_DEFAULT_TAG\n> = React.forwardRef(_Subheading);\n","import React, { useEffect } from 'react';\n\nexport interface TypographyProps {\n  children?: React.ReactNode;\n}\n\n/**\n * @deprecated\n */\nexport const Typography = (props: TypographyProps) => {\n  useEffect(() => {\n    console.warn(\n      'Forma 36: Typography component is deprecated. You can safely remove it from your components.',\n    );\n  }, []);\n  return <>{props.children}</>;\n};\n\nTypography.displayName = 'Typography';\n","import React from 'react';\nimport { FontSizeTokens, LineHeightTokens } from '@contentful/f36-tokens';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\nimport type { HeadingElement } from '../Heading';\n\nconst DISPLAY_TEXT_DEFAULT_TAG = 'h2';\n\nexport interface DisplayTextInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  size?: 'default' | 'large';\n  as?: HeadingElement;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type DisplayTextProps<\n  E extends React.ElementType = typeof DISPLAY_TEXT_DEFAULT_TAG,\n> = PolymorphicProps<DisplayTextInternalProps, E>;\n\nfunction _DisplayText<\n  E extends React.ElementType = typeof DISPLAY_TEXT_DEFAULT_TAG,\n>(\n  {\n    children,\n    size = 'default',\n    testId = 'cf-ui-display-text',\n    ...otherProps\n  }: DisplayTextProps<E>,\n  ref: React.Ref<any>,\n) {\n  let fontSize: FontSizeTokens = 'fontSize2Xl';\n  let lineHeight: LineHeightTokens = 'lineHeight2Xl';\n\n  if (size === 'large') {\n    fontSize = 'fontSize3Xl';\n    lineHeight = 'lineHeight3Xl';\n  }\n\n  return (\n    <Text\n      as={DISPLAY_TEXT_DEFAULT_TAG}\n      testId={testId}\n      marginBottom={size === 'default' ? 'spacingL' : 'spacingXl'}\n      fontSize={fontSize}\n      lineHeight={lineHeight}\n      fontColor=\"gray900\"\n      fontWeight=\"fontWeightDemiBold\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_DisplayText.displayName = 'DisplayText';\n\nexport const DisplayText: PolymorphicComponent<\n  ExpandProps<DisplayTextInternalProps>,\n  typeof DISPLAY_TEXT_DEFAULT_TAG\n> = React.forwardRef(_DisplayText);\n","import React from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport { css, cx } from 'emotion';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport type { HeadingElement } from '../Heading';\nimport { Text } from '../Text';\n\nconst SECTION_HEADING_DEFAULT_TAG = 'h2';\n\nexport interface SectionHeadingInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  as?: HeadingElement;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type SectionHeadingProps<\n  E extends React.ElementType = typeof SECTION_HEADING_DEFAULT_TAG,\n> = PolymorphicProps<SectionHeadingInternalProps, E>;\n\nfunction _SectionHeading<\n  E extends React.ElementType = typeof SECTION_HEADING_DEFAULT_TAG,\n>(\n  {\n    children,\n    className,\n    testId = 'cf-ui-section-heading',\n    ...otherProps\n  }: SectionHeadingProps<E>,\n  ref: React.Ref<any>,\n) {\n  return (\n    <Text\n      as={SECTION_HEADING_DEFAULT_TAG}\n      testId={testId}\n      marginBottom=\"spacingL\"\n      fontWeight=\"fontWeightDemiBold\"\n      fontColor=\"gray900\"\n      fontSize=\"fontSizeS\"\n      lineHeight=\"lineHeightS\"\n      className={cx(\n        css({\n          letterSpacing: tokens.letterSpacingWide,\n          textTransform: 'uppercase',\n        }),\n        className,\n      )}\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_SectionHeading.displayName = 'SectionHeading';\n\nexport const SectionHeading: PolymorphicComponent<\n  ExpandProps<SectionHeadingInternalProps>,\n  typeof SECTION_HEADING_DEFAULT_TAG\n> = React.forwardRef(_SectionHeading);\n","import React from 'react';\nimport type {\n  PropsWithHTMLElement,\n  CommonProps,\n  MarginProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\n\nexport type ParagraphInternalProps = CommonProps &\n  MarginProps & {\n    children: React.ReactNode;\n    isTruncated?: boolean;\n    isWordBreak?: boolean;\n  };\n\nexport type ParagraphProps = PropsWithHTMLElement<ParagraphInternalProps, 'p'>;\n\nexport const Paragraph = React.forwardRef<\n  HTMLParagraphElement,\n  ExpandProps<ParagraphProps>\n>(({ children, testId = 'cf-ui-paragraph', ...otherProps }, ref) => {\n  return (\n    <Text\n      as=\"p\"\n      testId={testId}\n      marginBottom=\"spacingM\"\n      lineHeight=\"lineHeightM\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n});\n\nParagraph.displayName = 'Paragraph';\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}