{"ast":null,"code":"import g from 'react';\nimport { Box, useId, useControllableState } from '@contentful/f36-core';\nimport { cx, css } from 'emotion';\nimport n from '@contentful/f36-tokens';\nimport { Subheading } from '@contentful/f36-typography';\nimport { ChevronDownTrimmedIcon } from '@contentful/f36-icons';\nimport { Collapse } from '@contentful/f36-collapse';\nvar _ = Object.defineProperty,\n  j = Object.defineProperties;\nvar U = Object.getOwnPropertyDescriptors;\nvar y = Object.getOwnPropertySymbols;\nvar $ = Object.prototype.hasOwnProperty,\n  k = Object.prototype.propertyIsEnumerable;\nvar R = (o, e, r) => e in o ? _(o, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : o[e] = r,\n  a = (o, e) => {\n    for (var r in e || (e = {})) $.call(e, r) && R(o, r, e[r]);\n    if (y) for (var r of y(e)) k.call(e, r) && R(o, r, e[r]);\n    return o;\n  },\n  l = (o, e) => j(o, U(e));\nvar d = (o, e) => {\n  var r = {};\n  for (var t in o) $.call(o, t) && e.indexOf(t) < 0 && (r[t] = o[t]);\n  if (o != null && y) for (var t of y(o)) e.indexOf(t) < 0 && k.call(o, t) && (r[t] = o[t]);\n  return r;\n};\nvar w = _ref => {\n  let {\n    className: o\n  } = _ref;\n  return {\n    accordion: cx(css({\n      boxSizing: \"border-box\",\n      padding: \"0\",\n      margin: \"0\",\n      listStyle: \"none\",\n      \"&:first-child\": {\n        borderTop: `1px solid ${n.gray300}`\n      }\n    }), o)\n  };\n};\nvar K = (p, m) => {\n    var i = p,\n      {\n        align: o = \"end\",\n        children: e,\n        className: r,\n        testId: t = \"cf-ui-accordion\"\n      } = i,\n      s = d(i, [\"align\", \"children\", \"className\", \"testId\"]);\n    let x = w({\n      className: r\n    });\n    return g.createElement(Box, l(a({\n      as: \"ul\",\n      className: x.accordion,\n      testId: t\n    }, s), {\n      ref: m\n    }), g.Children.map(e, c => g.isValidElement(c) ? g.cloneElement(c, {\n      align: o\n    }) : c));\n  },\n  D = g.forwardRef(K);\nvar Q = _ref2 => {\n    let {\n      align: o\n    } = _ref2;\n    return cx(css({\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      border: \"0\",\n      margin: 0,\n      padding: n.spacingM,\n      backgroundColor: \"transparent\",\n      fontFamily: n.fontStackPrimary,\n      fontSize: n.fontSizeL,\n      fontWeight: n.fontWeightDemiBold,\n      lineHeight: n.lineHeightL,\n      color: n.gray800,\n      width: \"100%\",\n      minWidth: \"9px\",\n      cursor: \"pointer\",\n      transition: `background-color ${n.transitionDurationDefault} ${n.transitionEasingDefault},\n        box-shadow ${n.transitionDurationShort} ${n.transitionEasingDefault}`,\n      \"&:hover\": {\n        backgroundColor: n.gray100\n      },\n      \"&:focus\": {\n        backgroundColor: n.gray100,\n        borderRadius: n.borderRadiusMedium,\n        boxShadow: n.glowPrimary,\n        outline: \"none\"\n      },\n      \"&:focus:not(:focus-visible)\": {\n        backgroundColor: \"transparent\",\n        borderRadius: \"unset\",\n        boxShadow: \"unset\"\n      },\n      \"&:focus-visible\": {\n        backgroundColor: n.gray100,\n        borderRadius: n.borderRadiusMedium,\n        boxShadow: n.glowPrimary\n      }\n    }), o === \"end\" && css({\n      flexDirection: \"row-reverse\",\n      justifyContent: \"space-between\"\n    }));\n  },\n  Y = _ref3 => {\n    let {\n      align: o,\n      isExpanded: e\n    } = _ref3;\n    return cx(css({\n      transform: \"rotate(0deg)\",\n      transition: `transform ${n.transitionDurationDefault} ${n.transitionEasingDefault}`\n    }), o === \"end\" && css({\n      marginLeft: n.spacingM\n    }), o === \"start\" && css({\n      marginRight: n.spacingM\n    }), e && css({\n      transform: \"rotate(180deg)\"\n    }));\n  },\n  M = o => ({\n    accordionHeader: Q(o),\n    accordionHeaderIcon: Y(o)\n  });\nvar h = x => {\n  var c = x,\n    {\n      children: o,\n      onClick: e,\n      isExpanded: r = !1,\n      ariaId: t,\n      element: s = \"h2\",\n      align: m = \"end\",\n      testId: p = \"cf-ui-accordion-header\"\n    } = c,\n    i = d(c, [\"children\", \"onClick\", \"isExpanded\", \"ariaId\", \"element\", \"align\", \"testId\"]);\n  let u = M({\n    align: m,\n    isExpanded: r\n  });\n  return g.createElement(Subheading, l(a({}, i), {\n    testId: p,\n    marginBottom: \"none\",\n    as: s\n  }), g.createElement(\"button\", {\n    type: \"button\",\n    \"aria-expanded\": r,\n    \"aria-controls\": `accordion-panel--${t}`,\n    id: `accordion--${t}`,\n    className: u.accordionHeader,\n    onClick: e\n  }, g.createElement(ChevronDownTrimmedIcon, {\n    className: u.accordionHeaderIcon,\n    variant: \"secondary\"\n  }), o));\n};\nvar v = () => ({\n  accordionPanelContent: css({\n    width: \"100%\",\n    padding: `${n.spacingXs} ${n.spacingM} ${n.spacingM}`\n  })\n});\nvar E = m => {\n  var p = m,\n    {\n      children: o,\n      isExpanded: e = !1,\n      ariaId: r,\n      testId: t = \"cf-ui-accordion-panel\"\n    } = p,\n    s = d(p, [\"children\", \"isExpanded\", \"ariaId\", \"testId\"]);\n  let i = v();\n  return g.createElement(Collapse, a({\n    \"data-test-id\": t,\n    \"aria-labelledby\": `accordion--${r}`,\n    isExpanded: e\n  }, s), g.createElement(\"div\", {\n    className: i.accordionPanelContent\n  }, o));\n};\nvar O = _ref4 => {\n  let {\n    className: o\n  } = _ref4;\n  return {\n    accordionItem: cx(css({\n      padding: \"0\",\n      margin: \"0\",\n      borderBottom: `1px solid ${n.colorElementMid}`,\n      \"&:first-child\": {\n        borderTop: `1px solid ${n.colorElementMid}`\n      }\n    }), o)\n  };\n};\nvar so = (po, u) => {\n    var H = po,\n      {\n        title: o = \"Accordion Title\",\n        titleElement: e = \"h2\",\n        testId: r = \"cf-ui-accordion-item\",\n        onExpand: t,\n        onCollapse: s,\n        children: m,\n        align: p = \"end\",\n        className: i,\n        isExpanded: x\n      } = H,\n      c = d(H, [\"title\", \"titleElement\", \"testId\", \"onExpand\", \"onCollapse\", \"children\", \"align\", \"className\", \"isExpanded\"]);\n    let F = O({\n        className: i\n      }),\n      P = useId(),\n      {\n        isOpen: b,\n        handleOpen: z,\n        handleClose: W\n      } = useControllableState({\n        isOpen: x,\n        onOpen: t,\n        onClose: s\n      }),\n      V = () => {\n        b ? W() : z();\n      };\n    return g.createElement(Box, l(a({\n      as: \"li\",\n      className: F.accordionItem,\n      testId: `${r}-${P}`\n    }, c), {\n      ref: u\n    }), g.createElement(h, {\n      onClick: V,\n      isExpanded: b,\n      element: e,\n      ariaId: P,\n      align: p\n    }, o), g.createElement(E, {\n      ariaId: P,\n      isExpanded: b\n    }, m));\n  },\n  S = g.forwardRef(so);\nvar T = D;\nT.Item = S;\nexport { T as Accordion, h as AccordionHeader, S as AccordionItem, E as AccordionPanel };","map":{"version":3,"names":["Box","useId","useControllableState"],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/Accordion.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/Accordion.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/AccordionItem/AccordionItem.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/AccordionHeader/AccordionHeader.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/AccordionHeader/AccordionHeader.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/AccordionPanel/AccordionPanel.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/AccordionPanel/AccordionPanel.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/AccordionItem/AccordionItem.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-accordion/src/CompoundAccordion.tsx"],"sourcesContent":["import React from 'react';\nimport { Box, type CommonProps, type ExpandProps } from '@contentful/f36-core';\n\nimport { getAccordionStyles } from './Accordion.styles';\n\nexport interface AccordionProps extends CommonProps {\n  /**\n   * Specify the alignment of the chevron inside the accordion header\n   * @default end\n   */\n  align?: 'start' | 'end';\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n}\n\nconst _Accordion = (\n  {\n    align = 'end',\n    children,\n    className,\n    testId = 'cf-ui-accordion',\n    ...otherProps\n  }: ExpandProps<AccordionProps>,\n  ref: React.Ref<HTMLUListElement>,\n) => {\n  const styles = getAccordionStyles({ className });\n  return (\n    <Box\n      as=\"ul\"\n      className={styles.accordion}\n      testId={testId}\n      {...otherProps}\n      ref={ref}\n    >\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child)) {\n          return React.cloneElement(child, {\n            align,\n          });\n        }\n        return child;\n      })}\n    </Box>\n  );\n};\n\nexport const Accordion = React.forwardRef(_Accordion);\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAccordionStyles = ({ className }: { className?: string }) => ({\n  accordion: cx(\n    css({\n      boxSizing: 'border-box',\n      padding: '0',\n      margin: '0',\n      listStyle: 'none',\n      '&:first-child': {\n        borderTop: `1px solid ${tokens.gray300}`,\n      },\n    }),\n    className,\n  ),\n});\n","import React from 'react';\nimport type { HeadingElement } from '@contentful/f36-typography';\nimport {\n  useId,\n  Box,\n  useControllableState,\n  type CommonProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { AccordionHeader } from '../AccordionHeader/AccordionHeader';\nimport { AccordionPanel } from '../AccordionPanel/AccordionPanel';\nimport { getAccordionItemStyles } from './AccordionItem.styles';\n\nexport interface AccordionItemProps extends CommonProps {\n  /**\n   * The accordion title\n   */\n  title?: React.ReactNode;\n  /**\n   * The heading element that will be used by the AccordionHeader\n   */\n  titleElement?: HeadingElement;\n  /**\n   * The children of the AccordionItem are in fact the content of the accordion\n   */\n  children?: React.ReactNode;\n  /**\n   * A function to be called when the accordion item is opened\n   */\n  onExpand?: () => void;\n  /**\n   * A function to be called when the accordion item is closed\n   */\n  onCollapse?: () => void;\n  /**\n   * Specify the alignment of the chevron inside the accordion header\n   */\n  align?: 'start' | 'end';\n\n  /**\n   * By default, the AccordionItem is uncontrolled (manage it's expanded state by itself)\n   * But you can make it controlled by providing boolean\n   */\n  isExpanded?: boolean;\n}\n\nconst _AccordionItem = (\n  {\n    title = 'Accordion Title',\n    titleElement = 'h2',\n    testId = 'cf-ui-accordion-item',\n    onExpand,\n    onCollapse,\n    children,\n    align = 'end',\n    className,\n    isExpanded,\n    ...otherProps\n  }: ExpandProps<AccordionItemProps>,\n  ref: React.Ref<HTMLLIElement>,\n) => {\n  const styles = getAccordionItemStyles({ className });\n  const id = useId();\n  const { isOpen, handleOpen, handleClose } = useControllableState({\n    isOpen: isExpanded,\n    onOpen: onExpand,\n    onClose: onCollapse,\n  });\n\n  const handleOnClick = () => {\n    if (isOpen) {\n      handleClose();\n    } else {\n      handleOpen();\n    }\n  };\n\n  return (\n    <Box\n      as=\"li\"\n      className={styles.accordionItem}\n      testId={`${testId}-${id}`}\n      {...otherProps}\n      ref={ref}\n    >\n      <AccordionHeader\n        onClick={handleOnClick}\n        isExpanded={isOpen}\n        element={titleElement}\n        ariaId={id}\n        align={align}\n      >\n        {title}\n      </AccordionHeader>\n\n      <AccordionPanel ariaId={id} isExpanded={isOpen}>\n        {children}\n      </AccordionPanel>\n    </Box>\n  );\n};\n\nexport const AccordionItem = React.forwardRef(_AccordionItem);\n","import React from 'react';\nimport { Subheading, type HeadingElement } from '@contentful/f36-typography';\nimport { ChevronDownTrimmedIcon } from '@contentful/f36-icons';\nimport type { CommonProps } from '@contentful/f36-core';\n\nimport { getAccordionHeaderStyles } from './AccordionHeader.styles';\n\nexport interface AccordionHeaderProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * The function that will be called once the user clicks on the accordion title\n   */\n  onClick: VoidFunction;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * An unique id that is necessary for the aria roles and properties\n   */\n  ariaId: string;\n  /**\n   * The heading element that will be used by the Subheading component\n   */\n  element?: HeadingElement;\n  /**\n   * Specify the alignment of the chevron inside the accordion header\n   */\n  align?: 'start' | 'end';\n}\n\nexport const AccordionHeader = ({\n  children,\n  onClick,\n  isExpanded = false,\n  ariaId,\n  element = 'h2',\n  align = 'end',\n  testId = 'cf-ui-accordion-header',\n  ...rest\n}: AccordionHeaderProps) => {\n  const styles = getAccordionHeaderStyles({ align, isExpanded });\n\n  return (\n    <Subheading {...rest} testId={testId} marginBottom=\"none\" as={element}>\n      <button\n        type=\"button\"\n        aria-expanded={isExpanded}\n        aria-controls={`accordion-panel--${ariaId}`}\n        id={`accordion--${ariaId}`}\n        className={styles.accordionHeader}\n        onClick={onClick}\n      >\n        <ChevronDownTrimmedIcon\n          className={styles.accordionHeaderIcon}\n          variant=\"secondary\"\n        />\n        {children}\n      </button>\n    </Subheading>\n  );\n};\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\ntype StyleProps = {\n  align: 'start' | 'end';\n  isExpanded: boolean;\n};\n\nconst getHeaderStyles = ({ align }: StyleProps) =>\n  cx(\n    css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      border: '0',\n      margin: 0, // remove the default button margin in Safari.\n      padding: tokens.spacingM,\n      backgroundColor: 'transparent',\n      fontFamily: tokens.fontStackPrimary,\n      fontSize: tokens.fontSizeL,\n      fontWeight: tokens.fontWeightDemiBold,\n      lineHeight: tokens.lineHeightL,\n      color: tokens.gray800,\n      width: '100%',\n      minWidth: '9px',\n      cursor: 'pointer',\n      transition: `background-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n        box-shadow ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n      '&:hover': {\n        backgroundColor: tokens.gray100,\n      },\n      '&:focus': {\n        backgroundColor: tokens.gray100,\n        borderRadius: tokens.borderRadiusMedium,\n        boxShadow: tokens.glowPrimary,\n        outline: 'none',\n      },\n      '&:focus:not(:focus-visible)': {\n        backgroundColor: 'transparent',\n        borderRadius: 'unset',\n        boxShadow: 'unset',\n      },\n      '&:focus-visible': {\n        backgroundColor: tokens.gray100,\n        borderRadius: tokens.borderRadiusMedium,\n        boxShadow: tokens.glowPrimary,\n      },\n    }),\n    align === 'end' &&\n      css({\n        flexDirection: 'row-reverse',\n        justifyContent: 'space-between',\n      }),\n  );\n\nconst getIconStyles = ({ align, isExpanded }: StyleProps) =>\n  cx(\n    css({\n      transform: 'rotate(0deg)',\n      transition: `transform ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    }),\n    align === 'end' && css({ marginLeft: tokens.spacingM }),\n    align === 'start' && css({ marginRight: tokens.spacingM }),\n    isExpanded &&\n      css({\n        transform: 'rotate(180deg)',\n      }),\n  );\n\nexport const getAccordionHeaderStyles = (props: StyleProps) => ({\n  accordionHeader: getHeaderStyles(props),\n  accordionHeaderIcon: getIconStyles(props),\n});\n","import React, { FC } from 'react';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Collapse } from '@contentful/f36-collapse';\n\nimport { getAccordionPanelStyles } from './AccordionPanel.styles';\n\nexport interface AccordionPanelProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * An unique id that is necessary for the aria roles and properties\n   */\n  ariaId: string;\n}\n\nexport const AccordionPanel: FC<ExpandProps<AccordionPanelProps>> = ({\n  children,\n  isExpanded = false,\n  ariaId,\n  testId = 'cf-ui-accordion-panel',\n  ...otherProps\n}: AccordionPanelProps) => {\n  const styles = getAccordionPanelStyles();\n\n  return (\n    <Collapse\n      data-test-id={testId}\n      aria-labelledby={`accordion--${ariaId}`}\n      isExpanded={isExpanded}\n      {...otherProps}\n    >\n      <div className={styles.accordionPanelContent}>{children}</div>\n    </Collapse>\n  );\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAccordionPanelStyles = () => {\n  return {\n    accordionPanelContent: css({\n      width: '100%',\n      padding: `${tokens.spacingXs} ${tokens.spacingM} ${tokens.spacingM}`,\n    }),\n  };\n};\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAccordionItemStyles = ({\n  className,\n}: {\n  className?: string;\n}) => ({\n  accordionItem: cx(\n    css({\n      padding: '0',\n      margin: '0',\n      borderBottom: `1px solid ${tokens.colorElementMid}`,\n      '&:first-child': {\n        borderTop: `1px solid ${tokens.colorElementMid}`,\n      },\n    }),\n    className,\n  ),\n});\n","import { Accordion as OriginalAccordion } from './Accordion';\nimport { AccordionItem } from './AccordionItem/AccordionItem';\n\ntype CompoundAccordion = typeof OriginalAccordion & {\n  Item: typeof AccordionItem;\n};\n\nexport const Accordion = OriginalAccordion as CompoundAccordion;\nAccordion.Item = AccordionItem;\n"],"mappings":";AI0BiF,SAAAA,GAAA,EAAAC,KAAA,EAC5DC,oBAAO,8BAAkC"},"metadata":{},"sourceType":"module","externalDependencies":[]}