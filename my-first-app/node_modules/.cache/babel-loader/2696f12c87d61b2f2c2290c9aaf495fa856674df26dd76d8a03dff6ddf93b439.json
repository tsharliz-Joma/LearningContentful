{"ast":null,"code":"import n from 'react';\nimport { cx, css } from 'emotion';\nimport { Box, Flex } from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { ArchiveIcon, VideoIcon, SpreadsheetIcon, RichtextIcon, PresentationIcon, PlaintextIcon, PdfIcon, MarkupIcon, ImageIcon, CodeIllustrationIcon, AudioIcon } from '@contentful/f36-icons';\nimport g from '@contentful/f36-tokens';\nvar N = Object.defineProperty,\n  w = Object.defineProperties;\nvar B = Object.getOwnPropertyDescriptors;\nvar f = Object.getOwnPropertySymbols;\nvar I = Object.prototype.hasOwnProperty,\n  v = Object.prototype.propertyIsEnumerable;\nvar A = (t, e, s) => e in t ? N(t, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: s\n  }) : t[e] = s,\n  o = (t, e) => {\n    for (var s in e || (e = {})) I.call(e, s) && A(t, s, e[s]);\n    if (f) for (var s of f(e)) v.call(e, s) && A(t, s, e[s]);\n    return t;\n  },\n  P = (t, e) => w(t, B(e));\nvar d = (t, e) => {\n  var s = {};\n  for (var r in t) I.call(t, r) && e.indexOf(r) < 0 && (s[r] = t[r]);\n  if (t != null && f) for (var r of f(t)) e.indexOf(r) < 0 && v.call(t, r) && (s[r] = t[r]);\n  return s;\n};\nfunction T() {\n  return {\n    root: css({\n      display: \"inline-block\",\n      width: \"39px\",\n      height: \"39px\",\n      \"g, path\": {\n        fill: g.gray600\n      }\n    })\n  };\n}\nvar u = c => {\n  var m = c,\n    {\n      type: t = \"archive\",\n      className: e,\n      testId: s = \"cf-ui-asset-icon\"\n    } = m,\n    r = d(m, [\"type\", \"className\", \"testId\"]);\n  let y = T(),\n    i = P(o({}, r), {\n      testId: s,\n      className: cx(y.root, e)\n    });\n  switch (t) {\n    case \"audio\":\n      return n.createElement(AudioIcon, o({}, i));\n    case \"code\":\n      return n.createElement(CodeIllustrationIcon, o({}, i));\n    case \"image\":\n      return n.createElement(ImageIcon, o({}, i));\n    case \"markup\":\n      return n.createElement(MarkupIcon, o({}, i));\n    case \"pdf\":\n      return n.createElement(PdfIcon, o({}, i));\n    case \"plaintext\":\n      return n.createElement(PlaintextIcon, o({}, i));\n    case \"presentation\":\n      return n.createElement(PresentationIcon, o({}, i));\n    case \"richtext\":\n      return n.createElement(RichtextIcon, o({}, i));\n    case \"spreadsheet\":\n      return n.createElement(SpreadsheetIcon, o({}, i));\n    case \"video\":\n      return n.createElement(VideoIcon, o({}, i));\n    case \"archive\":\n    default:\n      return n.createElement(ArchiveIcon, o({}, i));\n  }\n};\nu.displayName = \"AssetIcon\";\nfunction S() {\n  return {\n    relative: css({\n      position: \"relative\"\n    }),\n    height100: css({\n      height: \"100%\"\n    }),\n    image: css({\n      width: \"auto\",\n      maxWidth: \"100%\",\n      maxHeight: \"100%\"\n    }),\n    titleContainer: css({\n      opacity: 0,\n      transition: `opacity ${g.transitionDurationDefault} ${g.transitionEasingDefault}`,\n      position: \"absolute\",\n      bottom: 0,\n      right: 0,\n      left: 0,\n      height: \"100%\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      alignItems: \"flex-end\",\n      boxSizing: \"border-box\",\n      background: `linear-gradient(0deg, ${g.gray900} 0%, transparent calc(1rem * (100 / ${g.fontBaseDefault})), transparent 100% )`,\n      \":hover\": {\n        opacity: 1\n      }\n    }),\n    title: css({\n      bottom: 0,\n      left: 0,\n      right: 0,\n      position: \"absolute\"\n    })\n  };\n}\nfunction b(X, i) {\n  var h = X,\n    {\n      className: t,\n      src: e,\n      status: s,\n      testId: r = \"cf-ui-asset\",\n      title: c,\n      type: m = \"image\"\n    } = h,\n    y = d(h, [\"className\", \"src\", \"status\", \"testId\", \"title\", \"type\"]);\n  let p = S(),\n    C = e && e !== \"\" && m === \"image\" && s !== \"archived\";\n  return n.createElement(Box, o({\n    className: cx(p.relative, t),\n    testId: r,\n    ref: i\n  }, y), C ? n.createElement(n.Fragment, null, n.createElement(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    className: p.height100\n  }, n.createElement(\"img\", {\n    className: p.image,\n    src: e,\n    alt: c\n  })), c && n.createElement(\"div\", {\n    className: p.titleContainer\n  }, n.createElement(Text, {\n    className: p.title,\n    fontColor: \"colorWhite\",\n    margin: \"spacingS\",\n    isTruncated: !0\n  }, c))) : n.createElement(Flex, {\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingLeft: \"spacingS\",\n    paddingRight: \"spacingS\",\n    className: p.height100\n  }, n.createElement(Flex, {\n    marginBottom: \"spacingM\",\n    marginTop: \"spacingM\",\n    justifyContent: \"center\"\n  }, n.createElement(u, {\n    type: m\n  })), n.createElement(Text, {\n    isTruncated: !0,\n    marginBottom: \"spacingM\",\n    fontColor: \"gray600\"\n  }, c)));\n}\nb.displayName = \"Asset\";\nvar J = n.forwardRef(b);\nvar K = {\n  archive: \"archive\",\n  audio: \"audio\",\n  code: \"code\",\n  image: \"image\",\n  markup: \"markup\",\n  pdf: \"pdf\",\n  plaintext: \"plaintext\",\n  presentation: \"presentation\",\n  richtext: \"richtext\",\n  spreadsheet: \"spreadsheet\",\n  video: \"video\"\n};\nfunction Q(t) {\n  return Object.keys(K).includes(t);\n}\nexport { J as Asset, u as AssetIcon, Q as isAssetType };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-asset/src/Asset.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-asset/src/AssetIcon/AssetIcon.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-asset/src/AssetIcon/AssetIcon.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-asset/src/Asset.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-asset/src/types.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  Flex,\n  type EntityStatus,\n  type PickUnion,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\n\nimport { AssetIcon } from './AssetIcon/AssetIcon';\nimport { getAssetStyles } from './Asset.styles';\nimport type { AssetType } from './types';\n\nexport type AssetStatus = PickUnion<\n  EntityStatus,\n  'archived' | 'changed' | 'deleted' | 'draft' | 'published'\n>;\n\nexport interface AssetProps extends CommonProps {\n  /**\n   * A `src` attribute to use for image assets\n   */\n  src?: string;\n  /**\n   * The publish status of the asset\n   */\n  status?: AssetStatus;\n  /**\n   * The title of the asset\n   */\n  title?: string;\n  /**\n   * The type of asset being represented\n   */\n  type?: AssetType;\n}\n\nfunction _Asset(\n  {\n    className,\n    src,\n    status,\n    testId = 'cf-ui-asset',\n    title,\n    type = 'image',\n    ...otherProps\n  }: AssetProps,\n  ref: React.Ref<any>,\n) {\n  const styles = getAssetStyles();\n  const isImage = src && src !== '' && type === 'image';\n\n  // Do not show image previews when publish status is archived\n  const showPreview = isImage && status !== 'archived';\n\n  return (\n    <Box\n      className={cx(styles.relative, className)}\n      testId={testId}\n      ref={ref}\n      {...otherProps}\n    >\n      {showPreview ? (\n        <>\n          <Flex\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            className={styles.height100}\n          >\n            <img className={styles.image} src={src} alt={title} />\n          </Flex>\n          {title && (\n            <div className={styles.titleContainer}>\n              <Text\n                className={styles.title}\n                fontColor=\"colorWhite\"\n                margin=\"spacingS\"\n                isTruncated\n              >\n                {title}\n              </Text>\n            </div>\n          )}\n        </>\n      ) : (\n        <Flex\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          paddingLeft=\"spacingS\"\n          paddingRight=\"spacingS\"\n          className={styles.height100}\n        >\n          <Flex\n            marginBottom=\"spacingM\"\n            marginTop=\"spacingM\"\n            justifyContent=\"center\"\n          >\n            <AssetIcon type={type} />\n          </Flex>\n          <Text isTruncated marginBottom=\"spacingM\" fontColor=\"gray600\">\n            {title}\n          </Text>\n        </Flex>\n      )}\n    </Box>\n  );\n}\n\n_Asset.displayName = 'Asset';\n\nexport const Asset = React.forwardRef(_Asset);\n","import React from 'react';\nimport {\n  ArchiveIcon,\n  AudioIcon,\n  CodeIllustrationIcon,\n  ImageIcon,\n  MarkupIcon,\n  PdfIcon,\n  PlaintextIcon,\n  RichtextIcon,\n  PresentationIcon,\n  SpreadsheetIcon,\n  VideoIcon,\n} from '@contentful/f36-icons';\nimport type { GeneratedIconProps } from '@contentful/f36-icon';\nimport type { AssetType } from '../types';\n\nimport { cx } from 'emotion';\nimport { getAssetIconStyles } from './AssetIcon.styles';\n\nexport interface AssetIconProps\n  extends Omit<GeneratedIconProps, 'illustration' | 'ref'> {\n  type?: AssetType;\n}\n\n/**\n * Renders only the Illustration that would represent this asset's type\n */\nexport const AssetIcon = ({\n  type = 'archive',\n  className,\n  testId = 'cf-ui-asset-icon',\n  ...otherProps\n}: AssetIconProps) => {\n  const styles = getAssetIconStyles();\n  const props = {\n    ...otherProps,\n    testId,\n    className: cx(styles.root, className),\n  };\n\n  switch (type) {\n    case 'audio':\n      return <AudioIcon {...props} />;\n    case 'code':\n      return <CodeIllustrationIcon {...props} />;\n    case 'image':\n      return <ImageIcon {...props} />;\n    case 'markup':\n      return <MarkupIcon {...props} />;\n    case 'pdf':\n      return <PdfIcon {...props} />;\n    case 'plaintext':\n      return <PlaintextIcon {...props} />;\n    case 'presentation':\n      return <PresentationIcon {...props} />;\n    case 'richtext':\n      return <RichtextIcon {...props} />;\n    case 'spreadsheet':\n      return <SpreadsheetIcon {...props} />;\n    case 'video':\n      return <VideoIcon {...props} />;\n    case 'archive':\n    default:\n      return <ArchiveIcon {...props} />;\n  }\n};\n\nAssetIcon.displayName = 'AssetIcon';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getAssetIconStyles() {\n  return {\n    root: css({\n      display: 'inline-block',\n      width: '39px',\n      height: '39px',\n      'g, path': {\n        fill: tokens.gray600,\n      },\n    }),\n  };\n}\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getAssetStyles() {\n  return {\n    relative: css({\n      position: 'relative',\n    }),\n    height100: css({\n      height: '100%',\n    }),\n    image: css({\n      width: 'auto',\n      maxWidth: '100%',\n      maxHeight: '100%',\n    }),\n    titleContainer: css({\n      opacity: 0,\n      transition: `opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      position: 'absolute',\n      bottom: 0,\n      right: 0,\n      left: 0,\n      height: '100%',\n      display: 'flex',\n      overflow: 'hidden',\n      alignItems: 'flex-end',\n      boxSizing: 'border-box',\n      background: `linear-gradient(0deg, ${tokens.gray900} 0%, transparent calc(1rem * (100 / ${tokens.fontBaseDefault})), transparent 100% )`,\n      ':hover': { opacity: 1 },\n    }),\n    title: css({\n      bottom: 0,\n      left: 0,\n      right: 0,\n      position: 'absolute',\n    }),\n  };\n}\n","export const types = {\n  archive: 'archive',\n  audio: 'audio',\n  code: 'code',\n  image: 'image',\n  markup: 'markup',\n  pdf: 'pdf',\n  plaintext: 'plaintext',\n  presentation: 'presentation',\n  richtext: 'richtext',\n  spreadsheet: 'spreadsheet',\n  video: 'video',\n};\n\nexport function isAssetType(type: string): type is AssetType {\n  return Object.keys(types).includes(type);\n}\n\nexport type AssetType = keyof typeof types;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}