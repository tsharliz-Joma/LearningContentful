{"ast":null,"code":"import { useRef, useEffect, useCallback } from 'react';\nimport { createPortal } from 'react-dom';\nfunction p(_ref) {\n  let {\n    children: o,\n    container: n\n  } = _ref;\n  let e = useRef(n),\n    t = useRef(document.createElement(\"div\"));\n  return useEffect(() => {\n    e.current || (e.current = document.body);\n    let r = t.current;\n    return r.setAttribute(\"data-cf-ui-portal\", \"\"), e.current.appendChild(r), () => {\n      e.current && e.current.removeChild(r);\n    };\n  }, []), t.current ? createPortal(o, t.current) : null;\n}\nvar m = o => {\n  let {\n      ref: n,\n      keys: e,\n      event: t = \"keydown\"\n    } = o,\n    r = document,\n    c = useCallback(a => {\n      Object.prototype.hasOwnProperty.call(e, a.key) && e[a.key](a);\n    }, [e]);\n  useEffect(() => (n && n.current && (r = n.current), r.addEventListener(t, c), () => {\n    r.removeEventListener(t, c);\n  }), [t, c]);\n};\nfunction d(o, n) {\n  let e = {\n      before: \"\",\n      match: \"\",\n      after: \"\"\n    },\n    t = n.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"),\n    r = new RegExp(`(?<before>.*?)(?<match>${t})(?<after>.*)`, \"i\"),\n    c = o.match(r);\n  return c && (e.before = c.groups.before, e.match = c.groups.match, e.after = c.groups.after), e;\n}\nfunction b(o) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let e = parseInt(o.slice(1, 3), 16),\n    t = parseInt(o.slice(3, 5), 16),\n    r = parseInt(o.slice(5, 7), 16);\n  return `rgba(${e}, ${t}, ${r}, ${n})`;\n}\nexport { p as Portal, d as getStringMatch, b as hexToRGBA, m as useKeyboard };","map":{"version":3,"names":["useRef","useEffect","useCallback"],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-utils/src/Portal/Portal.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-utils/src/useKeyboard/useKeyboard.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-utils/src/getStringMatch/getStringMatch.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-utils/src/hexToRGBA/hexToRGBA.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport interface PortalProps {\n  children: React.ReactElement;\n  /**\n   * Container element for Portal\n   */\n  container?: Document | HTMLElement;\n}\n\nexport function Portal({\n  children,\n  container: containerElement,\n}: PortalProps): React.ReactPortal | null {\n  const container = useRef<Document | HTMLElement | undefined>(\n    containerElement,\n  );\n  const portal = useRef<HTMLDivElement>(document.createElement('div'));\n\n  useEffect(() => {\n    if (!container.current) {\n      container.current = document.body;\n    }\n\n    const portalContainer = portal.current;\n    portalContainer.setAttribute('data-cf-ui-portal', '');\n    container.current.appendChild(portalContainer);\n\n    return () => {\n      if (container.current) {\n        container.current.removeChild(portalContainer);\n      }\n    };\n  }, []);\n\n  return portal.current ? createPortal(children, portal.current) : null;\n}\n","import { useEffect, useCallback, MutableRefObject } from 'react';\n\nexport interface UseKeyboardProps {\n  /**\n   * Object of key names and handlers defines which key to look for i.e. `ArrowUp`, `Escape`, `Shift`\n   * value is a callback function to be called when key matches\n   */\n  keys: {\n    [key: string]: (e: KeyboardEvent) => void;\n  };\n  /**\n   * Defines the attached event type\n   * @default 'keydown'\n   */\n  event?: 'keyup' | 'keypress' | 'keydown';\n\n  /**\n   * React reference to attach the event to its current element\n   */\n  ref?: MutableRefObject<HTMLElement>;\n}\n\n/**\n *\n * @description hook to attach a handler keyboard event listener to `document` or `HTMLElements` with garbage collection\n * @example\n * useKeyboard({\n *  event: 'keydown', // Optional, default is `keydown`\n *  ref: yourReactRef, // Optional, by default event is attached to document\n *  keys: {\n *    ArrowUp: (e) => handleArrowUp(e),\n *    Tab: (e) => handleTab(e)\n *  }\n * })\n */\nexport const useKeyboard = (props: UseKeyboardProps) => {\n  const { ref, keys, event = 'keydown' } = props;\n  let element: HTMLElement | Document = document;\n\n  const handleKeyEvent = useCallback(\n    (e) => {\n      const isKey = Object.prototype.hasOwnProperty.call(keys, e.key);\n      if (isKey) {\n        keys[e.key](e);\n      }\n    },\n    [keys],\n  );\n\n  useEffect(() => {\n    if (ref && ref.current) {\n      element = ref.current;\n    }\n\n    element.addEventListener(event, handleKeyEvent);\n    return () => {\n      element.removeEventListener(event, handleKeyEvent);\n    };\n  }, [event, handleKeyEvent]);\n};\n","export interface MatchObj {\n  before: string;\n  match: string;\n  after: string;\n}\n\n/**\n * Function that can be used to find a substring inside another string.\n * It needs two strings, the second one will be used in a Regex expression\n * to be matched to the first one.\n * The function will return an object containing the match, what comes before the match,\n * and what comes after the match in the base string\n *\n * @param base\n * @param match\n */\nexport function getStringMatch(base: string, match: string): MatchObj {\n  const matchResult = { before: '', match: '', after: '' };\n  const escapedMatch = match.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n  const regex = new RegExp(\n    `(?<before>.*?)(?<match>${escapedMatch})(?<after>.*)`,\n    'i',\n  );\n  const matches = base.match(regex);\n\n  if (matches) {\n    matchResult.before = matches.groups.before;\n    matchResult.match = matches.groups.match;\n    matchResult.after = matches.groups.after;\n  }\n\n  return matchResult;\n}\n","/**\n * Converts a hex color to rgba\n * @param hex - Hex color\n * @param alpha - Alpha value @default 1\n * @returns rgba color\n * @example\n * hexToRGBA('#000000', 0.5)\n */\nexport function hexToRGBA(hex: string, alpha = 1) {\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n}\n"],"mappings":"AAAA,SAASA,MAAA,EAAAC,SAAW,EAAAC,WAAc,QAClC,OAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}