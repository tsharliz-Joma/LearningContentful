{"ast":null,"code":"import s, { useCallback } from 'react';\nimport { useId, Box } from '@contentful/f36-core';\nimport A from '@contentful/f36-tokens';\nimport { TableRow, TableCell } from '@contentful/f36-table';\nvar Y = Object.defineProperty;\nvar u = Object.getOwnPropertySymbols;\nvar D = Object.prototype.hasOwnProperty,\n  v = Object.prototype.propertyIsEnumerable;\nvar $ = (e, o, t) => o in e ? Y(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  x = (e, o) => {\n    for (var t in o || (o = {})) D.call(o, t) && $(e, t, o[t]);\n    if (u) for (var t of u(o)) v.call(o, t) && $(e, t, o[t]);\n    return e;\n  };\nvar S = (e, o) => {\n  var t = {};\n  for (var r in e) D.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && u) for (var r of u(e)) o.indexOf(r) < 0 && v.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar c = n => {\n  var l = n,\n    {\n      lineHeight: e = 16,\n      marginBottom: o = 8,\n      numberOfLines: t = 2,\n      offsetLeft: r = 0,\n      offsetTop: m = 0\n    } = l,\n    p = S(l, [\"lineHeight\", \"marginBottom\", \"numberOfLines\", \"offsetLeft\", \"offsetTop\"]);\n  return s.createElement(i.Text, x({\n    lineHeight: e,\n    marginBottom: o,\n    numberOfLines: t > 0 ? t : 1,\n    offsetLeft: r,\n    offsetTop: m\n  }, p));\n};\nvar d = V => {\n  var w = V,\n    {\n      children: e,\n      testId: o = \"cf-ui-skeleton-form\",\n      ariaLabel: t = \"Loading component...\",\n      width: r = \"100%\",\n      height: m = \"100%\",\n      preserveAspectRatio: p,\n      backgroundColor: n = \"#e5ebed\",\n      backgroundOpacity: l = 1,\n      isAnimated: a = !0,\n      speed: f = 2,\n      foregroundColor: k = \"#f7f9fa\",\n      foregroundOpacity: q = 1,\n      svgWidth: H = \"100%\",\n      svgHeight: G = \"100%\",\n      clipId: _,\n      gradientId: E,\n      animateId: F\n    } = w,\n    W = S(w, [\"children\", \"testId\", \"ariaLabel\", \"width\", \"height\", \"preserveAspectRatio\", \"backgroundColor\", \"backgroundOpacity\", \"isAnimated\", \"speed\", \"foregroundColor\", \"foregroundOpacity\", \"svgWidth\", \"svgHeight\", \"clipId\", \"gradientId\", \"animateId\"]);\n  let O = useId(_, \"cf-ui-skeleton-clip\"),\n    B = useId(E, \"cf-ui-skeleton-clip-gradient\"),\n    X = useId(void 0, \"animation\"),\n    h = F || X;\n  return s.createElement(Box, x({\n    as: \"svg\",\n    display: \"block\",\n    role: \"img\",\n    \"aria-label\": t,\n    preserveAspectRatio: p,\n    width: H,\n    height: G,\n    testId: o\n  }, W), t ? s.createElement(\"title\", null, t) : null, s.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    width: r,\n    height: m,\n    clipPath: `url(#${O})`,\n    style: {\n      fill: `url(#${B})`\n    }\n  }), s.createElement(\"defs\", null, s.createElement(\"clipPath\", {\n    id: O\n  }, e), s.createElement(\"linearGradient\", {\n    id: B\n  }, s.createElement(\"stop\", {\n    offset: \"0%\",\n    stopColor: n,\n    stopOpacity: l\n  }, a && s.createElement(\"animate\", {\n    id: h,\n    attributeName: \"stop-color\",\n    values: `${n}; ${k}; ${n}`,\n    dur: `${f}s`,\n    repeatCount: \"indefinite\"\n  })), s.createElement(\"stop\", {\n    offset: \"50%\",\n    stopColor: k,\n    stopOpacity: q\n  }, a && s.createElement(\"animate\", {\n    attributeName: \"stop-color\",\n    values: `${n}; ${k}; ${n}`,\n    begin: `${h}.begin+0.25s`,\n    dur: `${f}s`,\n    repeatCount: \"indefinite\"\n  })), s.createElement(\"stop\", {\n    offset: \"100%\",\n    stopColor: n,\n    stopOpacity: l\n  }, a && s.createElement(\"animate\", {\n    attributeName: \"stop-color\",\n    begin: `${h}.begin+0.5s`,\n    values: `${n}; ${k}; ${n}`,\n    dur: `${f}s`,\n    repeatCount: \"indefinite\"\n  })))));\n};\nd.displayName = \"SkeletonContainer\";\nvar g = l => {\n  var a = l,\n    {\n      lineHeight: e = 21,\n      marginBottom: o = 20,\n      numberOfLines: t = 1,\n      offsetLeft: r = 0,\n      offsetTop: m = 0,\n      width: p = 100\n    } = a,\n    n = S(a, [\"lineHeight\", \"marginBottom\", \"numberOfLines\", \"offsetLeft\", \"offsetTop\", \"width\"]);\n  return s.createElement(i.Text, x({\n    lineHeight: e,\n    marginBottom: o,\n    numberOfLines: t,\n    offsetLeft: r,\n    offsetTop: m,\n    width: p\n  }, n));\n};\ng.displayName = \"SkeletonDisplayText\";\nvar y = a => {\n  var f = a,\n    {\n      testId: e = \"cf-ui-skeleton-image\",\n      offsetLeft: o,\n      offsetTop: t,\n      width: r = 70,\n      height: m = 70,\n      radiusX: p = A.borderRadiusSmall,\n      radiusY: n = A.borderRadiusSmall\n    } = f,\n    l = S(f, [\"testId\", \"offsetLeft\", \"offsetTop\", \"width\", \"height\", \"radiusX\", \"radiusY\"]);\n  return s.createElement(\"rect\", x({\n    x: o,\n    y: t,\n    rx: p,\n    ry: n,\n    width: r,\n    height: m,\n    \"data-test-id\": e\n  }, l));\n};\ny.displayName = \"SkeletonImage\";\nvar R = () => s.createElement(TableCell, null, s.createElement(i.Container, {\n  svgHeight: 16\n}, s.createElement(i.BodyText, {\n  numberOfLines: 1\n})));\nvar N = _ref => {\n  let {\n    columnCount: e = 5,\n    rowCount: o = 1\n  } = _ref;\n  return s.createElement(s.Fragment, null, Array.from(Array(o)).map((t, r) => s.createElement(TableRow, {\n    key: r\n  }, Array.from(Array(e)).map((m, p) => s.createElement(R, {\n    key: p\n  })))));\n};\nvar b = _ref2 => {\n  let {\n    numberOfLines: e = 1,\n    offsetLeft: o = 0,\n    offsetTop: t = 0,\n    lineHeight: r = 21,\n    marginBottom: m = 20,\n    radiusX: p = A.borderRadiusSmall,\n    radiusY: n = A.borderRadiusSmall,\n    width: l\n  } = _ref2;\n  let a = useCallback(f => l || (f ? \"80%\" : \"100%\"), [l]);\n  return s.createElement(s.Fragment, null, Array.from(Array(e)).map((f, k) => s.createElement(\"rect\", {\n    key: `skeleton-display-text-${k}`,\n    x: o,\n    y: k * (+r + +m) + +t,\n    rx: p,\n    ry: n,\n    width: a(e > 1 && e - k === 1),\n    height: r\n  })));\n};\nb.displayName = \"SkeletonText\";\nvar i = {};\ni.BodyText = c;\ni.Container = d;\ni.DisplayText = g;\ni.Image = y;\ni.Row = N;\ni.Text = b;\nexport { i as Skeleton, c as SkeletonBodyText, d as SkeletonContainer, g as SkeletonDisplayText, y as SkeletonImage, N as SkeletonRow, b as SkeletonText };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonBodyText/SkeletonBodyText.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonContainer/SkeletonContainer.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonDisplayText/SkeletonDisplayText.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonImage/SkeletonImage.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonRow/SkeletonRow.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonRow/SkeletonTableCell/SkeletonTableCell.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/SkeletonText/SkeletonText.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-skeleton/src/CompoundSkeleton.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Skeleton } from '../index';\nimport type { SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonBodyTextProps extends SkeletonTextProps {}\n\nexport const SkeletonBodyText = ({\n  lineHeight = 16,\n  marginBottom = 8,\n  numberOfLines = 2,\n  offsetLeft = 0,\n  offsetTop = 0,\n  ...otherProps\n}: SkeletonBodyTextProps) => {\n  return (\n    <Skeleton.Text\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={\n        numberOfLines! > 0 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          ? numberOfLines\n          : 1\n      }\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      {...otherProps}\n    />\n  );\n};\n","import React from 'react';\nimport { Box, useId, type CommonProps } from '@contentful/f36-core';\n\nexport interface SkeletonContainerProps extends CommonProps {\n  /**\n   * Background color of the skeleton\n   */\n  backgroundColor?: string;\n  /**\n   * Background opacity of the skeleton\n   */\n  backgroundOpacity?: number;\n  /**\n   * Whether skeleton has animation or not\n   */\n  isAnimated?: boolean;\n  /**\n   * Speed of the animation\n   */\n  speed?: number | string;\n  /**\n   * Color of the foreground skeleton items\n   */\n  foregroundColor?: string;\n  /**\n   * Opacity of the foreground skeleton items\n   */\n  foregroundOpacity?: number;\n  /**\n   * Width of the SVG element\n   */\n  svgWidth?: string | number;\n  /**\n   * Height of the SVG element\n   */\n  svgHeight?: string | number;\n  /**\n   * Label attribute\n   */\n  ariaLabel?: string;\n  width?: number | string;\n  height?: number | string;\n  clipId?: string;\n  gradientId?: string;\n  animateId?: string;\n  preserveAspectRatio?: string;\n  children: React.ReactNode;\n}\n\nexport const SkeletonContainer = ({\n  children,\n  testId = 'cf-ui-skeleton-form',\n  ariaLabel = 'Loading component...',\n  width = '100%',\n  height = '100%',\n  preserveAspectRatio,\n  backgroundColor = '#e5ebed',\n  backgroundOpacity = 1,\n  isAnimated = true,\n  speed = 2,\n  foregroundColor = '#f7f9fa',\n  foregroundOpacity = 1,\n  svgWidth = '100%',\n  svgHeight = '100%',\n  clipId,\n  gradientId,\n  animateId,\n  ...otherProps\n}: SkeletonContainerProps) => {\n  const uniqueClipId = useId(clipId, 'cf-ui-skeleton-clip');\n  const uniqueGradientId = useId(gradientId, 'cf-ui-skeleton-clip-gradient');\n  const randomAnimateId = useId(undefined, 'animation');\n  const uniqueAnimateId = animateId || randomAnimateId;\n\n  return (\n    <Box\n      as=\"svg\"\n      display=\"block\"\n      role=\"img\"\n      aria-label={ariaLabel}\n      preserveAspectRatio={preserveAspectRatio}\n      width={svgWidth}\n      height={svgHeight}\n      testId={testId}\n      {...otherProps}\n    >\n      {ariaLabel ? <title>{ariaLabel}</title> : null}\n      <rect\n        x=\"0\"\n        y=\"0\"\n        width={width}\n        height={height}\n        clipPath={`url(#${uniqueClipId})`}\n        style={{ fill: `url(#${uniqueGradientId})` }}\n      />\n\n      <defs>\n        <clipPath id={uniqueClipId}>{children}</clipPath>\n\n        <linearGradient id={uniqueGradientId}>\n          <stop\n            offset=\"0%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                id={uniqueAnimateId}\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"50%\"\n            stopColor={foregroundColor}\n            stopOpacity={foregroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                begin={`${uniqueAnimateId}.begin+0.25s`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"100%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                begin={`${uniqueAnimateId}.begin+0.5s`}\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n        </linearGradient>\n      </defs>\n    </Box>\n  );\n};\n\nSkeletonContainer.displayName = 'SkeletonContainer';\n","import React from 'react';\n\nimport { Skeleton } from '../index';\nimport type { SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonDisplayTextProps extends SkeletonTextProps {}\n\nexport const SkeletonDisplayText = ({\n  lineHeight = 21,\n  marginBottom = 20,\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  width = 100,\n  ...otherProps\n}: SkeletonDisplayTextProps): React.ReactElement => {\n  return (\n    <Skeleton.Text\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={numberOfLines}\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      width={width}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonDisplayText.displayName = 'SkeletonDisplayText';\n","import tokens from '@contentful/f36-tokens';\nimport React from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonImageProps {\n  width?: stringOrNumber;\n  height?: stringOrNumber;\n  radiusX?: stringOrNumber;\n  radiusY?: stringOrNumber;\n  offsetLeft?: stringOrNumber;\n  offsetTop?: stringOrNumber;\n  testId?: string;\n}\n\nexport const SkeletonImage = ({\n  testId = 'cf-ui-skeleton-image',\n  offsetLeft,\n  offsetTop,\n  width = 70,\n  height = 70,\n  radiusX = tokens.borderRadiusSmall,\n  radiusY = tokens.borderRadiusSmall,\n  ...otherProps\n}: SkeletonImageProps): React.ReactElement => {\n  return (\n    <rect\n      x={offsetLeft}\n      y={offsetTop}\n      rx={radiusX}\n      ry={radiusY}\n      width={width}\n      height={height}\n      data-test-id={testId}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonImage.displayName = 'SkeletonImage';\n","import React from 'react';\nimport { TableRow } from '@contentful/f36-table';\n\nimport { SkeletonTableCell } from './SkeletonTableCell/SkeletonTableCell';\n\nexport interface SkeletonRowProps {\n  /** Defines the number of rows to be rendered */\n  rowCount?: number;\n  /** Defines the number of columns to be rendered */\n  columnCount?: number;\n}\n\nexport const SkeletonRow = ({\n  columnCount = 5,\n  rowCount = 1,\n}: SkeletonRowProps) => {\n  return (\n    <>\n      {Array.from(Array(rowCount)).map((_, rowIndex) => (\n        <TableRow key={rowIndex}>\n          {Array.from(Array(columnCount)).map((_, cellIndex) => (\n            <SkeletonTableCell key={cellIndex} />\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { TableCell } from '@contentful/f36-table';\n\nimport { Skeleton } from '../../index';\n\nexport const SkeletonTableCell = () => {\n  return (\n    <TableCell>\n      <Skeleton.Container\n        svgHeight={16} // This is equal to the default height of a SkeletonText line, if no value is passed the svg will be bigger than the line\n      >\n        <Skeleton.BodyText numberOfLines={1} />\n      </Skeleton.Container>\n    </TableCell>\n  );\n};\n","import tokens from '@contentful/f36-tokens';\nimport React, { useCallback } from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonTextProps {\n  /**\n   * A number of skeleton likes\n   */\n  numberOfLines?: number;\n  /**\n   * A distance between top of the container and the first line (in pixels)\n   */\n  offsetTop?: stringOrNumber;\n  /**\n   * A distance between left of the container and the beginning of lines (in pixels)\n   */\n  offsetLeft?: stringOrNumber;\n  /**\n   * A height of a one line (in pixels)\n   */\n  lineHeight?: stringOrNumber;\n  /**\n   * Spacing between lines (in pixels)\n   */\n  marginBottom?: stringOrNumber;\n  /**\n   * X-axis border radius (in number)\n   */\n  radiusX?: stringOrNumber;\n  /**\n   * Y-axis border radius (in number)\n   */\n  radiusY?: stringOrNumber;\n  /**\n   * A width of a line\n   */\n  width?: stringOrNumber;\n}\n\nexport const SkeletonText = ({\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  lineHeight = 21,\n  marginBottom = 20,\n  radiusX = tokens.borderRadiusSmall,\n  radiusY = tokens.borderRadiusSmall,\n  width,\n}: SkeletonTextProps) => {\n  const getLineWidth = useCallback(\n    (lastLine: boolean) => {\n      if (width) {\n        return width;\n      }\n\n      return lastLine ? '80%' : '100%';\n    },\n    [width],\n  );\n\n  return (\n    <React.Fragment>\n      {Array.from(Array(numberOfLines)).map((_, index) => (\n        <rect\n          key={`skeleton-display-text-${index}`} // eslint-disable-line\n          x={offsetLeft}\n          y={\n            index * (+lineHeight! + +marginBottom!) + +offsetTop! // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          }\n          rx={radiusX}\n          ry={radiusY}\n          width={getLineWidth(\n            numberOfLines! > 1 && numberOfLines! - index === 1, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          )}\n          height={lineHeight}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nSkeletonText.displayName = 'SkeletonText';\n","import { SkeletonBodyText } from './SkeletonBodyText/SkeletonBodyText';\nimport { SkeletonContainer } from './SkeletonContainer/SkeletonContainer';\nimport { SkeletonDisplayText } from './SkeletonDisplayText/SkeletonDisplayText';\nimport { SkeletonImage } from './SkeletonImage/SkeletonImage';\nimport { SkeletonRow } from './SkeletonRow/SkeletonRow';\nimport { SkeletonText } from './SkeletonText/SkeletonText';\n\ntype CompoundSkeleton = {\n  BodyText: typeof SkeletonBodyText;\n  Container: typeof SkeletonContainer;\n  DisplayText: typeof SkeletonDisplayText;\n  Image: typeof SkeletonImage;\n  Row: typeof SkeletonRow;\n  Text: typeof SkeletonText;\n};\n\nexport const Skeleton = {} as CompoundSkeleton;\n\nSkeleton.BodyText = SkeletonBodyText;\nSkeleton.Container = SkeletonContainer;\nSkeleton.DisplayText = SkeletonDisplayText;\nSkeleton.Image = SkeletonImage;\nSkeleton.Row = SkeletonRow;\nSkeleton.Text = SkeletonText;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}