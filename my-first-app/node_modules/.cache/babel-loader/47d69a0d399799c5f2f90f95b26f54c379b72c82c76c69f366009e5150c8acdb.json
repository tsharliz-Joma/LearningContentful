{"ast":null,"code":"import e from 'react';\nimport { cx, css } from 'emotion';\nimport o from '@contentful/f36-tokens';\nimport { EntityStatusBadge } from '@contentful/f36-badge';\nimport { Flex, Box } from '@contentful/f36-core';\nimport { MoreHorizontalIcon, AssetIcon, EntryIcon, ReleaseIcon, PageIcon } from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\nimport { Text } from '@contentful/f36-typography';\nimport { DragHandle } from '@contentful/f36-drag-handle';\nimport { Button } from '@contentful/f36-button';\nimport { Menu } from '@contentful/f36-menu';\nimport { Skeleton } from '@contentful/f36-skeleton';\nvar J = Object.defineProperty,\n  K = Object.defineProperties;\nvar Q = Object.getOwnPropertyDescriptors;\nvar d = Object.getOwnPropertySymbols;\nvar S = Object.prototype.hasOwnProperty,\n  k = Object.prototype.propertyIsEnumerable;\nvar N = (t, i, n) => i in t ? J(t, i, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: n\n  }) : t[i] = n,\n  l = (t, i) => {\n    for (var n in i || (i = {})) S.call(i, n) && N(t, n, i[n]);\n    if (d) for (var n of d(i)) k.call(i, n) && N(t, n, i[n]);\n    return t;\n  },\n  g = (t, i) => K(t, Q(i));\nvar v = (t, i) => {\n  var n = {};\n  for (var r in t) S.call(t, r) && i.indexOf(r) < 0 && (n[r] = t[r]);\n  if (t != null && d) for (var r of d(t)) i.indexOf(r) < 0 && k.call(t, r) && (n[r] = t[r]);\n  return n;\n};\nvar D = () => ({\n  root: css({\n    display: \"block\",\n    listStyle: \"none\",\n    margin: 0,\n    padding: 0,\n    border: `1px solid ${o.gray200}`,\n    borderBottom: \"none\",\n    borderRadius: o.borderRadiusMedium,\n    overflow: \"hidden\"\n  })\n});\nfunction A(t, i) {\n  let n = D();\n  return e.createElement(\"ul\", {\n    \"data-test-id\": t.testId || \"cf-ui-entity-list\",\n    ref: i,\n    className: cx(n.root, t.className),\n    style: t.style\n  }, t.children);\n}\nA.displayName = \"EntityList\";\nvar X = e.forwardRef(A);\nvar B = () => ({\n  root: t => css(g(l({\n    display: \"flex\",\n    boxShadow: `inset 0 -1px 0 ${o.gray200}`,\n    position: \"relative\",\n    transition: `${o.transitionDurationShort} ${o.transitionEasingDefault}`,\n    transitionProperty: \"box-shadow, background-color\",\n    backgroundColor: o.colorWhite\n  }, t.isDragActive ? {\n    boxShadow: o.boxShadowHeavy\n  } : {}), {\n    \"&:hover\": {\n      backgroundColor: o.gray100\n    }\n  })),\n  card: css({\n    display: \"flex\",\n    textDecoration: \"none\",\n    width: \"100%\",\n    minHeight: o.spacing3Xl,\n    padding: o.spacingXs,\n    margin: 0,\n    border: \"none\",\n    background: \"none\",\n    textAlign: \"left\"\n  }),\n  content: css({\n    flexGrow: 1,\n    minWidth: 0,\n    position: \"relative\"\n  }),\n  media: css({\n    display: \"flex\",\n    flexShrink: 0,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    backgroundColor: o.gray200,\n    width: o.spacing2Xl,\n    height: o.spacing2Xl,\n    margin: \"0\",\n    marginRight: o.spacingXs\n  }),\n  thumbnail: css({\n    display: \"block\",\n    width: \"100%\",\n    height: \"100%\",\n    objectFit: \"cover\"\n  }),\n  contentType: css({\n    marginLeft: o.spacingXs\n  }),\n  entityType: css({\n    textTransform: \"capitalize\"\n  }),\n  description: css({\n    \"&::before\": {\n      content: '\"|\"',\n      color: o.gray400,\n      height: \"25%\",\n      marginTop: o.spacing2Xs,\n      marginLeft: o.spacing2Xs,\n      marginRight: o.spacing2Xs\n    }\n  }),\n  meta: css({\n    marginLeft: \"auto\",\n    flexShrink: 0\n  }),\n  dragHandle: css({\n    borderBottomLeftRadius: \"0\",\n    borderTopLeftRadius: \"0\",\n    boxShadow: `inset 0 -1px 0 ${o.gray200}`\n  }),\n  menuTrigger: css({\n    padding: \"0 0.125rem\",\n    minHeight: \"1.5rem\"\n  })\n});\nvar mt = {\n    asset: AssetIcon,\n    entry: EntryIcon,\n    release: ReleaseIcon,\n    page: PageIcon\n  },\n  y = dt => {\n    var C = dt,\n      {\n        className: t,\n        testId: i = \"cf-ui-entity-list-item\",\n        title: n,\n        description: r,\n        contentType: b,\n        entityType: c = \"entry\",\n        withThumbnail: $ = !0,\n        thumbnailUrl: I,\n        thumbnailAltText: O,\n        status: f,\n        actions: u,\n        withDragHandle: W,\n        isDragActive: P,\n        isLoading: z,\n        onClick: H,\n        href: m,\n        cardDragHandleProps: U,\n        cardDragHandleComponent: T,\n        isActionsDisabled: _ = !1\n      } = C,\n      j = v(C, [\"className\", \"testId\", \"title\", \"description\", \"contentType\", \"entityType\", \"withThumbnail\", \"thumbnailUrl\", \"thumbnailAltText\", \"status\", \"actions\", \"withDragHandle\", \"isDragActive\", \"isLoading\", \"onClick\", \"href\", \"cardDragHandleProps\", \"cardDragHandleComponent\", \"isActionsDisabled\"]);\n    let s = B(),\n      G = () => {\n        if (T) return T;\n        if (W) return e.createElement(DragHandle, l({\n          className: s.dragHandle,\n          isActive: P,\n          label: \"Reorder entry\"\n        }, U));\n      },\n      h = \"article\";\n    (m || H) && (h = m ? \"a\" : \"button\");\n    let q = f === \"archived\" || !I;\n    return e.createElement(\"li\", g(l({}, j), {\n      className: cx(s.root({\n        isDragActive: P\n      }), t),\n      \"data-test-id\": i\n    }), G(), z ? e.createElement(\"article\", {\n      className: s.card\n    }, e.createElement(Skeleton.Container, {\n      clipId: \"f36-entity-list-item-skeleton\"\n    }, e.createElement(Skeleton.Image, {\n      height: 46,\n      width: 46\n    }), e.createElement(Skeleton.BodyText, {\n      numberOfLines: 2,\n      lineHeight: 18,\n      offsetLeft: 54\n    }))) : e.createElement(h, {\n      className: s.card,\n      onClick: H,\n      href: m,\n      type: h === \"button\" ? \"button\" : void 0,\n      target: m ? \"_blank\" : void 0\n    }, $ && e.createElement(\"figure\", {\n      className: s.media\n    }, q ? e.createElement(Icon, {\n      as: mt[c.toLowerCase()],\n      variant: \"muted\"\n    }) : e.createElement(\"img\", {\n      src: I,\n      className: s.thumbnail,\n      alt: O\n    })), e.createElement(\"div\", {\n      className: s.content\n    }, e.createElement(Flex, null, e.createElement(Text, {\n      as: \"h3\",\n      lineHeight: \"lineHeightM\",\n      fontColor: \"gray900\",\n      fontWeight: \"fontWeightDemiBold\",\n      isTruncated: !0\n    }, n), b && e.createElement(Text, {\n      as: \"span\",\n      lineHeight: \"lineHeightM\",\n      fontColor: \"gray600\",\n      className: s.contentType,\n      isTruncated: !0\n    }, \"(\", b, \")\")), e.createElement(Flex, {\n      marginTop: \"spacing2Xs\"\n    }, c && e.createElement(Text, {\n      lineHeight: \"lineHeightM\",\n      fontColor: \"gray600\",\n      className: s.entityType\n    }, c), r && e.createElement(Text, {\n      as: \"p\",\n      lineHeight: \"lineHeightM\",\n      fontColor: \"gray900\",\n      isTruncated: !0,\n      className: s.description\n    }, r))), e.createElement(Flex, {\n      className: s.meta,\n      alignItems: \"flex-start\",\n      paddingLeft: \"spacingXs\"\n    }, f && e.createElement(Box, {\n      marginRight: u ? \"spacingXs\" : \"none\"\n    }, e.createElement(EntityStatusBadge, {\n      entityStatus: f\n    })), u && e.createElement(Menu, null, e.createElement(Menu.Trigger, null, e.createElement(Button, {\n      isDisabled: _,\n      startIcon: e.createElement(MoreHorizontalIcon, null),\n      variant: \"transparent\",\n      \"aria-label\": \"Actions\",\n      size: \"small\",\n      className: s.menuTrigger\n    })), e.createElement(Menu.List, null, u)))));\n  };\ny.displayName = \"EntityListItem\";\nvar F = X;\nF.Item = y;\nexport { F as EntityList, y as EntityListItem };","map":{"version":3,"names":[],"sources":["/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-entity-list/src/EntityList.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-entity-list/src/EntityList.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-entity-list/src/EntityListItem/EntityListItem.tsx","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-entity-list/src/EntityListItem/EntityListItem.styles.ts","/Users/tsharliz/Documents/contentful/my-first-app/node_modules/@contentful/f36-entity-list/src/CompoundEntityList.tsx"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\n\nimport { getEntityListStyles } from './EntityList.styles';\n\nexport interface EntityListProps extends CommonProps {\n  children?: React.ReactNode;\n}\n\nfunction _EntityList(\n  props: ExpandProps<EntityListProps>,\n  ref: React.Ref<HTMLUListElement>,\n) {\n  const styles = getEntityListStyles();\n\n  return (\n    <ul\n      data-test-id={props.testId || 'cf-ui-entity-list'}\n      ref={ref}\n      className={cx(styles.root, props.className)}\n      style={props.style}\n    >\n      {props.children}\n    </ul>\n  );\n}\n\n_EntityList.displayName = 'EntityList';\n\nexport const EntityList = React.forwardRef(_EntityList);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getEntityListStyles = () => ({\n  root: css({\n    display: 'block',\n    listStyle: 'none',\n    margin: 0,\n    padding: 0,\n    border: `1px solid ${tokens.gray200}`,\n    borderBottom: 'none',\n    borderRadius: tokens.borderRadiusMedium,\n    overflow: 'hidden',\n  }),\n});\n","import React, { type MouseEventHandler } from 'react';\nimport { cx } from 'emotion';\nimport { EntityStatusBadge } from '@contentful/f36-badge';\nimport {\n  Flex,\n  Box,\n  type CommonProps,\n  type EntityStatus,\n  type PickUnion,\n} from '@contentful/f36-core';\nimport {\n  AssetIcon,\n  EntryIcon,\n  ReleaseIcon,\n  MoreHorizontalIcon,\n  PageIcon,\n} from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\nimport { Text } from '@contentful/f36-typography';\nimport { DragHandle, type DragHandleProps } from '@contentful/f36-drag-handle';\nimport { Button } from '@contentful/f36-button';\nimport { Menu } from '@contentful/f36-menu';\nimport { Skeleton } from '@contentful/f36-skeleton';\n\nimport { getEntityListItemStyles } from './EntityListItem.styles';\n\ntype EntityListItemStatus = PickUnion<\n  EntityStatus,\n  'archived' | 'changed' | 'draft' | 'published'\n>;\n\nconst ICON_MAP = {\n  asset: AssetIcon,\n  entry: EntryIcon,\n  release: ReleaseIcon,\n  page: PageIcon,\n};\n\nexport interface EntityListItemProps extends CommonProps {\n  /**\n   * The title of the entity\n   */\n  title: string;\n  /**\n   * The description of the entity\n   */\n  description?: string;\n  /**\n   * The content type of the entity\n   */\n  contentType?: string;\n  /**\n   * The publish status of the entry\n   */\n  status?: EntityListItemStatus;\n  /**\n   * A boolean used to render the Thumbnail or not\n   */\n  withThumbnail?: boolean;\n  /**\n   * The URL of the entity's preview thumbnail. Use 46px x 46px images for best results\n   */\n  thumbnailUrl?: string;\n  /**\n   * The alt text for the thumbnail\n   */\n  thumbnailAltText?: string;\n  /**\n   * Menu elements rendered as actions in Menu\n   */\n  actions?: React.ReactNodeArray;\n  /**\n   * Renders a drag handle for the component for use in drag and drop contexts\n   */\n  withDragHandle?: boolean;\n  /**\n   * Applies styling for when the component is actively being dragged by the user\n   */\n  isDragActive?: boolean;\n  /**\n   * Prop to pass a custom CardDragHandle component to for use in drag and drop contexts\n   */\n  cardDragHandleComponent?: React.ReactNode;\n  /**\n   * Props to pass down to the default CardDragHandle component (does not work with cardDragHandleComponent prop)\n   */\n  cardDragHandleProps?: Partial<DragHandleProps>;\n  /**\n   * An entity can either be an Entry, an Asset or a Release. This prop will apply styling based on if the entity is an asset, a release or an entry\n   *\n   * Note: 'entry' and 'asset' are @deprecated but supported in v1.x for backwards compatibility\n   */\n  entityType?: 'Entry' | 'Asset' | 'entry' | 'asset' | 'Release' | 'Page';\n  /**\n   * Loading state for the component - when true will display loading feedback to the user\n   */\n  isLoading?: boolean;\n  /**\n   * The action to be performed on click of the EntryCard\n   */\n  onClick?: MouseEventHandler;\n  /**\n   * The href for the component. Will render the card as an `a` element for native browser link handling\n   */\n  href?: string;\n  /**\n   * A boolean used to disable the CardActions\n   */\n  isActionsDisabled?: boolean;\n}\n\nexport const EntityListItem = ({\n  className,\n  testId = 'cf-ui-entity-list-item',\n  title,\n  description,\n  contentType,\n  entityType = 'entry',\n  withThumbnail = true,\n  thumbnailUrl,\n  thumbnailAltText,\n  status,\n  actions,\n  withDragHandle,\n  isDragActive,\n  isLoading,\n  onClick,\n  href,\n  cardDragHandleProps,\n  cardDragHandleComponent,\n  isActionsDisabled = false,\n  ...otherProps\n}: EntityListItemProps): React.ReactElement => {\n  const styles = getEntityListItemStyles();\n\n  const renderCardDragHandle = () => {\n    if (cardDragHandleComponent) {\n      return cardDragHandleComponent;\n    } else if (withDragHandle) {\n      return (\n        <DragHandle\n          className={styles.dragHandle}\n          isActive={isDragActive}\n          label=\"Reorder entry\"\n          {...cardDragHandleProps}\n        />\n      );\n    }\n  };\n\n  let Element: React.ElementType = 'article';\n  if (href || onClick) {\n    Element = href ? 'a' : 'button';\n  }\n\n  // archived assets will not be available on the CDN, resulting in a broken image src\n  const isArchived = status === 'archived';\n  const asIcon = isArchived || !thumbnailUrl;\n\n  return (\n    <li\n      {...otherProps}\n      className={cx(styles.root({ isDragActive }), className)}\n      data-test-id={testId}\n    >\n      {renderCardDragHandle()}\n      {isLoading ? (\n        <article className={styles.card}>\n          <Skeleton.Container clipId=\"f36-entity-list-item-skeleton\">\n            <Skeleton.Image height={46} width={46} />\n            <Skeleton.BodyText\n              numberOfLines={2}\n              lineHeight={18}\n              offsetLeft={54}\n            />\n          </Skeleton.Container>\n        </article>\n      ) : (\n        <Element\n          className={styles.card}\n          onClick={onClick}\n          href={href}\n          type={Element === 'button' ? 'button' : undefined}\n          target={href ? '_blank' : undefined}\n        >\n          {withThumbnail && (\n            <figure className={styles.media}>\n              {asIcon ? (\n                <Icon as={ICON_MAP[entityType.toLowerCase()]} variant=\"muted\" />\n              ) : (\n                <img\n                  src={thumbnailUrl}\n                  className={styles.thumbnail}\n                  alt={thumbnailAltText}\n                />\n              )}\n            </figure>\n          )}\n\n          <div className={styles.content}>\n            <Flex>\n              <Text\n                as=\"h3\"\n                lineHeight=\"lineHeightM\"\n                fontColor=\"gray900\"\n                fontWeight=\"fontWeightDemiBold\"\n                isTruncated\n              >\n                {title}\n              </Text>\n\n              {contentType && (\n                <Text\n                  as=\"span\"\n                  lineHeight=\"lineHeightM\"\n                  fontColor=\"gray600\"\n                  className={styles.contentType}\n                  isTruncated\n                >\n                  ({contentType})\n                </Text>\n              )}\n            </Flex>\n            <Flex marginTop=\"spacing2Xs\">\n              {entityType && (\n                <Text\n                  lineHeight=\"lineHeightM\"\n                  fontColor=\"gray600\"\n                  className={styles.entityType}\n                >\n                  {entityType}\n                </Text>\n              )}\n              {description && (\n                <Text\n                  as=\"p\"\n                  lineHeight=\"lineHeightM\"\n                  fontColor=\"gray900\"\n                  isTruncated\n                  className={styles.description}\n                >\n                  {description}\n                </Text>\n              )}\n            </Flex>\n          </div>\n\n          <Flex\n            className={styles.meta}\n            alignItems=\"flex-start\"\n            paddingLeft=\"spacingXs\"\n          >\n            {status && (\n              <Box marginRight={actions ? 'spacingXs' : 'none'}>\n                <EntityStatusBadge entityStatus={status} />\n              </Box>\n            )}\n\n            {actions && (\n              <Menu>\n                <Menu.Trigger>\n                  <Button\n                    isDisabled={isActionsDisabled}\n                    startIcon={<MoreHorizontalIcon />}\n                    variant=\"transparent\"\n                    aria-label=\"Actions\"\n                    size=\"small\"\n                    className={styles.menuTrigger}\n                  />\n                </Menu.Trigger>\n                <Menu.List>{actions}</Menu.List>\n              </Menu>\n            )}\n          </Flex>\n        </Element>\n      )}\n    </li>\n  );\n};\n\nEntityListItem.displayName = 'EntityListItem';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { EntityListItemProps } from './EntityListItem';\n\nexport const getEntityListItemStyles = () => ({\n  root: (props: Pick<EntityListItemProps, 'isDragActive'>) =>\n    css({\n      display: 'flex',\n      boxShadow: `inset 0 -1px 0 ${tokens.gray200}`,\n      position: 'relative',\n      transition: `${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n      transitionProperty: 'box-shadow, background-color',\n      backgroundColor: tokens.colorWhite,\n      ...(props.isDragActive\n        ? {\n            boxShadow: tokens.boxShadowHeavy,\n          }\n        : {}),\n\n      '&:hover': {\n        backgroundColor: tokens.gray100,\n      },\n    }),\n  card: css({\n    display: 'flex',\n    textDecoration: 'none',\n    width: '100%',\n    minHeight: tokens.spacing3Xl,\n    padding: tokens.spacingXs,\n    margin: 0, // remove the default button margin in Safari.\n    border: 'none',\n    background: 'none',\n    textAlign: 'left',\n  }),\n  content: css({\n    flexGrow: 1,\n    minWidth: 0,\n    position: 'relative',\n  }),\n  media: css({\n    display: 'flex',\n    flexShrink: 0,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: tokens.gray200,\n    width: tokens.spacing2Xl,\n    height: tokens.spacing2Xl,\n    margin: '0',\n    marginRight: tokens.spacingXs,\n  }),\n  thumbnail: css({\n    display: 'block',\n    width: '100%',\n    height: '100%',\n    objectFit: 'cover',\n  }),\n  contentType: css({\n    marginLeft: tokens.spacingXs,\n  }),\n  entityType: css({\n    textTransform: 'capitalize',\n  }),\n  description: css({\n    '&::before': {\n      content: '\"|\"',\n      color: tokens.gray400,\n      height: '25%',\n      marginTop: tokens.spacing2Xs,\n      marginLeft: tokens.spacing2Xs,\n      marginRight: tokens.spacing2Xs,\n    },\n  }),\n  meta: css({\n    marginLeft: 'auto',\n    flexShrink: 0,\n  }),\n  dragHandle: css({\n    borderBottomLeftRadius: '0',\n    borderTopLeftRadius: '0',\n    boxShadow: `inset 0 -1px 0 ${tokens.gray200}`,\n  }),\n  menuTrigger: css({\n    padding: '0 0.125rem',\n    minHeight: '1.5rem',\n  }),\n});\n","import { EntityList as OriginalEntityList } from './EntityList';\nimport { EntityListItem } from './EntityListItem/EntityListItem';\n\ntype CompoundEntityList = typeof OriginalEntityList & {\n  Item: typeof EntityListItem;\n};\n\nexport const EntityList = OriginalEntityList as CompoundEntityList;\nEntityList.Item = EntityListItem;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}