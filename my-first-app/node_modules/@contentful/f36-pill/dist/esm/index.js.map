{"version":3,"sources":["../../src/Pill.tsx","../../src/Pill.styles.ts"],"names":["React","cx","Tooltip","DragIcon","CloseIcon","Button","css","tokens","getCloseButtonStyle","getLabelStyle","getPillStyle","variant","variantStyle","__spreadValues","getPillStyles","Pill","props","ref","_a","label","onClose","testId","onDrag","className","dragHandleComponent","otherProps","__objRest","styles","textIsTruncated","setTextIsTruncated","trackRefChange","scrollWidth","offsetWidth"],"mappings":"2fAAA,OAAOA,MAAW,QAClB,OAAS,MAAAC,MAAU,UAMnB,OAAS,WAAAC,MAAe,0BACxB,OAAS,YAAAC,EAAU,aAAAC,MAAiB,wBACpC,OAAS,UAAAC,MAAc,yBCTvB,OAAS,OAAAC,MAAW,UACpB,OAAOC,MAAY,yBAGnB,IAAMC,EAAsB,IACnBF,EAAI,CACT,WAAY,aAAaC,EAAO,UAChC,oBAAqB,EACrB,uBAAwB,EACxB,QAASA,EAAO,UAChB,UAAW,OACX,WAAY,cAAcA,EAAO,2BAA2BA,EAAO;AAAA,cACzDA,EAAO,6BAA6BA,EAAO,0BACrD,UAAW,CACT,UAAWA,EAAO,UAClB,gBAAiBA,EAAO,OAC1B,EACA,6BAA8B,CAC5B,gBAAiBA,EAAO,OAC1B,CACF,CAAC,EAGGE,EAAgB,IACbH,EAAI,CACT,MAAOC,EAAO,QACd,WAAYA,EAAO,YACnB,QAASA,EAAO,UAChB,SAAUA,EAAO,UACjB,SAAU,EACV,WAAY,SACZ,aAAc,WACd,SAAU,QACZ,CAAC,EAGGG,EAAgBC,GAA0B,CAC9C,IAAMC,EAAgBD,GAA0B,CAC9C,OAAQA,EAAS,CACf,IAAK,SACH,MAAO,CACL,WAAYJ,EAAO,OACrB,EACF,IAAK,UACH,MAAO,CACL,WAAYA,EAAO,QACnB,eAAgB,eAChB,QAAS,KACX,EACF,QACE,MAAO,CACL,WAAYA,EAAO,OACrB,CACJ,CACF,EAEA,OAAOD,EAAIO,EAAA,CACT,QAAS,cACT,WAAYN,EAAO,iBACnB,WAAY,SACZ,aAAcA,EAAO,kBACrB,OAAQ,OACR,QAAS,EACT,SAAU,QACPK,EAAaD,CAAO,EACxB,CACH,EAEO,SAASG,EAAcH,EAAuB,CACnD,MAAO,CACL,YAAaH,EAAoB,EACjC,MAAOC,EAAc,EACrB,KAAMH,EAAI,CACR,KAAMC,EAAO,QACb,cAAe,SACf,QAAS,MACX,CAAC,EACD,SAAUD,EAAI,CACZ,QAASC,EAAO,UAChB,aAAc,EACd,OAAQ,MACV,CAAC,EACD,KAAMG,EAAaC,CAAO,CAC5B,CACF,CD7CO,IAAMI,EAAOf,EAAM,WACxB,CAACgB,EAAOC,IAAQ,CACd,IASIC,EAAAF,EARF,OAAAG,EACA,QAAAC,EACA,OAAAC,EAAS,aACT,OAAAC,EACA,UAAAC,EACA,oBAAAC,EACA,QAAAb,EAAU,MAhDhB,EAkDQO,EADCO,EAAAC,EACDR,EADC,CAPH,QACA,UACA,SACA,SACA,YACA,sBACA,YAIIS,EAASb,EAAcH,CAAO,EAC9B,CAACiB,EAAiBC,CAAkB,EAAI7B,EAAM,SAAS,EAAK,EAE5D8B,EAAiB9B,EAAM,YAC1BiB,GAA+B,CAC9B,GAAI,CAACA,EACH,OAEF,GAAM,CAAE,YAAAc,EAAa,YAAAC,CAAY,EAAIf,EAAI,cACzCY,EAAmBE,EAAcC,CAAW,CAC9C,EACA,CAACH,CAAkB,CACrB,EAEA,OACE7B,EAAA,cAAC,MAAAa,EAAA,CACC,UAAWZ,EAAG0B,EAAO,KAAMJ,CAAS,EACpC,eAAcF,EACd,OAAQC,EACR,IAAKL,GACDQ,GAEHH,IACEE,GAGCxB,EAAA,cAAC,QAAK,aAAW,eAAe,UAAW2B,EAAO,UAChD3B,EAAA,cAACG,EAAA,CAAS,UAAWwB,EAAO,KAAM,QAAQ,QAAQ,CACpD,GAEJ3B,EAAA,cAACE,EAAA,CACC,QAASiB,EACT,SAAS,OACT,uBAAwBQ,EAAO,MAC/B,WAAY,CAACC,GAEb5B,EAAA,cAAC,QAAK,IAAK8B,GAAiBX,CAAM,CACpC,EACCC,GACCpB,EAAA,cAACK,EAAA,CACC,KAAK,SACL,QAAQ,cACR,UAAWL,EAAA,cAACI,EAAA,CAAU,aAAW,QAAQ,EACzC,aAAW,QACX,QAASgB,EACT,UAAWO,EAAO,YACpB,CAEJ,CAEJ,CACF,EAEAZ,EAAK,YAAc","sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { DragIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { PillVariants } from './types';\nimport { getPillStyles } from './Pill.styles';\n\nexport type PillInternalProps = CommonProps & {\n  /**\n   * Text that will be shown on the pill\n   */\n  label: string;\n  /**\n   * Function that handles when the close icon is clicked. Close icon visibility depends on if this property is set.\n   */\n  onClose?: () => void;\n  /**\n   * Function that handles when the pill is dragged. Drag icon visibility depends on if this property is set.\n   */\n  onDrag?: () => void;\n  /**\n   * Custom component to be used as handler for the drag functionality.\n   */\n  dragHandleComponent?: React.ReactNode;\n  /**\n   * Determines style variation of Pill component\n   * @default idle\n   */\n  variant?: PillVariants;\n};\n\nexport type PillProps = PropsWithHTMLElement<PillInternalProps, 'div'>;\n\nexport const Pill = React.forwardRef<HTMLDivElement, ExpandProps<PillProps>>(\n  (props, ref) => {\n    const {\n      label,\n      onClose,\n      testId = 'cf-ui-pill',\n      onDrag,\n      className,\n      dragHandleComponent,\n      variant = 'idle',\n      ...otherProps\n    } = props;\n\n    const styles = getPillStyles(variant);\n    const [textIsTruncated, setTextIsTruncated] = React.useState(false);\n\n    const trackRefChange = React.useCallback(\n      (ref: HTMLDivElement | null) => {\n        if (!ref) {\n          return;\n        }\n        const { scrollWidth, offsetWidth } = ref.parentElement;\n        setTextIsTruncated(scrollWidth > offsetWidth);\n      },\n      [setTextIsTruncated],\n    );\n\n    return (\n      <div\n        className={cx(styles.pill, className)}\n        data-test-id={testId}\n        onDrag={onDrag}\n        ref={ref}\n        {...otherProps}\n      >\n        {onDrag &&\n          (dragHandleComponent ? (\n            dragHandleComponent\n          ) : (\n            <span aria-label=\"Drag handler\" className={styles.dragIcon}>\n              <DragIcon className={styles.icon} variant=\"muted\" />\n            </span>\n          ))}\n        <Tooltip\n          content={label}\n          maxWidth=\"none\"\n          targetWrapperClassName={styles.label}\n          isDisabled={!textIsTruncated}\n        >\n          <span ref={trackRefChange}>{label}</span>\n        </Tooltip>\n        {onClose && (\n          <Button\n            type=\"button\"\n            variant=\"transparent\"\n            startIcon={<CloseIcon aria-label=\"Close\" />}\n            aria-label=\"Close\"\n            onClick={onClose}\n            className={styles.closeButton}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nPill.displayName = 'Pill';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { PillVariants } from './types';\n\nconst getCloseButtonStyle = () => {\n  return css({\n    borderLeft: `1px solid ${tokens.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: tokens.spacingXs,\n    minHeight: 'auto',\n    transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n    opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    '&:focus': {\n      boxShadow: tokens.glowMuted,\n      borderLeftColor: tokens.gray300,\n    },\n    '&:hover, &:focus, &:active': {\n      backgroundColor: tokens.gray300,\n    },\n  });\n};\n\nconst getLabelStyle = () => {\n  return css({\n    color: tokens.gray700,\n    lineHeight: tokens.lineHeightM,\n    padding: tokens.spacingXs,\n    fontSize: tokens.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  });\n};\n\nconst getPillStyle = (variant: PillVariants) => {\n  const variantStyle = (variant: PillVariants) => {\n    switch (variant) {\n      case 'active':\n        return {\n          background: tokens.gray300,\n        };\n      case 'deleted':\n        return {\n          background: tokens.gray200,\n          textDecoration: 'line-through',\n          opacity: '0.5',\n        };\n      default:\n        return {\n          background: tokens.gray200,\n        };\n    }\n  };\n\n  return css({\n    display: 'inline-flex',\n    fontFamily: tokens.fontStackPrimary,\n    alignItems: 'center',\n    borderRadius: tokens.borderRadiusSmall,\n    border: 'none',\n    padding: 0,\n    maxWidth: '100%',\n    ...variantStyle(variant),\n  });\n};\n\nexport function getPillStyles(variant: PillVariants) {\n  return {\n    closeButton: getCloseButtonStyle(),\n    label: getLabelStyle(),\n    icon: css({\n      fill: tokens.gray600,\n      verticalAlign: 'middle',\n      outline: 'none',\n    }),\n    dragIcon: css({\n      padding: tokens.spacingXs,\n      paddingRight: 0,\n      cursor: 'move',\n    }),\n    pill: getPillStyle(variant),\n  };\n}\n"]}