{"version":3,"sources":["../../src/Badge/Badge.tsx","../../src/Badge/Badge.styles.ts","../../src/EntityStatusBadge/EntityStatusBadge.tsx"],"names":["React","cx","Box","tokens","css","variantToStyles","variant","sizeToStyles","size","getBadgeStyles","__spreadValues","Badge","props","ref","styles","_a","children","testId","startIcon","endIcon","className","otherProps","__objRest","iconContent","icon","__spreadProps","statusMap","EntityStatusBadge","entityStatus","_EntityStatusBadge"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n  type PickUnion,\n} from '@contentful/f36-core';\n\nimport type { BadgeSize, BadgeVariant } from '../types';\nimport { getBadgeStyles } from './Badge.styles';\n\ntype BadgeSizeWithIconProps =\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size?: Exclude<BadgeSize, 'small'>;\n      /**\n       * Expects any of the icon components. Renders the icon aligned to the start\n       */\n      startIcon?: React.ReactElement;\n      /**\n       * Expects any of the icon components. Renders the icon aligned to the end\n       */\n      endIcon?: React.ReactElement;\n    }\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size: PickUnion<BadgeSize, 'small'>;\n      // We use discriminative union typing, so in case the size is set as small we don't allow startIcon or endIcon\n      startIcon?: never;\n      endIcon?: never;\n    };\n\nexport type BadgeInternalProps = CommonProps &\n  BadgeSizeWithIconProps & {\n    /**\n     * Determines the variation of the component\n     * @default primary\n     */\n    variant?: BadgeVariant;\n\n    children: React.ReactNode;\n  };\n\nexport type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;\n\nexport const Badge = React.forwardRef<HTMLDivElement, ExpandProps<BadgeProps>>(\n  (props, ref) => {\n    const styles = getBadgeStyles();\n    const {\n      children,\n      variant = 'primary',\n      size = 'default',\n      testId = 'cf-ui-badge',\n      startIcon,\n      endIcon,\n      className,\n      ...otherProps\n    } = props;\n\n    const iconContent = (icon) =>\n      React.cloneElement(icon, {\n        size: 'tiny',\n        className: cx(styles.badgeIcon, icon.props.className),\n        variant: variant === 'primary-filled' ? 'white' : variant,\n      });\n\n    return (\n      <Box\n        as=\"div\"\n        testId={testId}\n        display=\"inline-flex\"\n        className={cx(styles.badge({ variant, size }), className)}\n        {...otherProps}\n        ref={ref}\n      >\n        {startIcon && size === 'default' && iconContent(startIcon)}\n        <span className={styles.badgeText}>{children}</span>\n        {endIcon && size === 'default' && iconContent(endIcon)}\n      </Box>\n    );\n  },\n);\n\nBadge.displayName = 'Badge';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport type { BadgeVariant, BadgeSize, BadgeStylesProps } from '../types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst variantToStyles = ({ variant }: { variant: BadgeVariant }): CSSObject => {\n  switch (variant) {\n    case 'positive':\n      return {\n        color: tokens.green600,\n        backgroundColor: tokens.green200,\n      };\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        backgroundColor: tokens.blue200,\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.red200,\n      };\n    case 'warning':\n      return {\n        color: tokens.orange600,\n        backgroundColor: tokens.orange200,\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray700,\n        backgroundColor: tokens.gray200,\n      };\n    case 'primary-filled':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue600,\n      };\n    case 'featured':\n      return {\n        color: tokens.purple600,\n        backgroundColor: tokens.purple200,\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = ({ size }: { size: BadgeSize }): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        padding: `3px ${tokens.spacing2Xs}`,\n        fontSize: '0.625rem',\n        lineHeight: '0.625rem',\n        maxHeight: '16px',\n      };\n    default:\n      return {\n        padding: `0 ${tokens.spacingXs}`,\n        fontSize: `calc(1rem * (12 / ${tokens.fontBaseDefault}))`,\n        lineHeight: '20px',\n        maxHeight: '20px',\n      };\n  }\n};\n\nexport const getBadgeStyles = () => ({\n  badge: ({ variant, size }: BadgeStylesProps) =>\n    css({\n      columnGap: tokens.spacing2Xs,\n      alignItems: 'center',\n      fontFamily: tokens.fontStackPrimary,\n      fontWeight: tokens.fontWeightDemiBold,\n      textTransform: 'uppercase',\n      letterSpacing:\n        '0.06rem' /*move to tokens or update wide letter spacing token*/,\n      borderRadius: `${tokens.borderRadiusSmall}`,\n      overflow: 'hidden',\n      verticalAlign: 'middle',\n      ...variantToStyles({ variant }),\n      ...sizeToStyles({ size }),\n    }),\n  badgeIcon: css({\n    flexShrink: 0,\n  }),\n  badgeText: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import React from 'react';\nimport type { EntityStatus, ExpandProps } from '@contentful/f36-core';\n\nimport { Badge, type BadgeProps } from '../Badge/Badge';\nimport type { BadgeVariant } from '../types';\n\nconst statusMap: { [key in EntityStatus]: BadgeVariant } = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'negative',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled',\n};\n\nexport interface EntityStatusBadgeProps\n  extends Omit<BadgeProps, 'variant' | 'children' | 'endIcon' | 'startIcon'> {\n  entityStatus: EntityStatus;\n}\n\nfunction EntityStatusBadge(\n  props: EntityStatusBadgeProps,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { entityStatus, size = 'default', ...otherProps } = props;\n  const variant = statusMap[entityStatus];\n  return (\n    <Badge {...otherProps} size={size} variant={variant} ref={ref}>\n      {entityStatus}\n    </Badge>\n  );\n}\n\nEntityStatusBadge.displayName = 'EntityStatusBadge';\n\nconst _EntityStatusBadge = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<EntityStatusBadgeProps>\n>(EntityStatusBadge);\nexport { _EntityStatusBadge as EntityStatusBadge };\n"]}