{"version":3,"sources":["../src/Datepicker.tsx","../src/Datepicker.styles.ts","../src/Calendar/Calendar.tsx","../src/Calendar/Calendar.styles.ts","../src/Calendar/CalendarCaption.tsx","../src/Calendar/CalendarCaptionLabel.tsx","../src/Calendar/index.ts"],"names":["React","useCallback","useEffect","useState","format","isValid","parse","startOfDay","endOfDay","css","tokens","getStyles","cellSize","DayPicker","CaptionDropdowns","CaptionNavigation","useDayPicker","Flex","CalendarCaption","props","styles","fromDate","toDate","numberOfMonths","isDropdownsVisible","__spreadValues","Heading","cx","CalendarCaptionLabel","formatCaption","locale","isVisuallyHidden","Calendar","_a","__spreadProps","Day","DayContent","Popover","FocusLock","TextInput","IconButton","CalendarIcon","Datepicker","testId","className","style","inputProps","popoverProps","selected","onSelect","dateFormat","defaultIsOpen","otherProps","__objRest","isDateValid","date","parseInputDate","value","isPopoverOpen","setIsPopoverOpen","inputValue","setInputValue","handleInputChange","e","handleDaySelect","isTextInputValueInvalid","DatepickerTrigger","prevState","ref","children","onTriggerClick","isDisabled","popoverTriggerProps"],"mappings":"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","sourcesContent":["import React, {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useState,\n} from 'react';\nimport { CommonProps } from '@contentful/f36-core';\n\nimport { format, isValid, parse, startOfDay, endOfDay } from 'date-fns';\nimport { getStyles } from './Datepicker.styles';\nimport { Calendar } from './Calendar';\nimport { Popover } from '@contentful/f36-popover';\nimport { DayPickerSingleProps } from 'react-day-picker';\nimport FocusLock from 'react-focus-lock';\nimport { TextInput, TextInputProps } from '@contentful/f36-forms';\nimport { IconButton } from '@contentful/f36-button';\nimport { CalendarIcon } from '@contentful/f36-icons';\nimport { PopoverProps } from '@contentful/f36-popover';\n\nexport type DatepickerProps = CommonProps & {\n  /**\n   * Callback fired when the day is selected\n   */\n  onSelect: (day: Date | undefined) => void;\n\n  /**\n   * Format that is used to display date in the input,\n   * It is based on (Unicode Technical Standart #35)[https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table]\n   *\n   * @default 'dd LLL yyyy' e.g. 31 Jan 2022\n   */\n  dateFormat?: string;\n\n  /**\n   * If `true`, the Datepicker will be initially opened.\n   */\n  defaultIsOpen?: boolean;\n\n  /**\n   * Props to pass to the TextInput component\n   */\n  inputProps?: Partial<TextInputProps>;\n\n  /**\n   * Props to pass to the Popover (Dropdown) component\n   */\n  popoverProps?: Partial<PopoverProps>;\n} & Omit<\n    DayPickerSingleProps,\n    | 'mode'\n    | 'onSelect'\n    | 'fromMonth'\n    | 'toMonth'\n    | 'fromYear'\n    | 'toYear'\n    | 'classNames'\n    | 'className'\n  >;\n\n/**\n * Provides functionality for date selection.\n */\nexport function Datepicker(props: DatepickerProps) {\n  const styles = getStyles();\n  const {\n    testId = 'cf-ui-datepicker',\n    className,\n    style,\n    inputProps,\n    popoverProps,\n    selected,\n    onSelect,\n    fromDate,\n    toDate,\n    locale,\n    dateFormat = 'dd LLL yyyy',\n    defaultIsOpen,\n    ...otherProps\n  } = props;\n\n  const isDateValid = useCallback(\n    (date: Date) => {\n      if (!isValid(date)) {\n        return false;\n      }\n      if (fromDate && startOfDay(fromDate).getTime() > date.getTime()) {\n        return false;\n      }\n      if (toDate && date.getTime() > endOfDay(toDate).getTime()) {\n        return false;\n      }\n      return true;\n    },\n    [fromDate, toDate],\n  );\n\n  const parseInputDate = useCallback(\n    (value: string) => parse(value, dateFormat, new Date(), { locale }),\n    [locale, dateFormat],\n  );\n\n  const [isPopoverOpen, setIsPopoverOpen] = useState(defaultIsOpen);\n  const [inputValue, setInputValue] = useState<string>(() =>\n    selected ? format(selected, dateFormat) : '',\n  );\n\n  useEffect(() => {\n    if (!selected) {\n      setInputValue('');\n      return;\n    }\n\n    if (selected.getTime() !== parseInputDate(inputValue).getTime()) {\n      setInputValue(format(selected, dateFormat));\n    }\n    // we want to run this hook only when `selected` prop changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selected]);\n\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = useCallback(\n    (e) => {\n      setInputValue(e.currentTarget.value);\n\n      const date = parseInputDate(e.currentTarget.value);\n      if (isDateValid(date)) {\n        onSelect(date);\n      } else {\n        onSelect(undefined);\n      }\n    },\n    [onSelect, parseInputDate, isDateValid],\n  );\n\n  const handleDaySelect = useCallback(\n    (date: Date) => {\n      if (date && isDateValid(date)) {\n        onSelect(date);\n        setIsPopoverOpen(false);\n      }\n    },\n    [onSelect, isDateValid],\n  );\n\n  const isTextInputValueInvalid =\n    inputValue && !isDateValid(parseInputDate(inputValue));\n\n  return (\n    <Popover\n      isOpen={isPopoverOpen}\n      onClose={() => setIsPopoverOpen(false)}\n      {...popoverProps}\n    >\n      <Popover.Trigger>\n        {/* we need this additional component to pass <Popover.Trigger> props to the correct trigger button */}\n        <DatepickerTrigger\n          className={className}\n          style={style}\n          testId={testId}\n          isDisabled={inputProps?.isDisabled}\n          onTriggerClick={() => {\n            setIsPopoverOpen((prevState) => !prevState);\n          }}\n        >\n          <TextInput\n            placeholder={format(new Date(), dateFormat)}\n            value={inputValue}\n            onChange={handleInputChange}\n            isInvalid={inputProps?.isInvalid || isTextInputValueInvalid}\n            aria-label=\"Enter date\"\n            testId=\"cf-ui-datepicker-input\"\n            {...inputProps}\n          />\n        </DatepickerTrigger>\n      </Popover.Trigger>\n      <Popover.Content>\n        <FocusLock returnFocus={true}>\n          <Calendar\n            {...otherProps}\n            className={styles.calendar}\n            mode=\"single\"\n            selected={selected}\n            onSelect={handleDaySelect}\n            initialFocus={false}\n            defaultMonth={selected}\n            fromDate={fromDate}\n            toDate={toDate}\n            locale={locale}\n          />\n        </FocusLock>\n      </Popover.Content>\n    </Popover>\n  );\n}\n\ntype DatepickerTriggerProps = {\n  children: React.ReactNode;\n  isDisabled: boolean;\n  onTriggerClick: () => void;\n} & Pick<DatepickerProps, 'className' | 'style' | 'testId'>;\n\n// eslint-disable-next-line react/display-name\nconst DatepickerTrigger = React.forwardRef<\n  HTMLDivElement,\n  DatepickerTriggerProps\n>((props, ref) => {\n  const {\n    children,\n    testId,\n    style,\n    className,\n    onTriggerClick,\n    isDisabled,\n    // props will be passed from <Popover.Trigger> wrapper\n    ...popoverTriggerProps\n  } = props;\n\n  return (\n    <TextInput.Group\n      ref={ref}\n      className={className}\n      style={style}\n      testId={testId}\n    >\n      {children}\n      <IconButton\n        aria-label=\"Use calendar\"\n        variant=\"secondary\"\n        icon={<CalendarIcon aria-label=\"calendar\" />}\n        onClick={onTriggerClick}\n        isDisabled={isDisabled}\n        testId=\"cf-ui-datepicker-button\"\n        {...popoverTriggerProps}\n      />\n    </TextInput.Group>\n  );\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = () => {\n  return {\n    calendar: css({\n      padding: tokens.spacingM,\n    }),\n  };\n};\n","import React from 'react';\n\nimport { getStyles } from './Calendar.styles';\n\nimport {\n  DayPicker,\n  DayPickerDefaultProps,\n  DayPickerSingleProps,\n} from 'react-day-picker';\nimport { CalendarCaption } from './CalendarCaption';\nimport { CalendarCaptionLabel } from './CalendarCaptionLabel';\n\nexport type CalendarProps =\n  | Omit<DayPickerDefaultProps, 'classNames'>\n  | Omit<DayPickerSingleProps, 'classNames'>;\n\n/**\n * Provides functionality for calendar date selection. Used as a part of Datepicker component.\n * Based on the [React DayPicker](https://react-day-picker.js.org/) library.\n */\nexport function Calendar(props: CalendarProps) {\n  const styles = getStyles();\n\n  return (\n    <DayPicker\n      {...props}\n      weekStartsOn={props.weekStartsOn ?? 1}\n      classNames={styles}\n      components={{\n        Caption: CalendarCaption,\n        CaptionLabel: CalendarCaptionLabel,\n        ...props.components,\n      }}\n    />\n  );\n}\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { ClassNames } from 'react-day-picker';\n\nconst cellSize = 40;\n\nexport const getStyles = (): ClassNames => {\n  return {\n    vhidden: css({\n      boxSizing: 'border-box',\n      padding: '0',\n      margin: '0',\n      background: 'transparent',\n      border: '0',\n      MozAppearance: 'none',\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      position: 'absolute',\n      top: '0',\n      width: '1px',\n      height: '1px',\n      overflow: 'hidden',\n      clip: 'rect(1px, 1px, 1px, 1px)',\n    }),\n    button_reset: css({\n      appearance: 'none',\n      position: 'relative',\n      margin: 0,\n      padding: 0,\n      border: 'none',\n      outline: 'none',\n      background: 'none',\n    }),\n    button: css({\n      borderRadius: '50%',\n      cursor: 'pointer',\n      color: tokens.gray900,\n\n      '&.rdp-day_disabled': {\n        color: tokens.gray400,\n        pointerEvents: 'none',\n      },\n      '&:focus, &:active': {\n        boxShadow: tokens.glowPrimary,\n      },\n\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset',\n      },\n\n      '&:hover': {\n        backgroundColor: tokens.gray200,\n      },\n\n      '&.rdp-day_selected:not(.rdp-day_disabled)': {\n        backgroundColor: tokens.blue600,\n        color: tokens.colorWhite,\n        fontWeight: tokens.fontWeightDemiBold,\n      },\n    }),\n\n    months: css({\n      display: 'flex',\n    }),\n    month: css({\n      width: '100%',\n      margin: '0 1em',\n      '&:first-child': {\n        marginLeft: 0,\n      },\n      '&:last-child': {\n        marginRight: 0,\n      },\n    }),\n    table: css({\n      width: '100%',\n      margin: 0,\n      borderCollapse: 'collapse',\n    }),\n    caption: css({\n      position: 'relative',\n      padding: 0,\n      textAlign: 'left',\n\n      '.rdp-multiple_months &': {\n        display: 'block',\n        textAlign: 'center',\n      },\n    }),\n    caption_dropdowns: css({\n      position: 'relative',\n      display: 'inline-flex',\n    }),\n    caption_label: css({\n      position: 'relative',\n      zIndex: 1,\n      display: 'inline-flex',\n      alignItems: 'center',\n      margin: '0',\n      padding: `0 ${tokens.spacingXs}`,\n      height: '2rem',\n      whiteSpace: 'nowrap',\n      fontSize: tokens.fontSizeM,\n      fontWeight: tokens.fontWeightMedium,\n      borderRadius: tokens.borderRadiusMedium,\n\n      '& + &': {\n        marginLeft: '3px',\n      },\n    }),\n    nav: css({\n      whiteSpace: 'nowrap',\n\n      '.rdp-multiple_months .rdp-caption_start &': {\n        position: 'absolute',\n        top: '50%',\n        left: '0',\n        transform: 'translateY(-50%)',\n      },\n\n      '.rdp-multiple_months .rdp-caption_end &': {\n        position: 'absolute',\n        top: '50%',\n        right: '0',\n        transform: 'translateY(-50%)',\n      },\n    }),\n\n    nav_button: css({\n      width: '2rem',\n      height: '2rem',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: 'transparent',\n    }),\n    nav_button_previous: css({\n      marginRight: '3px',\n    }),\n    dropdown_month: css({\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }),\n    dropdown_year: css({\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }),\n    dropdown: css({\n      appearance: 'none',\n      position: 'absolute',\n      zIndex: 2,\n      top: '0',\n      bottom: '0',\n      left: '0',\n      width: '100%',\n      margin: '0',\n      padding: '0',\n      cursor: 'pointer',\n      opacity: '0',\n      border: 'none',\n      backgroundColor: 'transparent',\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      lineHeight: 'inherit',\n\n      '&:focus:not([disabled]) + div, &:active:not([disabled]) + div': {\n        boxShadow: tokens.glowPrimary,\n      },\n\n      '&:hover:not([disabled]) + div, &:hover:not([disabled]) + div': {\n        backgroundColor: tokens.gray200,\n      },\n    }),\n\n    dropdown_icon: css({\n      marginLeft: '8px',\n    }),\n\n    head: css({\n      border: 0,\n    }),\n\n    head_row: css({\n      height: '100%',\n    }),\n\n    row: css({\n      height: '100%',\n    }),\n\n    head_cell: css({\n      verticalAlign: 'middle',\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightDemiBold,\n      textAlign: 'center',\n      height: '32px',\n      color: tokens.gray600,\n    }),\n\n    tbody: css({\n      border: 0,\n    }),\n\n    tfoot: css({\n      margin: '0.5em',\n    }),\n\n    cell: css({\n      padding: '2px',\n      textAlign: 'center',\n    }),\n    day: css({\n      display: 'flex',\n      overflow: 'hidden',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: `${cellSize / 16}rem`,\n      height: `${cellSize / 16}rem`,\n      borderRadius: '50%',\n      margin: 'auto',\n\n      '&.rdp-day_today:not(.rdp-day_outside)': {\n        fontWeight: tokens.fontWeightDemiBold,\n      },\n      '&.rdp-day_today:not(.rdp-day_outside):not(.rdp-day_selected):not(:hover)':\n        {\n          backgroundColor: tokens.blue100,\n        },\n    }),\n\n    nav_icon: css({\n      width: '0.625rem',\n    }),\n  };\n};\n","import React from 'react';\n\nimport {\n  CaptionDropdowns,\n  CaptionNavigation,\n  CaptionProps,\n  useDayPicker,\n} from 'react-day-picker';\nimport { Flex } from '@contentful/f36-core';\nimport { getStyles } from './Calendar.styles';\n\nexport const CalendarCaption = (props: CaptionProps) => {\n  const styles = getStyles();\n  const { fromDate, toDate, numberOfMonths } = useDayPicker();\n\n  const isDropdownsVisible = Boolean(\n    fromDate && toDate && numberOfMonths === 1,\n  );\n\n  return (\n    <Flex\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      className={styles.caption}\n    >\n      {isDropdownsVisible && <CaptionDropdowns {...props} />}\n      <CaptionNavigation {...props} />\n    </Flex>\n  );\n};\n","import React from 'react';\n\nimport { CaptionLabelProps, useDayPicker } from 'react-day-picker';\nimport { Heading } from '@contentful/f36-typography';\nimport { getStyles } from './Calendar.styles';\nimport { cx } from 'emotion';\n\nexport const CalendarCaptionLabel = (props: CaptionLabelProps) => {\n  const styles = getStyles();\n  const {\n    fromDate,\n    toDate,\n    formatters: { formatCaption },\n    locale,\n    numberOfMonths,\n  } = useDayPicker();\n\n  const isVisuallyHidden = Boolean(fromDate && toDate && numberOfMonths === 1);\n\n  return (\n    <Heading\n      as=\"h2\"\n      aria-live=\"polite\"\n      aria-atomic=\"true\"\n      id={props.id}\n      className={cx(styles.caption_label, isVisuallyHidden && styles.vhidden)}\n    >\n      {formatCaption(props.displayMonth, { locale })}\n    </Heading>\n  );\n};\n","export * from './Calendar';\nexport { Day, DayContent, useDayPicker } from 'react-day-picker';\nexport type { DayProps, DayContentProps } from 'react-day-picker';\n"]}