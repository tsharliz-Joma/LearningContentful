{"version":3,"sources":["../../src/TextLink.tsx","../../src/TextLink.styles.ts"],"names":["React","cx","Flex","css","tokens","variantToStyles","variant","textLink","isDisabled","__spreadProps","__spreadValues","textLinkIcon","textLinkText","alignIcon","styles","TEXT_LINK_DEFAULT_TAG","_TextLink","props","ref","_a","children","className","testId","href","icon","as","otherProps","__objRest","commonProps","iconContent","commonContent","e","TextLink"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  type CommonProps,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { styles } from './TextLink.styles';\nimport { TextLinkVariant } from './types';\n\nconst TEXT_LINK_DEFAULT_TAG = 'a';\n\ninterface TextLinkInternalProps extends CommonProps {\n  children?: React.ReactNode;\n  /**\n   * Determines style variation of TextLink component\n   * @default primary\n   */\n  variant?: TextLinkVariant;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Determines the icon position regarding the link text\n   * @default start\n   */\n  alignIcon?: 'start' | 'end';\n  /**\n   * The element used for the root node.\n   * @default a\n   */\n  as?: 'a' | 'button';\n}\n\nexport type TextLinkProps<\n  E extends React.ElementType = typeof TEXT_LINK_DEFAULT_TAG,\n> = PolymorphicProps<TextLinkInternalProps, E, 'disabled'>;\n\nfunction _TextLink<E extends React.ElementType = typeof TEXT_LINK_DEFAULT_TAG>(\n  props: TextLinkProps<E>,\n  ref: React.Ref<any>,\n) {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-text-link',\n    variant = 'primary',\n    href,\n    icon,\n    alignIcon = 'start',\n    isDisabled,\n    as = TEXT_LINK_DEFAULT_TAG,\n    ...otherProps\n  } = props;\n\n  const commonProps = {\n    ref,\n    className: cx(\n      styles.textLink({\n        variant,\n        isDisabled,\n      }),\n      props.className,\n    ),\n    ['data-test-id']: testId,\n    ...otherProps,\n  };\n\n  const iconContent = icon ? (\n    <Flex as=\"span\">\n      {React.cloneElement(icon, {\n        className: cx(icon.props.className, styles.textLinkIcon()),\n        size: 'small',\n      })}\n    </Flex>\n  ) : null;\n\n  const commonContent = (\n    <>\n      {icon && alignIcon === 'start' && iconContent}\n      {children && (\n        <span\n          className={styles.textLinkText({\n            alignIcon: icon ? alignIcon : undefined,\n          })}\n        >\n          {children}\n        </span>\n      )}\n      {icon && alignIcon === 'end' && iconContent}\n    </>\n  );\n\n  if (as === 'button') {\n    return (\n      <button {...commonProps} disabled={isDisabled} type=\"button\">\n        {commonContent}\n      </button>\n    );\n  }\n\n  return (\n    <a\n      {...commonProps}\n      onClick={\n        isDisabled\n          ? (e) => {\n              e.preventDefault();\n            }\n          : commonProps.onClick\n      }\n      href={href}\n      {...(isDisabled ? { tabIndex: -1 } : {})}\n    >\n      {commonContent}\n    </a>\n  );\n}\n\n_TextLink.displayName = 'TextLink';\n\nexport const TextLink: PolymorphicComponent<\n  ExpandProps<TextLinkInternalProps>,\n  typeof TEXT_LINK_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_TextLink);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { TextLinkProps } from './TextLink';\nimport { TextLinkVariant } from './types';\n\nconst variantToStyles = (variant: TextLinkVariant) => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        '&:hover, &:focus': {\n          color: tokens.blue700,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray600,\n        '&:hover, &:focus': {\n          color: tokens.gray700,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.green600,\n        '&:hover, &:focus': {\n          color: tokens.green700,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        '&:hover, &:focus': {\n          color: tokens.red700,\n        },\n      };\n    case 'muted':\n      return {\n        color: tokens.gray400,\n        '&:hover, &:focus': {\n          color: tokens.gray500,\n        },\n      };\n    case 'white':\n      return {\n        color: tokens.colorWhite,\n        '&:hover, &:focus': {\n          color: tokens.gray100,\n        },\n      };\n    default:\n      return { color: tokens.colorWhite };\n  }\n};\n\nconst textLink = ({\n  variant,\n  isDisabled,\n}: Pick<TextLinkProps, 'variant' | 'isDisabled'>) =>\n  css({\n    display: 'inline-flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxSizing: 'border-box',\n    border: 0,\n    padding: 0,\n    margin: 0, // remove the default button margin in Safari.\n    fontFamily: tokens.fontStackPrimary,\n    fontSize: tokens.fontSizeM,\n    fontWeight: tokens.fontWeightMedium,\n    transition: `color ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n    textDecoration: 'none',\n    background: 'none',\n    appearance: 'none',\n    whiteSpace: 'normal',\n    textAlign: 'left',\n    cursor: isDisabled ? 'not-allowed' : 'pointer',\n    opacity: isDisabled ? 0.5 : 1,\n    ...variantToStyles(variant),\n    outline: 'none',\n    verticalAlign: 'bottom',\n    '&:focus, &:focus-visible, &:hover': {\n      textDecoration: isDisabled ? 'none' : 'underline',\n    },\n    '&:focus': {\n      boxShadow: isDisabled ? 'none' : tokens.glowPrimary,\n      borderRadius: tokens.borderRadiusSmall,\n    },\n    '&:focus:not(:focus-visible)': {\n      borderRadius: 0,\n      boxShadow: 'none',\n    },\n    '&:focus-visible': {\n      borderRadius: tokens.borderRadiusSmall,\n      boxShadow: isDisabled ? 'none' : tokens.glowPrimary,\n    },\n  });\n\nconst textLinkIcon = () =>\n  css({\n    fill: 'currentColor',\n    transition: `fill ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n  });\n\nconst textLinkText = ({ alignIcon }: Pick<TextLinkProps, 'alignIcon'>) => {\n  if (alignIcon === 'start') {\n    return css({\n      marginLeft: tokens.spacing2Xs,\n    });\n  }\n\n  if (alignIcon === 'end') {\n    return css({\n      marginRight: tokens.spacing2Xs,\n    });\n  }\n};\n\nexport const styles = {\n  textLink,\n  textLinkIcon,\n  textLinkText,\n};\n"]}