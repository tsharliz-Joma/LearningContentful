{"version":3,"sources":["../src/ButtonGroup/ButtonGroup.tsx","../src/ButtonGroup/ButtonGroup.styles.ts","../src/ToggleButton/ToggleButton.tsx","../src/Button/Button.tsx","../src/Button/Button.styles.ts","../src/ToggleButton/ToggleButton.styles.ts","../src/IconButton/IconButton.tsx"],"names":["cx","React","Box","Stack","css","tokens","getGroupContentStyle","withDivider","dividerStyle","getDividerStyle","__spreadValues","ButtonGroup_styles_default","_ButtonGroup","props","ref","variant","testId","children","className","spacing","styles","child","key","ButtonGroup","Flex","Spinner","variantActiveStyles","variantToStyles","sizeToStyles","size","getButtonIconStyle","hasChildren","align","getStyles","isActive","isDisabled","isFullWidth","BUTTON_DEFAULT_TAG","_Button","_a","as","startIcon","endIcon","isLoading","style","otherProps","__objRest","rootClassNames","iconContent","icon","defaultIconColor","commonContent","commonProps","__spreadProps","Button","getToggleButtonStyle","activeStyle","baseStyle","ToggleButton_styles_default","_ToggleButton","onToggle","ToggleButton","_IconButton","IconButton"],"mappings":"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","sourcesContent":["import { cx } from 'emotion';\nimport React from 'react';\nimport { Box, Stack, type ExpandProps } from '@contentful/f36-core';\nimport getStyles from './ButtonGroup.styles';\nimport type { ButtonGroupProps } from './types';\n\nfunction _ButtonGroup(\n  props: ExpandProps<ButtonGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    variant = 'merged',\n    withDivider,\n    testId = 'cf-ui-button-group',\n    children,\n    className,\n    spacing,\n  } = props;\n  const styles = getStyles({ withDivider });\n\n  if (variant === 'spaced') {\n    return (\n      <Stack\n        className={className}\n        isInline\n        flexDirection=\"row\"\n        testId={testId}\n        ref={ref}\n        spacing={spacing}\n      >\n        {children}\n      </Stack>\n    );\n  }\n\n  return (\n    <Box\n      testId={testId}\n      ref={ref}\n      className={cx(styles.buttonGroup, className)}\n    >\n      {React.Children.map(children, (child, key) => {\n        if (!child) {\n          return null;\n        }\n        return React.cloneElement(child as React.ReactElement, {\n          key,\n          className: cx(\n            styles.groupContent,\n            (child as React.ReactElement).props.className,\n          ),\n        });\n      })}\n    </Box>\n  );\n}\n\n_ButtonGroup.displayName = 'ButtonGroup';\n\nexport const ButtonGroup = React.forwardRef(_ButtonGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { GetStyleArguments } from './types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst getGroupContentStyle = ({ withDivider }: GetStyleArguments) => {\n  const dividerStyle = getDividerStyle(withDivider);\n\n  return {\n    borderRadius: '0 !important',\n    marginRight: '-1px',\n    zIndex: tokens.zIndexDefault,\n    '&:first-child': {\n      borderBottomLeftRadius: `${tokens.borderRadiusMedium} !important`,\n      borderTopLeftRadius: `${tokens.borderRadiusMedium} !important`,\n    },\n    '&:last-child': {\n      borderBottomRightRadius: `${tokens.borderRadiusMedium} !important`,\n      borderTopRightRadius: `${tokens.borderRadiusMedium} !important`,\n      marginRight: 0,\n    },\n    '&:focus': {\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    ...dividerStyle,\n  };\n};\n\nconst getDividerStyle = (withDivider: boolean): CSSObject => {\n  if (!withDivider) return {};\n  return {\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      width: '1px',\n      opacity: '20%',\n      backgroundColor: tokens.colorWhite,\n      height: '60%',\n      left: '0',\n      position: 'absolute',\n    },\n    '&:first-child, &:focus': {\n      '&:before': {\n        display: 'none',\n      },\n    },\n    '&:hover, &:hover + &': {\n      '&:before': {\n        display: 'none',\n      },\n    },\n  };\n};\n\nexport default ({ withDivider }: GetStyleArguments) => ({\n  buttonGroup: css({\n    display: 'inline-flex',\n    position: 'relative',\n  }),\n  groupContent: css(getGroupContentStyle({ withDivider })),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport getStyles from './ToggleButton.styles';\nimport { ButtonSize } from '../types';\n\nexport interface ToggleButtonProps extends CommonProps {\n  /**\n   * Applies active styles\n   * @default false\n   */\n  isActive?: boolean;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Function triggered when the toggle button is clicked.\n   */\n  onToggle: () => void;\n\n  /**\n   * Determines size variation of Button component\n   * @default medium\n   */\n  size?: ButtonSize;\n\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label'?: string;\n\n  children?: React.ReactNode;\n}\n\nfunction _ToggleButton(props: ExpandProps<ToggleButtonProps>, ref) {\n  const {\n    testId = 'cf-ui-toggle-button',\n    children,\n    className,\n    isDisabled = false,\n    isActive = false,\n    icon,\n    onToggle,\n    size = 'medium',\n    ...otherProps\n  } = props;\n\n  const styles = getStyles({ isActive, isDisabled });\n\n  const handleToggle = () => {\n    if (!isDisabled && onToggle) {\n      onToggle();\n    }\n  };\n\n  return (\n    <Button\n      testId={testId}\n      type=\"button\"\n      ref={ref}\n      size={size}\n      onClick={handleToggle}\n      className={cx(styles.toggleButton, className)}\n      startIcon={icon}\n      isDisabled={isDisabled}\n      aria-pressed={isActive}\n      data-state={isActive ? 'on' : 'off'}\n      {...otherProps}\n    >\n      {children}\n    </Button>\n  );\n}\n\n_ToggleButton.displayName = 'ToggleButton';\n\nexport const ToggleButton = React.forwardRef(_ToggleButton);\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  Box,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Spinner } from '@contentful/f36-spinner';\n\nimport type { ButtonInternalProps } from '../types';\nimport { getStyles } from './Button.styles';\n\nconst BUTTON_DEFAULT_TAG = 'button';\n\nexport type ButtonProps<\n  E extends React.ElementType = typeof BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<ButtonInternalProps, E, 'disabled'>;\n\nfunction _Button<E extends React.ElementType = typeof BUTTON_DEFAULT_TAG>(\n  props: ButtonProps<E>,\n  ref: React.Ref<any>,\n) {\n  const styles = getStyles();\n  const {\n    as = BUTTON_DEFAULT_TAG,\n    children,\n    className,\n    testId = 'cf-ui-button',\n    variant = 'secondary',\n    size = 'medium',\n    startIcon,\n    endIcon,\n    isActive,\n    isDisabled,\n    isLoading,\n    isFullWidth,\n    style,\n    ...otherProps\n  } = props;\n\n  const rootClassNames = cx(\n    styles.button({\n      variant,\n      size,\n      isActive,\n      isDisabled,\n      isFullWidth,\n    }),\n    className,\n  );\n\n  const iconContent = (icon) => {\n    const defaultIconColor: {\n      [Property in ButtonInternalProps['variant']]: string;\n    } = {\n      primary: 'white',\n      secondary: 'secondary',\n      positive: 'white',\n      negative: 'white',\n      transparent: 'secondary',\n    };\n\n    return (\n      !isLoading && (\n        <Flex\n          as=\"span\"\n          className={styles.buttonIcon({ hasChildren: !!children, variant })}\n        >\n          {React.cloneElement(icon, {\n            size: icon.props.size ?? `${size === 'large' ? 'medium' : 'small'}`,\n            // we want to allow variants for icons for transparent buttons\n            variant:\n              (variant === 'transparent' && icon.props.variant) ||\n              defaultIconColor[variant],\n          })}\n        </Flex>\n      )\n    );\n  };\n\n  const commonContent = (\n    <>\n      {startIcon && iconContent(startIcon)}\n      {children && (\n        <Box as=\"span\" display=\"block\" className={styles.buttonContent}>\n          {children}\n        </Box>\n      )}\n      {endIcon && iconContent(endIcon)}\n      {isLoading && (\n        <Box\n          as=\"span\"\n          marginLeft={children || !isLoading ? 'spacingXs' : 'none'}\n        >\n          <Spinner\n            customSize={18}\n            variant={variant === 'secondary' ? 'default' : 'white'}\n          />\n        </Box>\n      )}\n    </>\n  );\n\n  const commonProps = {\n    ['data-test-id']: testId,\n    className: rootClassNames,\n    ref: ref,\n    style,\n  };\n\n  if (as === 'a') {\n    return (\n      <a {...otherProps} {...commonProps} disabled={isDisabled}>\n        {commonContent}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      {...otherProps}\n      {...commonProps}\n      disabled={isDisabled}\n    >\n      {commonContent}\n    </button>\n  );\n}\n\n_Button.displayName = 'Button';\n\n/**\n * @description: Buttons communicate the action that will occur when the user clicks it\n */\nexport const Button: PolymorphicComponent<\n  ExpandProps<ButtonInternalProps>,\n  typeof BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_Button);\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\nimport { ButtonSize, ButtonVariant, ButtonStylesProps } from '../types';\n\nconst variantActiveStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return { backgroundColor: tokens.blue700, borderColor: tokens.blue700 };\n    case 'secondary':\n      return { backgroundColor: tokens.gray200 };\n    case 'positive':\n      return { backgroundColor: tokens.green700, borderColor: tokens.green700 };\n    case 'negative':\n      return { backgroundColor: tokens.red800, borderColor: tokens.red800 };\n    case 'transparent':\n      return { backgroundColor: tokens.gray100, borderColor: tokens.gray100 };\n    default:\n      return {};\n  }\n};\n\nconst variantToStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue500,\n        borderColor: tokens.blue500,\n        '&:hover': {\n          backgroundColor: tokens.blue600,\n          borderColor: tokens.blue600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          borderColor: tokens.blue600,\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          borderColor: tokens.blue500,\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          borderColor: tokens.blue600,\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray900,\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.gray900,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.colorPositive,\n        borderColor: tokens.colorPositive,\n        '&:hover': {\n          backgroundColor: tokens.green600,\n          borderColor: tokens.green600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          borderColor: tokens.green600,\n          boxShadow: tokens.glowPositive,\n        },\n        '&:focus:not(:focus-visible)': {\n          borderColor: tokens.colorPositive,\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          borderColor: tokens.green600,\n          boxShadow: tokens.glowPositive,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.red600,\n        borderColor: tokens.red600,\n        '&:hover': {\n          backgroundColor: tokens.red700,\n          borderColor: tokens.red700,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          borderColor: tokens.red700,\n          boxShadow: tokens.glowNegative,\n        },\n        '&:focus:not(:focus-visible)': {\n          borderColor: tokens.red600,\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          borderColor: tokens.red700,\n          boxShadow: tokens.glowNegative,\n        },\n      };\n    case 'transparent':\n      return {\n        color: tokens.gray800,\n        background: 'none',\n        borderColor: 'transparent',\n        boxShadow: 'none',\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.gray900,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          backgroundColor: 'transparent',\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = (size: ButtonSize): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        fontSize: tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: `${tokens.spacing2Xs} ${tokens.spacingS}`,\n        minHeight: '32px',\n      };\n    case 'medium':\n      return {\n        fontSize: tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '40px',\n      };\n    case 'large':\n      return {\n        fontSize: tokens.fontSizeXl,\n        lineHeight: tokens.lineHeightXl,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '48px',\n      };\n    default:\n      return {};\n  }\n};\n\nconst getButtonIconStyle = ({ hasChildren, variant }) => {\n  const align = {\n    '&:first-child': { marginRight: tokens.spacing2Xs },\n    '&:last-child': { marginLeft: tokens.spacing2Xs },\n  };\n\n  const margin = hasChildren ? align : {};\n\n  return css([\n    margin,\n    // we want to allow variants for icons, but only in the transparent IconButton\n    variant !== 'transparent' &&\n      hasChildren && {\n        '& svg': {\n          fill: 'currentColor',\n        },\n      },\n  ]);\n};\n\nexport const getStyles = () => ({\n  button: ({\n    variant,\n    size,\n    isActive,\n    isDisabled,\n    isFullWidth,\n  }: ButtonStylesProps) =>\n    css({\n      boxSizing: 'border-box',\n      border: `1px solid`,\n      boxShadow: '0px 1px 0px rgb(25, 37, 50, 0.08)',\n      borderRadius: tokens.borderRadiusMedium,\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      fontFamily: tokens.fontStackPrimary,\n      opacity: isDisabled ? 0.5 : 1,\n      display: isFullWidth ? 'flex' : 'inline-flex',\n      minWidth: isFullWidth ? '100%' : 'auto',\n      maxWidth: isFullWidth ? '100%' : '240px',\n      overflow: 'hidden',\n      flexShrink: 0,\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontWeight: tokens.fontWeightMedium,\n      outline: 'none',\n      textDecoration: 'none',\n      margin: 0, // remove the default margin in Safari.\n      transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n        opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n        border-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      ...variantToStyles(variant),\n      ...sizeToStyles(size),\n      ...(isActive\n        ? {\n            transition: 'none',\n            '&, &:hover': variantActiveStyles(variant),\n          }\n        : {}),\n    }),\n  buttonIcon: getButtonIconStyle,\n  buttonContent: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { GetStyleArguments } from './types';\n\nconst getToggleButtonStyle = ({ isActive, isDisabled }: GetStyleArguments) => {\n  const activeStyle = {\n    background: tokens.blue100,\n    borderColor: tokens.blue600,\n    '&': {\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    '&:hover': {\n      background: tokens.blue100,\n    },\n  };\n\n  const baseStyle = {\n    background: tokens.colorWhite,\n    '&:hover': {\n      background: tokens.colorWhite,\n      borderColor: isDisabled ? tokens.gray300 : tokens.blue600,\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    '&:focus': {\n      boxShadow: tokens.glowPrimary,\n      zIndex: tokens.zIndexDefault + 2,\n    },\n    '&:active, &:active:hover': isDisabled\n      ? {\n          background: tokens.colorWhite,\n          borderColor: tokens.gray300,\n          zIndex: tokens.zIndexDefault + 1,\n        }\n      : {\n          background: tokens.blue100,\n          borderColor: tokens.blue600,\n          zIndex: tokens.zIndexDefault + 1,\n        },\n  };\n\n  if (isActive) {\n    return {\n      ...baseStyle,\n      ...activeStyle,\n    };\n  }\n\n  return baseStyle;\n};\n\nexport default ({ isActive, isDisabled }: GetStyleArguments) => ({\n  toggleButton: css(getToggleButtonStyle({ isActive, isDisabled })),\n});\n","import React from 'react';\nimport type {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport type { ButtonInternalProps } from '../types';\n\ninterface IconButtonInternalProps\n  extends Omit<ButtonInternalProps, 'startIcon' | 'endIcon'> {\n  /**\n   * Expects any of the icon components\n   */\n  icon: React.ReactElement;\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label': string;\n}\n\nconst ICON_BUTTON_DEFAULT_TAG = 'button';\n\nexport type IconButtonProps<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<IconButtonInternalProps, E, 'disabled'>;\n\nfunction _IconButton<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n>(props: IconButtonProps<E>, ref: React.Ref<any>) {\n  const {\n    testId = 'cf-ui-icon-button',\n    variant = 'transparent',\n    icon,\n    ...otherProps\n  } = props;\n\n  return (\n    <Button\n      testId={testId}\n      ref={ref}\n      variant={variant}\n      {...otherProps}\n      startIcon={icon}\n    />\n  );\n}\n\n_IconButton.displayName = 'IconButton';\n\nexport const IconButton: PolymorphicComponent<\n  ExpandProps<IconButtonInternalProps>,\n  typeof ICON_BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_IconButton);\n"]}