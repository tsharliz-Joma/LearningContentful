{"version":3,"sources":["../src/MultiselectOption.tsx","../src/Multiselect.styles.ts","../src/Multiselect.tsx","../src/SelectAllOption.tsx","../src/CompoundMultiselect.tsx"],"names":["React","Checkbox","Text","css","tokens","getMultiselectStyles","listMaxHeight","getStringMatch","cx","MultiselectOption","_a","_b","label","value","itemId","onSelectItem","searchValue","isChecked","isDisabled","className","rest","__objRest","styles","__spreadValues","event","HighlightedItem","item","inputValue","before","match","after","useRef","useState","useCallback","useMemo","mergeRefs","Button","IconButton","TextInput","CloseIcon","ChevronDownIcon","SearchIcon","SkeletonContainer","SkeletonBodyText","Popover","Subheading","iterateOverChildren","children","filter","callback","child","childChildren","countMatchingChildren","counter","_Multiselect","props","ref","startIcon","placeholder","currentSelection","onSearchValueChange","searchPlaceholder","searchInputRef","searchInputName","noMatchesMessage","toggleRef","isLoading","testId","popoverProps","onBlur","listRef","setSearchValue","isOpen","setIsOpen","internalSearchInputRef","internalListRef","hasSearch","focusList","handleSearchChange","resetSearchInput","forcedEvent","renderMultiselectLabel","leftoverCount","optionsLength","enrichOptions","__spreadProps","ListItemLoadingState","Multiselect","SelectAllOption","otherProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Checkbox } from '@contentful/f36-forms';\nimport { Text } from '@contentful/f36-typography';\nimport { getMultiselectStyles } from './Multiselect.styles';\nimport { getStringMatch } from '@contentful/f36-utils';\nimport { cx } from 'emotion';\n\nexport interface MultiselectOptionProps {\n  label: string;\n  value: string;\n  itemId: string;\n  searchValue?: string;\n  className?: string;\n  onSelectItem: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  isChecked?: boolean;\n  isDisabled?: boolean;\n}\n\nexport const MultiselectOption = ({\n  label,\n  value,\n  itemId,\n  onSelectItem,\n  searchValue,\n  isChecked = false,\n  isDisabled = false,\n  className,\n  ...rest\n}: MultiselectOptionProps) => {\n  const styles = getMultiselectStyles();\n\n  return (\n    <li className={className} {...rest}>\n      <Checkbox\n        id={itemId}\n        value={value}\n        onChange={(event) => onSelectItem(event)}\n        isChecked={isChecked}\n        isDisabled={isDisabled}\n        className={cx(styles.item, isDisabled && styles.disabled)}\n      >\n        <Text data-test-id={`cf-multiselect-list-item-${itemId}`}>\n          <HighlightedItem item={label} inputValue={searchValue} />\n        </Text>\n      </Checkbox>\n    </li>\n  );\n};\n\nfunction HighlightedItem({\n  item,\n  inputValue = '',\n}: {\n  item: string;\n  inputValue?: string;\n}) {\n  const { before, match, after } = getStringMatch(item, inputValue);\n  return (\n    <>\n      {before}\n      <b data-test-id=\"cf-multiselect-item-match\">{match}</b>\n      {after}\n    </>\n  );\n}\n\nHighlightedItem.displayName = 'HighlightedItem';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getMultiselectStyles = () => ({\n  multiselect: css({\n    position: 'relative',\n    width: '100%',\n  }),\n  triggerButton: css({\n    justifyContent: 'space-between',\n  }),\n  currentSelection: css({\n    width: '50%',\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    verticalAlign: 'bottom',\n    marginRight: tokens.spacing2Xs,\n  }),\n  currentSelectionAddition: css({\n    color: tokens.gray600,\n  }),\n  inputField: css({\n    paddingRight: tokens.spacingXl,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    border: 'none',\n    borderRadius: '0px',\n    borderBottom: `1px solid ${tokens.gray200}`,\n  }),\n  toggleButton: css({\n    position: 'absolute',\n    top: '1px',\n    right: '1px',\n    zIndex: tokens.zIndexDefault,\n    padding: tokens.spacing2Xs,\n    height: tokens.spacingXl,\n  }),\n  content: (listMaxHeight: number) =>\n    css({\n      overflow: 'auto',\n      maxHeight: `${listMaxHeight}px`,\n    }),\n  list: css({\n    listStyle: 'none',\n    padding: `${tokens.spacingXs} 0`,\n    margin: 0,\n  }),\n  groupTitle: css({\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    lineHeight: tokens.lineHeightM,\n  }),\n  noMatchesTitle: css({\n    color: tokens.gray500,\n    margin: tokens.spacingM,\n  }),\n  selectAll: css({\n    'label > *': {\n      fontWeight: 'bold',\n    },\n  }),\n  item: css({\n    label: {\n      padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n      wordBreak: 'break-word',\n      whiteSpace: 'break-spaces',\n      hyphens: 'auto',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      cursor: 'pointer',\n      '&:focus, &:hover': {\n        backgroundColor: tokens.gray100,\n      },\n      '&:active': {\n        backgroundColor: tokens.gray200,\n      },\n      '&:focus': {\n        boxShadow: tokens.glowPrimary,\n      },\n      '&:focus:not(:focus-visible)': {\n        boxShadow: 'unset',\n      },\n      '&:focus-visible': {\n        boxShadow: tokens.glowPrimary,\n      },\n    },\n  }),\n  disabled: css({\n    opacity: 0.5,\n    cursor: 'not-allowed',\n  }),\n});\n","import React, { useRef, useState, useCallback, useMemo } from 'react';\nimport { cx } from 'emotion';\n\nimport { mergeRefs, type CommonProps } from '@contentful/f36-core';\nimport { Button, IconButton } from '@contentful/f36-button';\nimport { TextInput } from '@contentful/f36-forms';\nimport { CloseIcon, ChevronDownIcon, SearchIcon } from '@contentful/f36-icons';\nimport { SkeletonContainer, SkeletonBodyText } from '@contentful/f36-skeleton';\nimport { Popover, type PopoverProps } from '@contentful/f36-popover';\nimport { Subheading } from '@contentful/f36-typography';\n\nimport { getMultiselectStyles } from './Multiselect.styles';\nimport { MultiselectOption, MultiselectOptionProps } from './MultiselectOption';\n\nexport interface MultiselectProps extends CommonProps {\n  /** Select Options */\n  children?: React.ReactNode;\n\n  /**\n   * Set a custom icon for the text input\n   */\n  startIcon?: React.ReactElement;\n\n  /**\n   * Placeholder shown before selecting any elements. Defaults to 'Select one or more items'\n   */\n  placeholder?: string;\n\n  /**\n   * current Selected items, to be shown on the trigger button\n   */\n  currentSelection?: Array<string>;\n\n  /**\n   * Function called whenever the search input value changes\n   */\n  onSearchValueChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => void | undefined;\n\n  /**\n   * This is the value will be passed to the `placeholder` prop of the input.\n   * @default \"Search\"\n   */\n  searchPlaceholder?: string;\n\n  /**\n   * A message that will be shown when it is not possible to find any option that matches the input value\n   * @default \"No matches\"\n   */\n  noMatchesMessage?: string;\n\n  /**\n   * Use this prop to get a ref to the input element of the component\n   */\n  searchInputRef?: React.Ref<HTMLInputElement>;\n\n  /**\n   * Pass a form name to the search text input\n   */\n  searchInputName?: string;\n\n  /**\n   * Sets the list to show its loading state\n   * @default false\n   */\n  isLoading?: boolean;\n\n  /**\n   * Use this prop to get a ref to the toggle button of the component\n   */\n  toggleRef?: React.Ref<HTMLButtonElement>;\n\n  /**\n   * Props to pass to the Popover (Dropdown) component\n   */\n  popoverProps?: Partial<PopoverProps> & {\n    /**\n     * It sets the max-height, in pixels, of the list\n     * The default value is the height of 5 single line items\n     * @default 180\n     */\n    listMaxHeight?: number;\n\n    /**\n     * Use this prop to get a ref to the list of items of the component\n     */\n    listRef?: React.Ref<HTMLUListElement>;\n  } & Pick<CommonProps, 'className'>;\n\n  /**\n   * Function called when the popover loses its focus.\n   */\n  onBlur?: () => void;\n}\n\n// Scan through the whole hierachy until `filter` returns true and apply `transform`\n// Inspired from https://stackoverflow.com/a/70676868/17269164\nconst iterateOverChildren = (\n  children: React.ReactNode,\n  filter: (child: React.ReactElement) => boolean,\n  callback: (child: React.ReactElement) => React.ReactElement | void,\n): React.ReactNode => {\n  return React.Children.map(children, (child) => {\n    // equal to (if (child == null || typeof child == 'string'))\n    if (!React.isValidElement(child)) return child;\n    if (filter(child)) {\n      return callback(child);\n    }\n    const childChildren = iterateOverChildren(\n      child.props.children,\n      filter,\n      callback,\n    );\n    return React.cloneElement(child, { children: childChildren } as unknown);\n  });\n};\n\n// Scan through the whole hierachy to count the number of children where `filter` returns true\nconst countMatchingChildren = (\n  children: React.ReactNode,\n  filter: (child: React.ReactElement) => boolean,\n): number => {\n  let counter = 0;\n  React.Children.forEach(children, (child) => {\n    // equal to (if (child == null || typeof child == 'string'))\n    if (!React.isValidElement(child)) return;\n    if (!filter(child)) {\n      counter += countMatchingChildren(child.props.children, filter);\n    } else {\n      counter += 1;\n    }\n  });\n  return counter;\n};\n\nfunction _Multiselect(props: MultiselectProps, ref: React.Ref<HTMLDivElement>) {\n  const {\n    className,\n    startIcon,\n    placeholder = 'Select one or more Items',\n    currentSelection = [],\n    onSearchValueChange,\n    searchPlaceholder = 'Search',\n    searchInputRef,\n    searchInputName,\n    noMatchesMessage = 'No matches found',\n    toggleRef,\n    isLoading = false,\n    testId = 'cf-multiselect',\n    popoverProps = {},\n    children,\n    onBlur,\n  } = props;\n\n  const { listMaxHeight = 180, listRef } = popoverProps;\n\n  const styles = getMultiselectStyles();\n\n  const [searchValue, setSearchValue] = useState('');\n  const [isOpen, setIsOpen] = useState(false);\n\n  const internalSearchInputRef = useRef<HTMLInputElement>(null);\n  const internalListRef = useRef<HTMLUListElement>(null);\n\n  const hasSearch = typeof onSearchValueChange === 'function';\n\n  const focusList = useCallback(() => {\n    // Clearing the search input or selecting an item triggers a rerendering and\n    // thereby the client loses the focus on the clicked element. To avoid having\n    // the focus on the document body (which breaks `closeOnBlur`), we force it\n    // back to the list in the popup.\n    internalListRef.current?.focus();\n  }, []);\n\n  const handleSearchChange = useCallback(\n    (event) => {\n      setSearchValue(event.target.value);\n      onSearchValueChange?.(event);\n    },\n    [onSearchValueChange, setSearchValue],\n  );\n\n  const resetSearchInput = useCallback(() => {\n    if (!searchValue) return;\n    focusList();\n    // this looks a bit hacky, but is the official way of externally triggering the onChange handler for an input\n    // https://stackoverflow.com/a/46012210/17269164\n    const nativeInputValueSetter = Object.getOwnPropertyDescriptor(\n      window.HTMLInputElement.prototype,\n      'value',\n    ).set;\n    nativeInputValueSetter.call(internalSearchInputRef.current, '');\n    const forcedEvent = new Event('change', { bubbles: true });\n    internalSearchInputRef.current.dispatchEvent(forcedEvent);\n  }, [searchValue, focusList]);\n\n  const renderMultiselectLabel = useCallback(() => {\n    if (currentSelection.length === 0) {\n      return <>{placeholder}</>;\n    }\n    const leftoverCount = currentSelection.length - 1;\n    if (leftoverCount === 0) {\n      return (\n        <span\n          data-test-id=\"cf-multiselect-current-selection\"\n          className={styles.currentSelection}\n        >\n          {currentSelection[0]}\n        </span>\n      );\n    }\n    return (\n      <span\n        data-test-id=\"cf-multiselect-current-selection\"\n        className={styles.currentSelection}\n      >\n        {currentSelection[0]}{' '}\n        <span className={styles.currentSelectionAddition}>\n          and {leftoverCount} more\n        </span>\n      </span>\n    );\n  }, [\n    currentSelection,\n    placeholder,\n    styles.currentSelection,\n    styles.currentSelectionAddition,\n  ]);\n\n  const optionsLength = useMemo(\n    () =>\n      countMatchingChildren(\n        children,\n        (child) => child.type === MultiselectOption,\n      ),\n    [children],\n  );\n\n  // clones and enriches the multiselect options\n  const enrichOptions = React.useCallback(\n    (children: React.ReactNode): React.ReactNode => {\n      return iterateOverChildren(\n        children,\n        (child) => child.type === MultiselectOption,\n        (child) => {\n          const onSelectItem = (event: React.ChangeEvent<HTMLInputElement>) => {\n            focusList();\n            child.props?.onSelectItem(event);\n          };\n          return React.cloneElement(child, {\n            searchValue,\n            onSelectItem,\n          } as Partial<MultiselectOptionProps>);\n        },\n      );\n    },\n    [searchValue, focusList],\n  );\n\n  return (\n    <div\n      data-test-id={testId}\n      className={cx(styles.multiselect, className)}\n      ref={ref}\n    >\n      <Popover\n        renderOnlyWhenOpen={false}\n        isFullWidth\n        {...popoverProps}\n        // popoverProps should never overwrite the internal opening logic\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n      >\n        <Popover.Trigger>\n          <Button\n            aria-label=\"Toggle Multiselect\"\n            ref={toggleRef}\n            onClick={() => setIsOpen(!isOpen)}\n            startIcon={startIcon}\n            endIcon={<ChevronDownIcon />}\n            isFullWidth\n            className={styles.triggerButton}\n          >\n            {renderMultiselectLabel()}\n          </Button>\n        </Popover.Trigger>\n        <Popover.Content\n          ref={mergeRefs(listRef, internalListRef)}\n          className={cx(styles.content(listMaxHeight), popoverProps.className)}\n          testId=\"cf-multiselect-container\"\n          onBlur={() => onBlur?.()}\n        >\n          <>\n            {hasSearch && (\n              <>\n                <TextInput\n                  aria-label=\"Search\"\n                  type=\"text\"\n                  value={searchValue}\n                  className={styles.inputField}\n                  testId=\"cf-multiselect-search\"\n                  placeholder={searchPlaceholder}\n                  onChange={handleSearchChange}\n                  ref={mergeRefs(searchInputRef, internalSearchInputRef)}\n                  name={searchInputName}\n                  size=\"small\"\n                />\n                <IconButton\n                  aria-label={searchValue ? 'Clear search' : 'Search'}\n                  className={styles.toggleButton}\n                  variant=\"transparent\"\n                  icon={\n                    searchValue ? (\n                      <CloseIcon variant=\"muted\" />\n                    ) : (\n                      <SearchIcon variant=\"muted\" />\n                    )\n                  }\n                  onClick={resetSearchInput}\n                  isDisabled={!searchValue}\n                  size=\"small\"\n                />\n              </>\n            )}\n            {isLoading && <ListItemLoadingState />}\n\n            {!isLoading && optionsLength > 0 && (\n              <ul className={styles.list} data-test-id=\"cf-multiselect-items\">\n                {hasSearch ? enrichOptions(children) : children}\n              </ul>\n            )}\n\n            {!isLoading && optionsLength === 0 && (\n              <Subheading className={styles.noMatchesTitle}>\n                {noMatchesMessage}\n              </Subheading>\n            )}\n          </>\n        </Popover.Content>\n      </Popover>\n    </div>\n  );\n}\n\nconst ListItemLoadingState = () => {\n  return (\n    <SkeletonContainer svgHeight={16}>\n      <SkeletonBodyText numberOfLines={1} />\n    </SkeletonContainer>\n  );\n};\n\n/**\n * The Multiselect is a component that will allow a user to select multiple items.\n * It has an optional\n */\nexport const Multiselect = React.forwardRef(_Multiselect);\n","import React from 'react';\nimport { MultiselectOption, MultiselectOptionProps } from './MultiselectOption';\nimport { getMultiselectStyles } from './Multiselect.styles';\nimport { cx } from 'emotion';\n\nexport interface SelectAllOptionProps\n  extends Omit<MultiselectOptionProps, 'value' | 'itemId' | 'label'> {\n  label?: string;\n}\n\nexport const SelectAllOption = ({\n  label,\n  onSelectItem,\n  isChecked = false,\n  className,\n  ...otherProps\n}: SelectAllOptionProps) => {\n  const styles = getMultiselectStyles();\n  const displayLabel = label || isChecked ? 'Deselect all' : 'Select all';\n  return (\n    <MultiselectOption\n      value=\"all\"\n      label={displayLabel}\n      itemId=\"SelectAll\"\n      onSelectItem={onSelectItem}\n      isChecked={isChecked}\n      className={cx(styles.selectAll, className)}\n      {...otherProps}\n    />\n  );\n};\n","import { Multiselect as OriginalMultiSelect } from './Multiselect';\nimport { MultiselectOption } from './MultiselectOption';\nimport { SelectAllOption } from './SelectAllOption';\n\ntype CompoundMultiselect = typeof OriginalMultiSelect & {\n  Option: typeof MultiselectOption;\n  SelectAll: typeof SelectAllOption;\n};\n\nexport const Multiselect = OriginalMultiSelect as CompoundMultiselect;\nMultiselect.Option = MultiselectOption;\nMultiselect.SelectAll = SelectAllOption;\n"]}