{"version":3,"sources":["../src/generateIcon.tsx","../src/Icon.tsx"],"names":["React","css","cx","forwardRef","tokens","Box","ICON_DEFAULT_TAG","sizes","fills","useAriaHidden","props","ariaLabel","ariaLabelBy","_Icon","_a","forwardedRef","_b","as","children","className","variant","size","testId","trimmed","viewBox","otherProps","__objRest","shared","ariaHiddenProps","__spreadProps","__spreadValues","Icon","generateIcon","name","path","defaultProps","Component"],"mappings":"+kBAAA,OAAOA,MAAkC,QCAzC,OAAS,OAAAC,EAAK,MAAAC,MAAU,UACxB,OAAOF,GACL,cAAAG,MAKK,QACP,OAAOC,MAAY,yBACnB,OACE,OAAAC,MAKK,uBAEP,IAAMC,EAAmB,MAgBnBC,EAAwE,CAC5E,OAAQ,CACN,OAAQ,OACR,MAAO,MACT,EACA,MAAO,CACL,OAAQ,OACR,MAAO,MACT,EACA,OAAQ,CACN,OAAQ,OACR,MAAO,MACT,EACA,MAAO,CACL,OAAQ,OACR,MAAO,MACT,EACA,KAAM,CACJ,OAAQ,OACR,MAAO,MACT,CACF,EAEMC,EAA0C,CAC9C,MAAOJ,EAAO,QACd,SAAUA,EAAO,cACjB,SAAUA,EAAO,cACjB,QAASA,EAAO,QAChB,UAAWA,EAAO,QAClB,QAASA,EAAO,aAChB,MAAOA,EAAO,UAChB,EA6BMK,EACJC,GAIG,CACH,IAAMC,EAAYD,EAAM,cAClBE,EAAcF,EAAM,mBAE1B,OAAIC,GAAaC,EACR,CAAC,EAGH,CACL,cAAe,EACjB,CACF,EAEO,SAASC,EACdC,EAWAC,EACA,CAZA,IAAAC,EAAAF,EACE,IAAAG,EACA,SAAAC,EACA,UAAAC,EACA,QAAAC,EAAU,UACV,KAAAC,EAAO,QACP,OAAAC,EAAS,aACT,QAAAC,EACA,QAAAC,EAAU,WAxHd,EAgHER,EASKS,EAAAC,EATLV,EASK,CARH,KACA,WACA,YACA,UACA,OACA,SACA,UACA,YAKF,IAAMW,EAAS,CACb,UAAWzB,EACTD,EAAI,CACF,KAAMO,EAAMY,GACZ,OAAQb,EAAMc,GAAM,OACpB,MAAOE,EAAU,OAAShB,EAAMc,GAAM,KACxC,CAAC,EACDF,CACF,EACA,IAAKJ,EACL,OAAAO,CACF,EAEMM,EAAkBnB,EAAcgB,CAAU,EAEhD,OAAIR,EAEAjB,EAAA,cAACK,EAAAwB,EAAAC,MAAA,CACC,QAAQ,gBACJF,GACAH,GACAE,GAJL,CAKC,GAAIV,GACN,EAKFjB,EAAA,cAACK,EAAAyB,EAAAD,EAAAC,IAAA,CACC,QAASN,EACT,QAAQ,gBACJI,GACAH,GAJL,CAKC,GAAInB,IACAqB,GAEHT,CACH,CAEJ,CAEO,IAAMa,EAIT5B,EAAWU,CAAK,ED1Ib,SAASmB,EAAa,CAC3B,KAAAC,EACA,KAAAC,EACA,MAAOC,EACP,QAAAZ,EACA,QAAAC,CACF,EAA2B,CACzB,IAAMY,EAAY,SAAU1B,EAAkB,CAC5C,OACEV,EAAA,cAAC+B,EAAAF,EAAAC,IAAA,CAAK,QAASN,GAAaW,GAAkBzB,GAA7C,CAAoD,QAASa,IAC3DW,CACH,CAEJ,EAEA,OAAID,IACFG,EAAU,YAAcH,GAGnBG,CACT","sourcesContent":["import React, { type ReactElement } from 'react';\n\nimport { Icon, type IconProps } from './Icon';\n\nexport type GeneratedIconProps = Omit<\n  IconProps,\n  'as' | 'children' | 'name' | 'viewBox'\n> & { children?: never };\n\ntype GenerateIconParameters = {\n  /**\n   * Icon name is used as the generated icon's component display name\n   */\n  name?: string;\n  /**\n   * The SVG path(s) to render in the icon wrapper\n   */\n  path: ReactElement;\n  /**\n   * A collection of default props to set on the generated icon\n   */\n  props?: GeneratedIconProps;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: IconProps['trimmed'];\n  /**\n   * Custom SVG viewBox attribute to use for the generated icon\n   */\n  viewBox?: IconProps['viewBox'];\n};\n\nexport function generateIcon({\n  name,\n  path,\n  props: defaultProps,\n  trimmed,\n  viewBox,\n}: GenerateIconParameters) {\n  const Component = function (props: IconProps) {\n    return (\n      <Icon viewBox={viewBox} {...defaultProps} {...props} trimmed={trimmed}>\n        {path}\n      </Icon>\n    );\n  };\n\n  if (name) {\n    Component.displayName = name;\n  }\n\n  return Component;\n}\n","import { css, cx } from 'emotion';\nimport React, {\n  forwardRef,\n  type ComponentType,\n  type ExoticComponent,\n  type ReactElement,\n  type SVGAttributes,\n} from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nconst ICON_DEFAULT_TAG = 'svg';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type IconComponent = ExoticComponent<any> | ComponentType<any>;\n\nexport type IconSize = 'xlarge' | 'large' | 'medium' | 'small' | 'tiny';\n\nexport type IconVariant =\n  | 'negative'\n  | 'positive'\n  | 'primary'\n  | 'secondary'\n  | 'warning'\n  | 'muted'\n  | 'white';\n\nconst sizes: { [key in IconSize]: { [key in 'height' | 'width']: string } } = {\n  xlarge: {\n    height: '48px',\n    width: '48px',\n  },\n  large: {\n    height: '32px',\n    width: '32px',\n  },\n  medium: {\n    height: '24px',\n    width: '24px',\n  },\n  small: {\n    height: '18px',\n    width: '18px',\n  },\n  tiny: {\n    height: '16px',\n    width: '16px',\n  },\n};\n\nconst fills: { [key in IconVariant]: string } = {\n  muted: tokens.gray600,\n  negative: tokens.colorNegative,\n  positive: tokens.colorPositive,\n  primary: tokens.blue600,\n  secondary: tokens.gray900,\n  warning: tokens.colorWarning,\n  white: tokens.colorWhite,\n};\n\nexport type IconInternalProps = CommonProps & {\n  children?: ReactElement | ReactElement[];\n  /**\n   * Determines the size of the icon\n   */\n  size?: IconSize;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: boolean;\n  /**\n   * Determines the fill color used\n   */\n  variant?: IconVariant;\n  /**\n   * Custom SVG viewBox attribute to use\n   */\n  viewBox?: SVGAttributes<SVGSVGElement>['viewBox'];\n};\n\nexport type IconProps<E extends React.ElementType = IconComponent> =\n  PolymorphicProps<\n    IconInternalProps,\n    E,\n    'as' | 'children' | 'width' | 'height'\n  >;\n\nconst useAriaHidden = (\n  props: Pick<\n    IconProps<typeof ICON_DEFAULT_TAG>,\n    'aria-label' | 'aria-labelledby'\n  >,\n) => {\n  const ariaLabel = props['aria-label'];\n  const ariaLabelBy = props['aria-labelledby'];\n\n  if (ariaLabel || ariaLabelBy) {\n    return {};\n  }\n\n  return {\n    'aria-hidden': true,\n  };\n};\n\nexport function _Icon<E extends React.ElementType = IconComponent>(\n  {\n    as,\n    children,\n    className,\n    variant = 'primary',\n    size = 'small',\n    testId = 'cf-ui-icon',\n    trimmed,\n    viewBox = '0 0 24 24',\n    ...otherProps\n  }: IconProps<E>,\n  forwardedRef: React.Ref<any>,\n) {\n  const shared = {\n    className: cx(\n      css({\n        fill: fills[variant],\n        height: sizes[size].height,\n        width: trimmed ? 'auto' : sizes[size].width,\n      }),\n      className,\n    ),\n    ref: forwardedRef,\n    testId,\n  };\n\n  const ariaHiddenProps = useAriaHidden(otherProps);\n\n  if (as) {\n    return (\n      <Box\n        display=\"inline-block\"\n        {...ariaHiddenProps}\n        {...otherProps}\n        {...shared}\n        as={as as React.ElementType}\n      />\n    );\n  }\n\n  return (\n    <Box\n      viewBox={viewBox}\n      display=\"inline-block\"\n      {...ariaHiddenProps}\n      {...otherProps}\n      as={ICON_DEFAULT_TAG}\n      {...shared}\n    >\n      {children}\n    </Box>\n  );\n}\n\nexport const Icon: PolymorphicComponent<\n  ExpandProps<IconInternalProps>,\n  typeof ICON_DEFAULT_TAG,\n  'width' | 'height'\n> = forwardRef(_Icon);\n"]}