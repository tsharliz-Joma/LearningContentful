{"version":3,"sources":["../../src/Table.tsx","../../src/TableBody.tsx","../../src/TableCell.tsx","../../src/tableCellContext.ts","../../src/TableHead.tsx","../../src/TableRow.tsx","../../src/CompoundTable.tsx"],"names":["cx","css","React","forwardRef","Box","tokens","getStyles","Table","_a","forwardedRef","_b","children","className","layout","testId","otherProps","__objRest","styles","__spreadProps","__spreadValues","_TableBody","TableBody","createContext","contextOptions","TableCellContext","TableCell","align","sorting","as","context","offsetTop","isTableHead","TableHead","isSticky","classNames","TableRow","isSelected"],"mappings":"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","sourcesContent":["import { cx, css } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport tokens from '@contentful/f36-tokens';\n\nconst getStyles = () => {\n  return {\n    inline: css({\n      borderRadius: tokens.borderRadiusMedium,\n      boxShadow: `0 0 0 1px ${tokens.gray200}`,\n      'th:first-child': {\n        borderTopLeftRadius: tokens.borderRadiusMedium,\n      },\n      'th:last-child': {\n        borderTopRightRadius: tokens.borderRadiusMedium,\n      },\n      'tr:last-child td:first-child': {\n        borderBottomLeftRadius: tokens.borderRadiusMedium,\n      },\n      'tr:last-child td:last-child': {\n        borderBottomRightRadius: tokens.borderRadiusMedium,\n      },\n    }),\n    root: css({\n      width: '100%',\n    }),\n  };\n};\n\nexport type TableInternalProps = CommonProps & {\n  layout?: 'inline' | 'embedded';\n};\n\nexport type TableProps = PropsWithHTMLElement<TableInternalProps, 'table'>;\n\nexport const Table = forwardRef<HTMLTableElement, ExpandProps<TableProps>>(\n  (\n    {\n      children,\n      className,\n      layout = 'inline',\n      testId = 'cf-ui-table',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getStyles();\n    return (\n      <Box\n        cellPadding=\"0\"\n        cellSpacing=\"0\"\n        {...otherProps}\n        as=\"table\"\n        display=\"table\"\n        ref={forwardedRef}\n        className={cx(\n          styles.root,\n          {\n            [styles.inline]: layout === 'inline',\n          },\n          className,\n        )}\n        testId={testId}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nTable.displayName = 'Table';\n","import React, { forwardRef, type ReactElement } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nexport type TableBodyInternalProps = CommonProps & {\n  children: ReactElement | ReactElement[];\n};\n\nexport type TableBodyProps = PropsWithHTMLElement<\n  TableBodyInternalProps,\n  'tbody'\n>;\n\nfunction _TableBody(\n  { className, children, testId = 'cf-ui-table-body', ...otherProps },\n  forwardedRef,\n) {\n  return (\n    <Box\n      {...otherProps}\n      as=\"tbody\"\n      className={className}\n      ref={forwardedRef}\n      testId={testId}\n    >\n      {children}\n    </Box>\n  );\n}\n\n_TableBody.displayName = 'TableBody';\n\nexport const TableBody = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableBodyProps>\n>(_TableBody);\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { TableCellContext } from './tableCellContext';\n\nexport const sortingDirections = {\n  asc: 'asc',\n  desc: 'desc',\n};\n\nexport type TableCellSorting = keyof typeof sortingDirections | boolean;\n\nexport type TableCellInternalProps = CommonProps & {\n  align?: 'center' | 'left' | 'right';\n  sorting?: TableCellSorting;\n  width?: string | number;\n  children?: React.ReactNode;\n};\n\nexport type TableCellProps = PropsWithHTMLElement<\n  TableCellInternalProps,\n  'th' | 'td'\n>;\n\nexport const TableCell = forwardRef<\n  HTMLTableCellElement,\n  ExpandProps<TableCellProps>\n>(\n  (\n    {\n      align = 'left',\n      children,\n      className,\n      sorting = false as TableCellSorting,\n      testId = 'cf-ui-table-cell',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    return (\n      <TableCellContext.Consumer>\n        {({ as, name: context, offsetTop }) => {\n          const isTableHead = context === 'head';\n\n          return (\n            <Box\n              {...otherProps}\n              as={as}\n              className={cx(\n                css({\n                  backgroundColor: isTableHead ? tokens.gray100 : undefined,\n                  borderBottom: `1px solid ${tokens.gray200}`,\n                  color: sorting ? tokens.gray900 : tokens.gray700,\n                  fontFamily: tokens.fontStackPrimary,\n                  fontSize: tokens.fontSizeM,\n                  fontWeight: isTableHead\n                    ? tokens.fontWeightMedium\n                    : tokens.fontWeightNormal,\n                  lineHeight: tokens.lineHeightL,\n                  padding: `${tokens.spacingS} ${tokens.spacingM}`,\n                  textAlign: align,\n                  verticalAlign: 'top',\n                }),\n                className,\n              )}\n              ref={forwardedRef}\n              style={{\n                ...otherProps.style,\n                top: offsetTop || undefined,\n              }}\n              testId={testId}\n            >\n              {children}\n            </Box>\n          );\n        }}\n      </TableCellContext.Consumer>\n    );\n  },\n);\n\nTableCell.displayName = 'TableCell';\n","import { createContext } from 'react';\n\nexport type TableCellContextOption = {\n  name: 'body' | 'head';\n  as: 'td' | 'th';\n  offsetTop: number | string;\n};\n\nexport const contextOptions: {\n  body: TableCellContextOption;\n  head: TableCellContextOption;\n} = {\n  body: { name: 'body', as: 'td', offsetTop: 0 },\n  head: { name: 'head', as: 'th', offsetTop: 0 },\n};\n\nexport const TableCellContext = createContext(contextOptions.body);\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport tokens from '@contentful/f36-tokens';\n\nimport { TableCellContext, contextOptions } from './';\n\nexport type TableHeadInternalProps = CommonProps & {\n  isSticky?: boolean;\n  offsetTop?: number | string;\n  children: React.ReactNode;\n};\n\nexport type TableHeadProps = PropsWithHTMLElement<\n  TableHeadInternalProps,\n  'thead'\n>;\n\nexport const TableHead = forwardRef<\n  HTMLTableSectionElement,\n  ExpandProps<TableHeadProps>\n>(\n  (\n    {\n      children,\n      className,\n      isSticky = false,\n      offsetTop,\n      testId = 'cf-ui-table-head',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const classNames = cx(\n      // For some reason Parcel doesn't build properly if we extract this to\n      // a variable 🤷\n      isSticky\n        ? css({\n            th: {\n              position: 'sticky',\n              top: 0,\n              zIndex: tokens.zIndexDefault,\n            },\n          })\n        : '',\n      className,\n    );\n\n    return (\n      <TableCellContext.Provider\n        value={{ ...contextOptions.head, offsetTop: offsetTop || 0 }}\n      >\n        <Box\n          {...otherProps}\n          as=\"thead\"\n          className={classNames}\n          ref={forwardedRef}\n          testId={testId}\n        >\n          {children}\n        </Box>\n      </TableCellContext.Provider>\n    );\n  },\n);\n\nTableHead.displayName = 'TableHead';\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nconst getStyles = () => {\n  return {\n    root: css({\n      '&:last-child td': {\n        borderBottom: 'none',\n      },\n      '&:hover td': {\n        backgroundColor: tokens.gray100,\n      },\n    }),\n    selected: css({\n      'td, th': {\n        backgroundColor: tokens.blue100,\n      },\n      'td:last-child': {\n        boxShadow: `inset -2px 0 0 ${tokens.blue500}`,\n      },\n    }),\n  };\n};\n\nexport type TableRowInternalProps = CommonProps & {\n  isSelected?: boolean;\n  children: React.ReactNode;\n};\n\nexport type TableRowProps = PropsWithHTMLElement<TableRowInternalProps, 'tr'>;\n\nexport const TableRow = forwardRef<\n  HTMLTableRowElement,\n  ExpandProps<TableRowProps>\n>(\n  (\n    {\n      className,\n      children,\n      isSelected = false,\n      testId = 'cf-ui-table-row',\n      ...otherProps\n    },\n    forwardedRef,\n  ) => {\n    const styles = getStyles();\n    return (\n      <Box\n        {...otherProps}\n        as=\"tr\"\n        className={cx(\n          styles.root,\n          {\n            [styles.selected]: isSelected,\n          },\n          className,\n        )}\n        ref={forwardedRef}\n        testId={testId}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nTableRow.displayName = 'TableRow';\n","import { Table as OriginalTable } from './Table';\nimport { TableBody } from './TableBody';\nimport { TableCell } from './TableCell';\nimport { TableHead } from './TableHead';\nimport { TableRow } from './TableRow';\n\ntype CompoundTable = typeof OriginalTable & {\n  Row: typeof TableRow;\n  Head: typeof TableHead;\n  Cell: typeof TableCell;\n  Body: typeof TableBody;\n};\n\nexport const Table = OriginalTable as CompoundTable;\nTable.Row = TableRow;\nTable.Head = TableHead;\nTable.Cell = TableCell;\nTable.Body = TableBody;\n"]}